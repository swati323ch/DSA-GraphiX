{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\n  const [treeData, setTreeData] = useState(null);\n\n  // Function to build the tree from a level-order array\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n\n  // DFS Traversal\n  const performDFS = (node, result = []) => {\n    if (!node) return;\n    result.push(node.value);\n    performDFS(node.left, result);\n    performDFS(node.right, result);\n    return result;\n  };\n\n  // BFS Traversal\n  const performBFS = root => {\n    if (!root) return [];\n    const queue = [root];\n    const result = [];\n    while (queue.length) {\n      const node = queue.shift();\n      result.push(node.value);\n      if (node.left) queue.push(node.left);\n      if (node.right) queue.push(node.right);\n    }\n    return result;\n  };\n\n  // Handle \"Visualize Tree\" button click\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n\n  // Handle \"Download Tree\" button click\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n\n  // Handle DFS and BFS buttons\n  const handleDFS = () => {\n    if (!treeData) {\n      alert(\"Please visualize the tree first.\");\n      return;\n    }\n    const dfsResult = performDFS(treeData, []);\n    alert(`DFS Traversal: ${dfsResult.join(\", \")}`);\n  };\n  const handleBFS = () => {\n    if (!treeData) {\n      alert(\"Please visualize the tree first.\");\n      return;\n    }\n    const bfsResult = performBFS(treeData);\n    alert(`BFS Traversal: ${bfsResult.join(\", \")}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input-box\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: handleDFS,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bfs-button\",\n        onClick: handleBFS,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleDownload,\n        children: \"Download Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: \"0 0 1000 600\",\n        children: [treeData && renderTree(treeData, 500, 50, 0), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"JCi5CyM2mjadiQNJ69F/xKnB+Vc=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TreeVisualizer","_s","input","setInput","treeData","setTreeData","buildTree","arr","length","nodes","map","value","left","right","i","j","performDFS","node","result","push","performBFS","root","queue","shift","handleVisualize","parsedArray","JSON","parse","error","alert","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","handleDFS","dfsResult","join","handleBFS","bfsResult","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","placeholder","onClick","id","viewBox","renderTree","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n\r\n  // Function to build the tree from a level-order array\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n\r\n    const nodes = arr.map((value) =>\r\n      value !== null ? { value, left: null, right: null } : null\r\n    );\r\n\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n\r\n    return nodes[0];\r\n  };\r\n\r\n  // DFS Traversal\r\n  const performDFS = (node, result = []) => {\r\n    if (!node) return;\r\n    result.push(node.value);\r\n    performDFS(node.left, result);\r\n    performDFS(node.right, result);\r\n    return result;\r\n  };\r\n\r\n  // BFS Traversal\r\n  const performBFS = (root) => {\r\n    if (!root) return [];\r\n    const queue = [root];\r\n    const result = [];\r\n    while (queue.length) {\r\n      const node = queue.shift();\r\n      result.push(node.value);\r\n      if (node.left) queue.push(node.left);\r\n      if (node.right) queue.push(node.right);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Handle \"Visualize Tree\" button click\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  // Handle \"Download Tree\" button click\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  // Handle DFS and BFS buttons\r\n  const handleDFS = () => {\r\n    if (!treeData) {\r\n      alert(\"Please visualize the tree first.\");\r\n      return;\r\n    }\r\n    const dfsResult = performDFS(treeData, []);\r\n    alert(`DFS Traversal: ${dfsResult.join(\", \")}`);\r\n  };\r\n\r\n  const handleBFS = () => {\r\n    if (!treeData) {\r\n      alert(\"Please visualize the tree first.\");\r\n      return;\r\n    }\r\n    const bfsResult = performBFS(treeData);\r\n    alert(`BFS Traversal: ${bfsResult.join(\", \")}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n\r\n      {/* Textarea for input */}\r\n      <textarea\r\n        className=\"input-box\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n      />\r\n\r\n      {/* Buttons for actions */}\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={handleDFS}>\r\n          DFS\r\n        </button>\r\n        <button className=\"bfs-button\" onClick={handleBFS}>\r\n          BFS\r\n        </button>\r\n        <button className=\"download-button\" onClick={handleDownload}>\r\n          Download Tree\r\n        </button>\r\n      </div>\r\n\r\n      {/* Canvas for rendering the tree */}\r\n      <div className=\"canvas-container\">\r\n        <svg id=\"treeCanvas\" className=\"tree-canvas\" viewBox=\"0 0 1000 600\">\r\n          {treeData && renderTree(treeData, 500, 50, 0)} {/* Root starts at center */}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}