{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\";\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [queueState, setQueueState] = useState([]);\n  const [visitedNodes, setVisitedNodes] = useState([]);\n  const svgRef = useRef();\n  const graphContainerRef = useRef();\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n        const edgeWeight = weight ? parseInt(weight) : null;\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n      setNodes(newNodes);\n      setEdges(newEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const bfs = startNode => {\n    const queue = [startNode];\n    const visited = new Set();\n    const bfsQueueState = [];\n    const visitedState = [];\n    visited.add(startNode);\n    while (queue.length > 0) {\n      const current = queue.shift();\n      bfsQueueState.push([...queue]);\n      visitedState.push(current);\n\n      // Find neighbors\n      const neighbors = edges.filter(edge => edge.source === current && !visited.has(edge.target)).map(edge => edge.target);\n      neighbors.forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push(neighbor);\n        }\n      });\n\n      // Update queue and visited state\n      setQueueState([...bfsQueueState]);\n      setVisitedNodes([...visitedState]);\n    }\n  };\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 700;\n    const height = 350;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(140)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).force(\"x\", d3.forceX(width / 2).strength(0.1)).force(\"y\", d3.forceY(height / 2).strength(0.1)).on(\"tick\", ticked);\n    svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 25).attr(\"refY\", 0).attr(\"orient\", \"auto\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#42a5f5\");\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2).attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"#4CAF50\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2);\n    const label = svg.append(\"g\").attr(\"class\", \"labels\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \".35em\").attr(\"fill\", \"white\");\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n    }\n    return () => simulation.stop();\n  }, [nodes, edges, isDirected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          var _nodes$;\n          return bfs((_nodes$ = nodes[0]) === null || _nodes$ === void 0 ? void 0 : _nodes$.id);\n        },\n        children: \"Run BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"queue-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Queue State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: queueState.map((q, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: q.join(\", \")\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 42\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Visited Nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: visitedNodes.join(\", \")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      ref: graphContainerRef,\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"1000\",\n        height: \"400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"SqB6WYl97RBKfCSEUmKrXyqHzyU=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","message","bfs","startNode","queue","visited","Set","bfsQueueState","visitedState","add","current","shift","neighbors","filter","edge","has","map","neighbor","svg","select","selectAll","remove","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","forceX","forceY","on","ticked","append","attr","link","data","enter","label","text","x","y","stop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_nodes$","q","idx","join","ref","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\";\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]);\r\n  const [visitedNodes, setVisitedNodes] = useState([]);\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef();\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\r\n        }\r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n        const edgeWeight = weight ? parseInt(weight) : null;\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const bfs = (startNode) => {\r\n    const queue = [startNode];\r\n    const visited = new Set();\r\n    const bfsQueueState = [];\r\n    const visitedState = [];\r\n\r\n    visited.add(startNode);\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      bfsQueueState.push([...queue]);\r\n      visitedState.push(current);\r\n\r\n      // Find neighbors\r\n      const neighbors = edges\r\n        .filter((edge) => edge.source === current && !visited.has(edge.target))\r\n        .map((edge) => edge.target);\r\n\r\n      neighbors.forEach((neighbor) => {\r\n        if (!visited.has(neighbor)) {\r\n          visited.add(neighbor);\r\n          queue.push(neighbor);\r\n        }\r\n      });\r\n\r\n      // Update queue and visited state\r\n      setQueueState([...bfsQueueState]);\r\n      setVisitedNodes([...visitedState]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n    const width = 700;\r\n    const height = 350;\r\n\r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(140))\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .force(\"x\", d3.forceX(width / 2).strength(0.1))\r\n      .force(\"y\", d3.forceY(height / 2).strength(0.1))\r\n      .on(\"tick\", ticked);\r\n\r\n    svg\r\n      .append(\"defs\")\r\n      .append(\"marker\")\r\n      .attr(\"id\", \"arrowhead\")\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 25)\r\n      .attr(\"refY\", 0)\r\n      .attr(\"orient\", \"auto\")\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#42a5f5\");\r\n\r\n    const link = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"links\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n\r\n    const node = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"nodes\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 20)\r\n      .attr(\"fill\", \"#4CAF50\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"stroke-width\", 2);\r\n\r\n    const label = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"labels\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d.id)\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \".35em\")\r\n      .attr(\"fill\", \"white\");\r\n\r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n    }\r\n\r\n    return () => simulation.stop();\r\n  }, [nodes, edges, isDirected]);\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n\r\n      <div className=\"button-container\">\r\n        <button onClick={() => bfs(nodes[0]?.id)}>Run BFS</button>\r\n      </div>\r\n\r\n      <div className=\"queue-display\">\r\n        <h3>Queue State</h3>\r\n        <div>{queueState.map((q, idx) => <p key={idx}>{q.join(\", \")}</p>)}</div>\r\n        <h3>Visited Nodes</h3>\r\n        <p>{visitedNodes.join(\", \")}</p>\r\n      </div>\r\n\r\n      <div className=\"graph-display\" ref={graphContainerRef}>\r\n        <svg ref={svgRef} width=\"1000\" height=\"400\"></svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}