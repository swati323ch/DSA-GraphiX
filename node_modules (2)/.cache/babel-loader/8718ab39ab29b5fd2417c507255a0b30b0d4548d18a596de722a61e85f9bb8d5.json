{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [bfsStartNode, setBfsStartNode] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const svgRef = useRef();\n  const graphContainerRef = useRef();\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers.\");\n        }\n        const [from, to] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n        newEdges.push({\n          source: from,\n          target: to\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from\n          });\n        }\n      });\n      setNodes(newNodes);\n      setEdges(newEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const bfsTraversal = startNode => {\n    if (!nodes.some(node => node.id === startNode)) {\n      alert(`Node ${startNode} does not exist in the graph.`);\n      return;\n    }\n    const visited = new Set();\n    const queue = [];\n    queue.push(startNode);\n    visited.add(startNode);\n    const bfsStep = () => {\n      if (queue.length === 0) {\n        console.log(\"BFS Traversal Complete\");\n        return;\n      }\n      const currentNode = queue.shift();\n\n      // Highlight the current node\n      d3.select(svgRef.current).selectAll(\"circle\").filter(d => d.id === currentNode).transition().duration(500).attr(\"fill\", \"#ff5722\");\n      edges.forEach(edge => {\n        const sourceId = typeof edge.source === \"object\" ? edge.source.id : edge.source;\n        const targetId = typeof edge.target === \"object\" ? edge.target.id : edge.target;\n        if (sourceId === currentNode && !visited.has(targetId)) {\n          queue.push(targetId);\n          visited.add(targetId);\n        }\n      });\n      setTimeout(bfsStep, 1000);\n    };\n    bfsStep();\n  };\n  const handleBFS = () => {\n    if (!bfsStartNode) {\n      alert(\"Please enter a start node for BFS.\");\n      return;\n    }\n    bfsTraversal(bfsStartNode);\n  };\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 700;\n    const height = 350;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(140)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).on(\"tick\", ticked);\n    svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 25).attr(\"refY\", 0).attr(\"orient\", \"auto\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#42a5f5\");\n    const link = svg.append(\"g\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2).attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\n    const node = svg.append(\"g\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"#4CAF50\").call(d3.drag().on(\"start\", (event, d) => {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }).on(\"drag\", (event, d) => {\n      d.fx = event.x;\n      d.fy = event.y;\n    }).on(\"end\", (event, d) => {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }));\n    const label = svg.append(\"g\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"x\", d => d.x).attr(\"y\", d => d.y).attr(\"text-anchor\", \"middle\").attr(\"fill\", \"white\");\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n    }\n  }, [nodes, edges, isDirected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: handleInputChange,\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter start node\",\n      value: bfsStartNode,\n      onChange: e => setBfsStartNode(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBFS,\n      children: \"Start BFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"700\",\n      height: \"350\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"2QS7qIn3M5AFLV27jgpQuGjhaDg=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","bfsStartNode","setBfsStartNode","error","setError","isDirected","setIsDirected","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","some","node","id","push","source","message","bfsTraversal","startNode","alert","visited","Set","queue","add","bfsStep","console","log","currentNode","shift","select","current","selectAll","filter","d","transition","duration","attr","edge","sourceId","targetId","has","setTimeout","handleBFS","svg","remove","width","height","simulation","forceSimulation","force","forceLink","distance","forceManyBody","strength","forceCenter","on","ticked","append","link","data","enter","call","drag","event","active","alphaTarget","restart","fx","x","fy","y","label","text","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onClick","ref","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [bfsStartNode, setBfsStartNode] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef();\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n\r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers.\");\r\n        }\r\n\r\n        const [from, to] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n\r\n        newEdges.push({ source: from, target: to });\r\n\r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from });\r\n        }\r\n      });\r\n\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const bfsTraversal = (startNode) => {\r\n    if (!nodes.some((node) => node.id === startNode)) {\r\n      alert(`Node ${startNode} does not exist in the graph.`);\r\n      return;\r\n    }\r\n\r\n    const visited = new Set();\r\n    const queue = [];\r\n    queue.push(startNode);\r\n    visited.add(startNode);\r\n\r\n    const bfsStep = () => {\r\n      if (queue.length === 0) {\r\n        console.log(\"BFS Traversal Complete\");\r\n        return;\r\n      }\r\n\r\n      const currentNode = queue.shift();\r\n\r\n      // Highlight the current node\r\n      d3.select(svgRef.current)\r\n        .selectAll(\"circle\")\r\n        .filter((d) => d.id === currentNode)\r\n        .transition()\r\n        .duration(500)\r\n        .attr(\"fill\", \"#ff5722\");\r\n\r\n      edges.forEach((edge) => {\r\n        const sourceId = typeof edge.source === \"object\" ? edge.source.id : edge.source;\r\n        const targetId = typeof edge.target === \"object\" ? edge.target.id : edge.target;\r\n\r\n        if (sourceId === currentNode && !visited.has(targetId)) {\r\n          queue.push(targetId);\r\n          visited.add(targetId);\r\n        }\r\n      });\r\n\r\n      setTimeout(bfsStep, 1000);\r\n    };\r\n\r\n    bfsStep();\r\n  };\r\n\r\n  const handleBFS = () => {\r\n    if (!bfsStartNode) {\r\n      alert(\"Please enter a start node for BFS.\");\r\n      return;\r\n    }\r\n    bfsTraversal(bfsStartNode);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n    const width = 700;\r\n    const height = 350;\r\n\r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(140))\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .on(\"tick\", ticked);\r\n\r\n    svg\r\n      .append(\"defs\")\r\n      .append(\"marker\")\r\n      .attr(\"id\", \"arrowhead\")\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 25)\r\n      .attr(\"refY\", 0)\r\n      .attr(\"orient\", \"auto\")\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#42a5f5\");\r\n\r\n    const link = svg\r\n      .append(\"g\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n\r\n    const node = svg\r\n      .append(\"g\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 20)\r\n      .attr(\"fill\", \"#4CAF50\")\r\n      .call(\r\n        d3\r\n          .drag()\r\n          .on(\"start\", (event, d) => {\r\n            if (!event.active) simulation.alphaTarget(0.3).restart();\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n          })\r\n          .on(\"drag\", (event, d) => {\r\n            d.fx = event.x;\r\n            d.fy = event.y;\r\n          })\r\n          .on(\"end\", (event, d) => {\r\n            if (!event.active) simulation.alphaTarget(0);\r\n            d.fx = null;\r\n            d.fy = null;\r\n          })\r\n      );\r\n\r\n    const label = svg\r\n      .append(\"g\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d.id)\r\n      .attr(\"x\", (d) => d.x)\r\n      .attr(\"y\", (d) => d.y)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"white\");\r\n\r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n    }\r\n  }, [nodes, edges, isDirected]);\r\n\r\n  return (\r\n    <div>\r\n      <textarea onChange={handleInputChange} value={input}></textarea>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter start node\"\r\n        value={bfsStartNode}\r\n        onChange={(e) => setBfsStartNode(e.target.value)}\r\n      />\r\n      <button onClick={handleBFS}>Start BFS</button>\r\n      <svg ref={svgRef} width=\"700\" height=\"350\"></svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}