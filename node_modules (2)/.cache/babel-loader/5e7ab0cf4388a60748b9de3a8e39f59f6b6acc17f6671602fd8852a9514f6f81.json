{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\n  const [treeData, setTreeData] = useState(null);\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\n  const [bfsQueue, setBfsQueue] = useState([]); // State for BFS queue visualization\n\n  // Function to build the tree from a level-order array\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n\n  // Handle \"Visualize Tree\" button click\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n\n  // Recursive function to render the tree nodes and lines\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\n    if (!node) return null;\n    const horizontalSpacing = 3800 / Math.pow(2, level + 4); // More spacing as depth increases\n    const leftChildX = x - horizontalSpacing;\n    const rightChildX = x + horizontalSpacing;\n    const childY = y + 100;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY + 30,\n        x2: x,\n        y2: y,\n        stroke: \"black\",\n        strokeWidth: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"circle-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: \"25\",\n          className: highlightedNodes.includes(node) ? \"highlighted-circle\" : \"tree-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          textAnchor: \"middle\",\n          dy: \"5\",\n          fill: \"white\",\n          fontWeight: \"bold\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y), node.right && renderTree(node.right, rightChildX, childY, level + 1, x, y)]\n    }, void 0, true);\n  };\n\n  // Visualization helpers for DFS and BFS\n  const visualizeTraversal = (traversal, isBFS = false) => {\n    if (!treeData) {\n      alert(\"Please create the tree first.\");\n      return;\n    }\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < traversal.length) {\n        setHighlightedNodes([traversal[index]]);\n\n        // Update BFS queue visualization if applicable\n        if (isBFS) {\n          setBfsQueue(traversal.slice(index + 1));\n        }\n        index++;\n      } else {\n        clearInterval(interval);\n        setHighlightedNodes([]); // Clear highlights after traversal\n        setBfsQueue([]); // Clear queue after traversal\n      }\n    }, 500); // 500ms delay for visualization\n  };\n\n  // DFS Traversal\n  const dfsTraversal = node => {\n    const result = [];\n    const backtrack = [];\n    const dfs = current => {\n      if (!current) return;\n      result.push(current);\n      dfs(current.left);\n      dfs(current.right);\n      backtrack.push(current); // Add node again for backtracking\n    };\n    dfs(node);\n    return {\n      result,\n      backtrack\n    };\n  };\n\n  // BFS Traversal\n  const bfsTraversal = node => {\n    const result = [];\n    const queue = [node];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (current) {\n        result.push(current);\n        if (current.left) queue.push(current.left);\n        if (current.right) queue.push(current.right);\n      }\n    }\n    return result;\n  };\n\n  // Handlers for DFS and BFS visualization\n  const handleDFSVisualize = () => {\n    const {\n      result,\n      backtrack\n    } = dfsTraversal(treeData);\n    const traversal = [...result, ...backtrack];\n    visualizeTraversal(traversal);\n  };\n  const handleBFSVisualize = () => {\n    const traversal = bfsTraversal(treeData);\n    visualizeTraversal(traversal, true);\n  };\n\n  // Handle \"Download Tree\" button click\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input-box\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleDownload,\n        children: \"Download Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleBFSVisualize,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleDFSVisualize,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: \"0 0 1000 600\",\n        children: treeData && renderTree(treeData, 500, 50, 0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bfs-beaker\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"BFS Queue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"queue-container\",\n        children: bfsQueue.map((node, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"queue-node\",\n          children: node.value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"zkx8u61tw/qx//15u0IX1DyiQsY=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","highlightedNodes","setHighlightedNodes","bfsQueue","setBfsQueue","buildTree","arr","length","nodes","map","value","left","right","i","j","handleVisualize","parsedArray","JSON","parse","error","alert","renderTree","node","x","y","level","parentX","parentY","horizontalSpacing","Math","pow","leftChildX","rightChildX","childY","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","cx","cy","r","includes","textAnchor","dy","fill","fontWeight","visualizeTraversal","traversal","isBFS","index","interval","setInterval","slice","clearInterval","dfsTraversal","result","backtrack","dfs","current","push","bfsTraversal","queue","shift","handleDFSVisualize","handleBFSVisualize","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","onChange","e","target","placeholder","onClick","id","viewBox","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n  const [bfsQueue, setBfsQueue] = useState([]); // State for BFS queue visualization\r\n\r\n  // Function to build the tree from a level-order array\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n\r\n    const nodes = arr.map((value) => (value !== null ? { value, left: null, right: null } : null));\r\n\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n\r\n    return nodes[0];\r\n  };\r\n\r\n  // Handle \"Visualize Tree\" button click\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  // Recursive function to render the tree nodes and lines\r\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    const horizontalSpacing = 3800 / Math.pow(2, level + 4); // More spacing as depth increases\r\n    const leftChildX = x - horizontalSpacing;\r\n    const rightChildX = x + horizontalSpacing;\r\n    const childY = y + 100;\r\n\r\n    return (\r\n      <>\r\n        {parentX !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY + 30}\r\n            x2={x}\r\n            y2={y}\r\n            stroke=\"black\"\r\n            strokeWidth=\"3\"\r\n          />\r\n        )}\r\n        <g className=\"circle-group\">\r\n          <circle\r\n            cx={x}\r\n            cy={y}\r\n            r=\"25\"\r\n            className={highlightedNodes.includes(node) ? \"highlighted-circle\" : \"tree-circle\"}\r\n          />\r\n          <text x={x} y={y} textAnchor=\"middle\" dy=\"5\" fill=\"white\" fontWeight=\"bold\">\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n        {node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y)}\r\n        {node.right && renderTree(node.right, rightChildX, childY, level + 1, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  // Visualization helpers for DFS and BFS\r\n  const visualizeTraversal = (traversal, isBFS = false) => {\r\n    if (!treeData) {\r\n      alert(\"Please create the tree first.\");\r\n      return;\r\n    }\r\n\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < traversal.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n\r\n        // Update BFS queue visualization if applicable\r\n        if (isBFS) {\r\n          setBfsQueue(traversal.slice(index + 1));\r\n        }\r\n\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setHighlightedNodes([]); // Clear highlights after traversal\r\n        setBfsQueue([]); // Clear queue after traversal\r\n      }\r\n    }, 500); // 500ms delay for visualization\r\n  };\r\n\r\n  // DFS Traversal\r\n  const dfsTraversal = (node) => {\r\n    const result = [];\r\n    const backtrack = [];\r\n    const dfs = (current) => {\r\n      if (!current) return;\r\n      result.push(current);\r\n      dfs(current.left);\r\n      dfs(current.right);\r\n      backtrack.push(current); // Add node again for backtracking\r\n    };\r\n    dfs(node);\r\n    return { result, backtrack };\r\n  };\r\n\r\n  // BFS Traversal\r\n  const bfsTraversal = (node) => {\r\n    const result = [];\r\n    const queue = [node];\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      if (current) {\r\n        result.push(current);\r\n        if (current.left) queue.push(current.left);\r\n        if (current.right) queue.push(current.right);\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Handlers for DFS and BFS visualization\r\n  const handleDFSVisualize = () => {\r\n    const { result, backtrack } = dfsTraversal(treeData);\r\n    const traversal = [...result, ...backtrack];\r\n    visualizeTraversal(traversal);\r\n  };\r\n\r\n  const handleBFSVisualize = () => {\r\n    const traversal = bfsTraversal(treeData);\r\n    visualizeTraversal(traversal, true);\r\n  };\r\n\r\n  // Handle \"Download Tree\" button click\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n\r\n      <textarea\r\n        className=\"input-box\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n      />\r\n\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"download-button\" onClick={handleDownload}>\r\n          Download Tree\r\n        </button>\r\n        <button className=\"download-button\" onClick={handleBFSVisualize}>\r\n          BFS\r\n        </button>\r\n        <button className=\"download-button\" onClick={handleDFSVisualize}>\r\n          DFS\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"canvas-container\">\r\n        <svg id=\"treeCanvas\" className=\"tree-canvas\" viewBox=\"0 0 1000 600\">\r\n          {treeData && renderTree(treeData, 500, 50, 0)}\r\n        </svg>\r\n      </div>\r\n\r\n      {/* Beaker for BFS visualization */}\r\n      <div className=\"bfs-beaker\">\r\n        <h3>BFS Queue</h3>\r\n        <div className=\"queue-container\">\r\n          {bfsQueue.map((node, index) => (\r\n            <div key={index} className=\"queue-node\">\r\n              {node.value}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}