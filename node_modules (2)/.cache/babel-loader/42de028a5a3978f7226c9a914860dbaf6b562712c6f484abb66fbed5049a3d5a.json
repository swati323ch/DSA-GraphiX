{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport db from \"./assets/Download_button.png\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\n  const [treeData, setTreeData] = useState(null);\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\n  const [bfsQueue, setBfsQueue] = useState([]);\n  const [inorderResult, setInorderResult] = useState([]);\n  const [preorderResult, setPreorderResult] = useState([]);\n  const [postorderResult, setPostorderResult] = useState([]);\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\n  const [isTraversalRunning, setIsTraversalRunning] = useState(false);\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n  const bfsTraversalWithQueue = node => {\n    setIsBfsRunning(true);\n    setIsTraversalRunning(false);\n    const queue = [node];\n    const traversal = [];\n    const visualQueue = [];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (current) {\n        traversal.push(current.value);\n        visualQueue.push([...queue.map(n => n.value), current.value]);\n        if (current.left) queue.push(current.left);\n        if (current.right) queue.push(current.right);\n      }\n    }\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < visualQueue.length) {\n        setHighlightedNodes([traversal[index]]);\n        setBfsQueue(visualQueue[index]);\n        index++;\n      } else {\n        clearInterval(interval);\n        setIsBfsRunning(false);\n        setHighlightedNodes([]);\n        setBfsQueue([]);\n      }\n    }, 1500);\n  };\n  const dfsTraversal = node => {\n    const result = [];\n    const dfs = current => {\n      if (!current) return;\n      result.push(current.value);\n      dfs(current.left);\n      dfs(current.right);\n    };\n    dfs(node);\n    return result;\n  };\n  const resetTraversalResults = () => {\n    setInorderResult([]);\n    setPreorderResult([]);\n    setPostorderResult([]);\n  };\n  const inorderTraversal = node => {\n    resetTraversalResults(); // Reset results before starting\n    setIsTraversalRunning(true);\n    const result = [];\n    const inorder = async current => {\n      if (!current) return;\n      await inorder(current.left);\n      result.push(current.value);\n      setHighlightedNodes([current.value]);\n      setInorderResult(prev => [...prev, current.value]);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      await inorder(current.right);\n    };\n    inorder(node).then(() => setHighlightedNodes([]));\n  };\n  const preorderTraversal = node => {\n    resetTraversalResults(); // Reset results before starting\n    setIsTraversalRunning(true);\n    const result = [];\n    const preorder = async current => {\n      if (!current) return;\n      result.push(current.value);\n      setHighlightedNodes([current.value]);\n      setPreorderResult(prev => [...prev, current.value]);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      await preorder(current.left);\n      await preorder(current.right);\n    };\n    preorder(node).then(() => setHighlightedNodes([]));\n  };\n  const postorderTraversal = node => {\n    resetTraversalResults(); // Reset results before starting\n    setIsTraversalRunning(true);\n    const result = [];\n    const postorder = async current => {\n      if (!current) return;\n      await postorder(current.left);\n      await postorder(current.right);\n      result.push(current.value);\n      setHighlightedNodes([current.value]);\n      setPostorderResult(prev => [...prev, current.value]);\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    };\n    postorder(node).then(() => setHighlightedNodes([]));\n  };\n  const visualizeTraversal = traversal => {\n    setIsBfsRunning(false);\n    setIsTraversalRunning(true);\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < traversal.length) {\n        setHighlightedNodes([traversal[index]]);\n        index++;\n      } else {\n        clearInterval(interval);\n        setHighlightedNodes([]);\n      }\n    }, 1500);\n  };\n  const handleBFSVisualize = () => {\n    if (!isBfsRunning && treeData) {\n      bfsTraversalWithQueue(treeData);\n    } else if (isBfsRunning) {\n      alert(\"BFS is already running. Please wait for it to finish.\");\n    } else {\n      alert(\"Please visualize the tree first.\");\n    }\n  };\n  const handleDFSVisualize = () => {\n    const traversal = dfsTraversal(treeData);\n    visualizeTraversal(traversal);\n  };\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n  const calculateTreeDepth = node => {\n    // If the node is null, return 0 (base case)\n    if (!node) return 0;\n\n    // Recursively calculate the depth of the left and right subtrees\n    const leftDepth = calculateTreeDepth(node.left);\n    const rightDepth = calculateTreeDepth(node.right);\n\n    // The depth of the current node is 1 + the maximum depth of its left and right children\n    return Math.max(leftDepth, rightDepth) + 1;\n  };\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\n    if (!node) return null;\n    const horizontalSpacing = 3800 / Math.pow(2, level + 4);\n    const leftChildX = x - horizontalSpacing;\n    const rightChildX = x + horizontalSpacing;\n    const childY = y + 100;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY + 28,\n        x2: x,\n        y2: y,\n        stroke: \"black\",\n        strokeWidth: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"circle-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: \"25\",\n          className: highlightedNodes.includes(node.value) ? \"highlighted-circle\" : \"tree-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          textAnchor: \"middle\",\n          dy: \"5\",\n          fill: \"white\",\n          fontWeight: \"bold\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y), node.right && renderTree(node.right, rightChildX, childY, level + 1, x, y)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-download-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"input-box\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"download-button\",\n          onClick: handleDownload,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: db,\n            alt: \"Download\",\n            className: \"download-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"download-text\",\n          children: \"Download Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bfs-button\",\n        onClick: handleBFSVisualize,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: handleDFSVisualize,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: () => inorderTraversal(treeData),\n        children: \"Inorder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: () => preorderTraversal(treeData),\n        children: \"Preorder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: () => postorderTraversal(treeData),\n        children: \"Postorder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), isBfsRunning && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"queue-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"queue-title\",\n        children: [\"BFS Queue:\", \" \", bfsQueue.map((value, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `queue-inline-item ${highlightedNodes.includes(value) ? \"red-queue-item\" : \"\"}`,\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: `0 0 1000 ${Math.max(300, 100 + calculateTreeDepth(treeData) * 100)}`,\n        children: treeData && renderTree(treeData, 500, 20 + calculateTreeDepth(treeData) > 3 ? 180 : 50, 0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 1\n    }, this), isTraversalRunning && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"traversal-result-container\",\n      children: [inorderResult.length > 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"queue-title\",\n        children: [\"Inorder Traversal: \", inorderResult.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 13\n      }, this), preorderResult.length > 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"queue-title\",\n        children: [\"Preorder Traversal: \", preorderResult.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 13\n      }, this), postorderResult.length > 0 && /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"queue-title\",\n        children: [\"Postorder Traversal: \", postorderResult.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"rlTZlJs6gM2ljiCRhZlzOaqeKW4=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","db","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","highlightedNodes","setHighlightedNodes","bfsQueue","setBfsQueue","inorderResult","setInorderResult","preorderResult","setPreorderResult","postorderResult","setPostorderResult","isBfsRunning","setIsBfsRunning","isTraversalRunning","setIsTraversalRunning","buildTree","arr","length","nodes","map","value","left","right","i","j","handleVisualize","parsedArray","JSON","parse","error","alert","bfsTraversalWithQueue","node","queue","traversal","visualQueue","current","shift","push","n","index","interval","setInterval","clearInterval","dfsTraversal","result","dfs","resetTraversalResults","inorderTraversal","inorder","prev","Promise","resolve","setTimeout","then","preorderTraversal","preorder","postorderTraversal","postorder","visualizeTraversal","handleBFSVisualize","handleDFSVisualize","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","calculateTreeDepth","leftDepth","rightDepth","Math","max","renderTree","x","y","level","parentX","parentY","horizontalSpacing","pow","leftChildX","rightChildX","childY","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","cx","cy","r","includes","textAnchor","dy","fill","fontWeight","onChange","e","target","placeholder","onClick","src","alt","id","viewBox","join","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\nimport db from \"./assets/Download_button.png\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n  const [bfsQueue, setBfsQueue] = useState([]);\r\n  const [inorderResult, setInorderResult] = useState([]);\r\n  const [preorderResult, setPreorderResult] = useState([]);\r\n  const [postorderResult, setPostorderResult] = useState([]);\r\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\r\n  const [isTraversalRunning, setIsTraversalRunning] = useState(false);\r\n\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n    const nodes = arr.map((value) =>\r\n      value !== null ? { value, left: null, right: null } : null\r\n    );\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n    return nodes[0];\r\n  };\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  const bfsTraversalWithQueue = (node) => {\r\n    setIsBfsRunning(true);\r\n    setIsTraversalRunning(false);\r\n    const queue = [node];\r\n    const traversal = [];\r\n    const visualQueue = [];\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      if (current) {\r\n        traversal.push(current.value);\r\n        visualQueue.push([...queue.map((n) => n.value), current.value]);\r\n        if (current.left) queue.push(current.left);\r\n        if (current.right) queue.push(current.right);\r\n      }\r\n    }\r\n\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < visualQueue.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n        setBfsQueue(visualQueue[index]);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setIsBfsRunning(false);\r\n        setHighlightedNodes([]);\r\n        setBfsQueue([]);\r\n      }\r\n    }, 1500);\r\n  };\r\n\r\n  const dfsTraversal = (node) => {\r\n    const result = [];\r\n    const dfs = (current) => {\r\n      if (!current) return;\r\n      result.push(current.value);\r\n      dfs(current.left);\r\n      dfs(current.right);\r\n    };\r\n    dfs(node);\r\n    return result;\r\n  };\r\n  const resetTraversalResults = () => {\r\n    setInorderResult([]);\r\n    setPreorderResult([]);\r\n    setPostorderResult([]);\r\n  };\r\n  \r\n  const inorderTraversal = (node) => {\r\n    resetTraversalResults(); // Reset results before starting\r\n    setIsTraversalRunning(true);\r\n    const result = [];\r\n    const inorder = async (current) => {\r\n      if (!current) return;\r\n      await inorder(current.left);\r\n      result.push(current.value);\r\n      setHighlightedNodes([current.value]);\r\n      setInorderResult((prev) => [...prev, current.value]);\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n      await inorder(current.right);\r\n    };\r\n    inorder(node).then(() => setHighlightedNodes([]));\r\n  };\r\n  \r\n  const preorderTraversal = (node) => {\r\n    resetTraversalResults(); // Reset results before starting\r\n    setIsTraversalRunning(true);\r\n    const result = [];\r\n    const preorder = async (current) => {\r\n      if (!current) return;\r\n      result.push(current.value);\r\n      setHighlightedNodes([current.value]);\r\n      setPreorderResult((prev) => [...prev, current.value]);\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n      await preorder(current.left);\r\n      await preorder(current.right);\r\n    };\r\n    preorder(node).then(() => setHighlightedNodes([]));\r\n  };\r\n  \r\n  const postorderTraversal = (node) => {\r\n    resetTraversalResults(); // Reset results before starting\r\n    setIsTraversalRunning(true);\r\n    const result = [];\r\n    const postorder = async (current) => {\r\n      if (!current) return;\r\n      await postorder(current.left);\r\n      await postorder(current.right);\r\n      result.push(current.value);\r\n      setHighlightedNodes([current.value]);\r\n      setPostorderResult((prev) => [...prev, current.value]);\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    };\r\n    postorder(node).then(() => setHighlightedNodes([]));\r\n  };\r\n  \r\n  const visualizeTraversal = (traversal) => {\r\n    setIsBfsRunning(false);\r\n    setIsTraversalRunning(true);\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < traversal.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setHighlightedNodes([]);\r\n      }\r\n    }, 1500);\r\n  };\r\n\r\n  const handleBFSVisualize = () => {\r\n    if (!isBfsRunning && treeData) {\r\n      bfsTraversalWithQueue(treeData);\r\n    } else if (isBfsRunning) {\r\n      alert(\"BFS is already running. Please wait for it to finish.\");\r\n    } else {\r\n      alert(\"Please visualize the tree first.\");\r\n    }\r\n  };\r\n\r\n  const handleDFSVisualize = () => {\r\n    const traversal = dfsTraversal(treeData);\r\n    visualizeTraversal(traversal);\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  const calculateTreeDepth = (node) => {\r\n    // If the node is null, return 0 (base case)\r\n    if (!node) return 0;\r\n  \r\n    // Recursively calculate the depth of the left and right subtrees\r\n    const leftDepth = calculateTreeDepth(node.left);\r\n    const rightDepth = calculateTreeDepth(node.right);\r\n  \r\n    // The depth of the current node is 1 + the maximum depth of its left and right children\r\n    return Math.max(leftDepth, rightDepth) + 1;\r\n  };\r\n  \r\n\r\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    const horizontalSpacing = 3800 / Math.pow(2, level + 4);\r\n    const leftChildX = x - horizontalSpacing;\r\n    const rightChildX = x + horizontalSpacing;\r\n    const childY = y + 100;\r\n\r\n    return (\r\n      <>\r\n        {parentX !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY + 28}\r\n            x2={x}\r\n            y2={y}\r\n            stroke=\"black\"\r\n            strokeWidth=\"3\"\r\n          />\r\n        )}\r\n        <g className=\"circle-group\">\r\n          <circle\r\n            cx={x}\r\n            cy={y}\r\n            r=\"25\"\r\n            className={\r\n              highlightedNodes.includes(node.value)\r\n                ? \"highlighted-circle\"\r\n                : \"tree-circle\"\r\n            }\r\n          />\r\n          <text\r\n            x={x}\r\n            y={y}\r\n            textAnchor=\"middle\"\r\n            dy=\"5\"\r\n            fill=\"white\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n        {node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y)}\r\n        {node.right &&\r\n          renderTree(node.right, rightChildX, childY, level + 1, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          className=\"input-box\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8]\"\r\n        />\r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={handleDownload}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-text\">Download Tree</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"bfs-button\" onClick={handleBFSVisualize}>\r\n          BFS\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={handleDFSVisualize}>\r\n          DFS\r\n        </button>\r\n        <button\r\n          className=\"dfs-button\"\r\n          onClick={() => inorderTraversal(treeData)}\r\n        >\r\n          Inorder\r\n        </button>\r\n        <button\r\n          className=\"dfs-button\"\r\n          onClick={() => preorderTraversal(treeData)}\r\n        >\r\n          Preorder\r\n        </button>\r\n        <button\r\n          className=\"dfs-button\"\r\n          onClick={() => postorderTraversal(treeData)}\r\n        >\r\n          Postorder\r\n        </button>\r\n      </div>\r\n\r\n      {isBfsRunning && (\r\n        <div className=\"queue-container\">\r\n          <h3 className=\"queue-title\">\r\n            BFS Queue:{\" \"}\r\n            {bfsQueue.map((value, index) => (\r\n              <span\r\n                key={index}\r\n                className={`queue-inline-item ${\r\n                  highlightedNodes.includes(value) ? \"red-queue-item\" : \"\"\r\n                }`}\r\n              >\r\n                {value}\r\n              </span>\r\n            ))}\r\n          </h3>\r\n        </div>\r\n      )}\r\n\r\n<div className=\"canvas-container\">\r\n  <svg\r\n    id=\"treeCanvas\"\r\n    className=\"tree-canvas\"\r\n    viewBox={`0 0 1000 ${Math.max(300, 100 + calculateTreeDepth(treeData) * 100)}`}\r\n  >\r\n    {treeData && renderTree(treeData, 500, 20+calculateTreeDepth(treeData) > 3 ? 180 : 50, 0)}\r\n  </svg>\r\n</div>\r\n\r\n      {isTraversalRunning && (\r\n        <div className=\"traversal-result-container\">\r\n          {inorderResult.length > 0 && (\r\n            <h3 className=\"queue-title\">Inorder Traversal: {inorderResult.join(\", \")}</h3>\r\n          )}\r\n          {preorderResult.length > 0 && (\r\n            <h3 className=\"queue-title\">Preorder Traversal: {preorderResult.join(\", \")}</h3>\r\n          )}\r\n          {postorderResult.length > 0 && (\r\n            <h3 className=\"queue-title\">Postorder Traversal: {postorderResult.join(\", \")}</h3>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}