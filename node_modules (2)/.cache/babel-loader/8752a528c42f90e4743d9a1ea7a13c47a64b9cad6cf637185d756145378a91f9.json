{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\n  const [topoSortResult, setTopoSortResult] = useState(\"\");\n  const [shortestPathResult, setShortestPathResult] = useState(\"\");\n  const [shortestPathInput, setShortestPathInput] = useState({\n    startNode: \"\",\n    endNode: \"\"\n  });\n  const svgRef = useRef();\n  const graphContainerRef = useRef(); // Ref for the graph container\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n\n        // Handle optional weight\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.source === edge.source && e.target === edge.target || e.source === edge.target && e.target === edge.source));\n      setNodes(newNodes);\n      setEdges(uniqueEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const downloadGraph = () => {\n    if (graphContainerRef.current) {\n      toPng(graphContainerRef.current).then(dataUrl => {\n        const link = document.createElement(\"a\");\n        link.download = \"graph_visualization.png\";\n        link.href = dataUrl;\n        link.click();\n      }).catch(err => {\n        console.error(\"Failed to download graph as PNG:\", err);\n      });\n    }\n  };\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 700;\n    const height = 350;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(140)) // Increase edge distance here (was 100)\n    .force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).force(\"x\", d3.forceX(width / 2).strength(0.1)).force(\"y\", d3.forceY(height / 2).strength(0.1)).on(\"tick\", ticked);\n    function constrainBounds(d) {\n      d.x = Math.max(20, Math.min(width - 20, d.x));\n      d.y = Math.max(20, Math.min(height - 20, d.y));\n    }\n    svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 25).attr(\"refY\", 0).attr(\"orient\", \"auto\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#42a5f5\");\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2).attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"#4CAF50\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"class\", d => `node node-${d.id}`) // Add unique class for each node\n    .call(d3.drag().on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\", dragEnded));\n    const label = svg.append(\"g\").attr(\"class\", \"labels\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \".35em\").attr(\"fill\", \"white\");\n    const edgeLabels = svg.append(\"g\").attr(\"class\", \"edge-labels\").selectAll(\"text\").data(edges).enter().append(\"text\").text(d => d.weight !== null ? d.weight : \"\") // Display weight only if it's not null\n    .attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \"-10px\").attr(\"fill\", \"black\") // Ensure this is explicitly set\n    .style(\"fill\", \"black\"); // Explicitly set fill using style for stronger application\n\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.each(constrainBounds).attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n      edgeLabels.attr(\"x\", d => (d.source.x + d.target.x) / 2).attr(\"y\", d => (d.source.y + d.target.y) / 2);\n    }\n    function dragStarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragEnded(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n    return () => simulation.stop();\n  }, [nodes, edges, isDirected]);\n  const handleBFS = () => {\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\n    const queue = [startNode];\n    const visited = new Set();\n    visited.add(startNode);\n    const bfsTraversal = (prevNode = null) => {\n      if (queue.length === 0) {\n        // Remove highlight for the last processed node\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n        return;\n      }\n      const currentNode = queue.shift(); // Dequeue node\n      setQueueState(prevQueueState => [...prevQueueState, currentNode]);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n\n      // Remove highlight for the previously processed node\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n\n      // Highlight the current node\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n\n      // Find neighbors by comparing ids, as edges have source/target as objects\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => edge.source.id === currentNode ? edge.target.id : edge.source.id);\n      neighbors.forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push(neighbor);\n        }\n      });\n      setTimeout(() => bfsTraversal(currentNode), 500); // Delay for visualization\n    };\n    bfsTraversal(); // Start the BFS traversal\n  };\n  const handleDFS = () => {\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\n    const visited = new Set();\n    const dfsTraversal = (currentNode, prevNode = null) => {\n      if (visited.has(currentNode)) return;\n      visited.add(currentNode);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n\n      // Remove highlight for the previously processed node\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n\n      // Highlight the current node\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n\n      // Find neighbors\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => edge.source.id === currentNode ? edge.target.id : edge.source.id);\n\n      // Delay for visualization and recursively explore neighbors\n      setTimeout(() => {\n        neighbors.forEach(neighbor => {\n          if (!visited.has(neighbor)) {\n            dfsTraversal(neighbor, currentNode);\n          }\n        });\n\n        // After exploring all neighbors, remove highlight from the current node\n        if (!neighbors.length && prevNode !== null) {\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\n        }\n      }, 500);\n    };\n    dfsTraversal(startNode); // Start DFS traversal\n  };\n  const handleTopoSort = () => {\n    // Step 1: Calculate in-degrees for each node\n    const inDegree = {};\n    nodes.forEach(node => {\n      inDegree[node.id] = 0;\n    });\n    edges.forEach(edge => {\n      inDegree[edge.target.id] = (inDegree[edge.target.id] || 0) + 1;\n    });\n\n    // Step 2: Initialize the queue with nodes having in-degree of 0\n    const queue = [];\n    nodes.forEach(node => {\n      if (inDegree[node.id] === 0) {\n        queue.push(node.id);\n      }\n    });\n    let topologicalOrder = [];\n    let visitedCount = 0;\n\n    // Step 3: Process nodes in the queue\n    while (queue.length > 0) {\n      const currentNode = queue.shift(); // Dequeue node\n\n      topologicalOrder.push(currentNode); // Add it to topological order\n      visitedCount++;\n\n      // Find all neighbors (edges) of the current node and decrease their in-degree\n      edges.forEach(edge => {\n        if (edge.source.id === currentNode) {\n          const neighbor = edge.target.id;\n          inDegree[neighbor]--;\n\n          // If in-degree of neighbor becomes 0, add it to the queue\n          if (inDegree[neighbor] === 0) {\n            queue.push(neighbor);\n          }\n        }\n      });\n    }\n\n    // Step 4: Check if there was a cycle (graph is not a DAG)\n    if (visitedCount !== nodes.length) {\n      setError(\"The graph is not a Directed Acyclic Graph (DAG). Topological Sort not possible.\");\n      return;\n    }\n\n    // Step 5: Display the topological order\n    setError(\"\"); // Clear previous errors\n    setTopoSortResult(topologicalOrder.join(\" → \"));\n  };\n  const findShortestPath = (startNode, endNode) => {\n    if (!startNode || !endNode) {\n      setError(\"Please provide both start and end nodes.\");\n      return;\n    }\n    const graph = new Map();\n\n    // Build adjacency list with weights\n    edges.forEach(({\n      source,\n      target,\n      weight\n    }) => {\n      if (!graph.has(source)) graph.set(source, []);\n      graph.get(source).push({\n        node: target,\n        weight\n      });\n      if (!isDirected) {\n        if (!graph.has(target)) graph.set(target, []);\n        graph.get(target).push({\n          node: source,\n          weight\n        });\n      }\n    });\n\n    // Dijkstra's Algorithm\n    const distances = {};\n    const previousNodes = {};\n    const pq = new Set(nodes.map(node => node.id));\n    nodes.forEach(({\n      id\n    }) => {\n      distances[id] = id === startNode ? 0 : Infinity;\n      previousNodes[id] = null;\n    });\n    while (pq.size) {\n      const current = [...pq].reduce((a, b) => distances[a] < distances[b] ? a : b);\n      pq.delete(current);\n      if (current === endNode) break;\n      const neighbors = graph.get(current) || [];\n      neighbors.forEach(({\n        node: neighbor,\n        weight\n      }) => {\n        const alt = distances[current] + weight;\n        if (alt < distances[neighbor]) {\n          distances[neighbor] = alt;\n          previousNodes[neighbor] = current;\n        }\n      });\n    }\n\n    // Reconstruct the shortest path\n    let path = [];\n    let currentNode = endNode;\n    while (currentNode) {\n      path.unshift(currentNode);\n      currentNode = previousNodes[currentNode];\n    }\n    if (path[0] !== startNode) {\n      setError(`No path exists between ${startNode} and ${endNode}.`);\n      setShortestPathResult(\"\");\n    } else {\n      setError(\"\");\n      setShortestPathResult(path.join(\" → \"));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(true);\n          validateInput(input);\n        },\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${!isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(false);\n          validateInput(input);\n        },\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-download-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: `Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`,\n        onChange: handleInputChange,\n        className: \"input-container\",\n        value: input,\n        rows: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"download-button\",\n          onClick: downloadGraph,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: db,\n            alt: \"Download\",\n            className: \"download-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"download-txt\",\n          children: \"Download Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphdislpay-button-wraper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"operation-button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleBFS,\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleDFS,\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleTopoSort,\n          children: \"Topo Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Start Node\",\n          onChange: e => setShortestPathInput({\n            ...shortestPathInput,\n            startNode: e.target.value\n          }),\n          style: {\n            marginLeft: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"End Node\",\n          onChange: e => setShortestPathInput({\n            ...shortestPathInput,\n            endNode: e.target.value\n          }),\n          style: {\n            marginLeft: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: findShortestPath,\n          children: \"Shortest Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          children: \"MST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          children: \"Kruskal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-display\",\n        ref: graphContainerRef,\n        style: {\n          alignItems: \"flex-end\",\n          overflow: \"auto\",\n          maxWidth: \"63%\",\n          height: \"400px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          ref: svgRef,\n          width: \"1000\",\n          height: \"400\",\n          style: {\n            border: \"1px solid black\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }, this), topoSortResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"operation-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Topological Sort:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: topoSortResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 5\n    }, this), shortestPathResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"operation-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Shortest Path:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: shortestPathResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 438,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"pjWU51wfZ08pAm10pkcwopWj1UU=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","Set","topoSortResult","setTopoSortResult","shortestPathResult","setShortestPathResult","shortestPathInput","setShortestPathInput","startNode","endNode","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","uniqueEdges","filter","edge","index","self","findIndex","message","downloadGraph","current","then","dataUrl","link","document","createElement","download","href","click","catch","err","console","svg","select","selectAll","remove","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","forceX","forceY","on","ticked","constrainBounds","x","Math","max","min","y","append","attr","data","enter","call","drag","dragStarted","dragged","dragEnded","label","text","edgeLabels","style","each","event","active","alphaTarget","restart","fx","fy","stop","handleBFS","queue","visited","add","bfsTraversal","prevNode","classed","currentNode","shift","prevQueueState","prevVisitedNodes","neighbors","map","neighbor","has","setTimeout","handleDFS","dfsTraversal","handleTopoSort","inDegree","topologicalOrder","visitedCount","join","findShortestPath","graph","Map","set","get","distances","previousNodes","pq","Infinity","size","reduce","a","b","delete","alt","path","unshift","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","rows","src","type","marginLeft","ref","alignItems","overflow","maxWidth","border","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\r\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\r\n  const [topoSortResult, setTopoSortResult] = useState(\"\");\r\n  const [shortestPathResult, setShortestPathResult] = useState(\"\");\r\n  const [shortestPathInput, setShortestPathInput] = useState({\r\n    startNode: \"\",\r\n    endNode: \"\",\r\n  });\r\n\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef(); // Ref for the graph container\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n  \r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\r\n        }\r\n  \r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n  \r\n        // Handle optional weight\r\n        const edgeWeight = weight ? parseInt(weight) : null;  // Set to null if no weight provided\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n  \r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n  \r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (e) =>\r\n              (e.source === edge.source && e.target === edge.target) ||\r\n              (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n  \r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  \r\n\r\n  const downloadGraph = () => {\r\n    if (graphContainerRef.current) {\r\n      toPng(graphContainerRef.current)\r\n        .then((dataUrl) => {\r\n          const link = document.createElement(\"a\");\r\n          link.download = \"graph_visualization.png\";\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to download graph as PNG:\", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n    const width = 700;\r\n    const height = 350;\r\n\r\n    const simulation = d3\r\n    .forceSimulation(nodes)\r\n    .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(140)) // Increase edge distance here (was 100)\r\n    .force(\"charge\", d3.forceManyBody().strength(-300))\r\n    .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n    .force(\"x\", d3.forceX(width / 2).strength(0.1))\r\n    .force(\"y\", d3.forceY(height / 2).strength(0.1))\r\n    .on(\"tick\", ticked);\r\n  \r\n\r\n    function constrainBounds(d) {\r\n      d.x = Math.max(20, Math.min(width - 20, d.x));\r\n      d.y = Math.max(20, Math.min(height - 20, d.y));\r\n    }\r\n\r\n    svg\r\n      .append(\"defs\")\r\n      .append(\"marker\")\r\n      .attr(\"id\", \"arrowhead\")\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 25)\r\n      .attr(\"refY\", 0)\r\n      .attr(\"orient\", \"auto\")\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#42a5f5\");\r\n\r\n    const link = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"links\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n\r\n      const node = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"nodes\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 20)\r\n      .attr(\"fill\", \"#4CAF50\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"class\", (d) => `node node-${d.id}`) // Add unique class for each node\r\n      .call(\r\n        d3\r\n          .drag()\r\n          .on(\"start\", dragStarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragEnded)\r\n      );\r\n    \r\n\r\n    const label = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"labels\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d.id)\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \".35em\")\r\n      .attr(\"fill\", \"white\");\r\n\r\n      const edgeLabels = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"edge-labels\")\r\n      .selectAll(\"text\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => (d.weight !== null ? d.weight : \"\")) // Display weight only if it's not null\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"-10px\")\r\n      .attr(\"fill\", \"black\")  // Ensure this is explicitly set\r\n      .style(\"fill\", \"black\"); // Explicitly set fill using style for stronger application\r\n    \r\n\r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      node.each(constrainBounds).attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n      edgeLabels\r\n        .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n        .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n    }\r\n\r\n    function dragStarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n\r\n    function dragEnded(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n\r\n    return () => simulation.stop();\r\n  }, [nodes, edges, isDirected]);\r\n\r\n  const handleBFS = () => {\r\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\r\n    const queue = [startNode];\r\n    const visited = new Set();\r\n    visited.add(startNode);\r\n  \r\n    const bfsTraversal = (prevNode = null) => {\r\n      if (queue.length === 0) {\r\n        // Remove highlight for the last processed node\r\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n        return;\r\n      }\r\n  \r\n      const currentNode = queue.shift(); // Dequeue node\r\n      setQueueState((prevQueueState) => [...prevQueueState, currentNode]);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n  \r\n      // Remove highlight for the previously processed node\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n  \r\n      // Highlight the current node\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n  \r\n      // Find neighbors by comparing ids, as edges have source/target as objects\r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n  \r\n      neighbors.forEach((neighbor) => {\r\n        if (!visited.has(neighbor)) {\r\n          visited.add(neighbor);\r\n          queue.push(neighbor);\r\n        }\r\n      });\r\n  \r\n      setTimeout(() => bfsTraversal(currentNode), 500); // Delay for visualization\r\n    };\r\n  \r\n    bfsTraversal(); // Start the BFS traversal\r\n  };\r\n  const handleDFS = () => {\r\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\r\n    const visited = new Set();\r\n  \r\n    const dfsTraversal = (currentNode, prevNode = null) => {\r\n      if (visited.has(currentNode)) return;\r\n  \r\n      visited.add(currentNode);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n  \r\n      // Remove highlight for the previously processed node\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n  \r\n      // Highlight the current node\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n  \r\n      // Find neighbors\r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n  \r\n      // Delay for visualization and recursively explore neighbors\r\n      setTimeout(() => {\r\n        neighbors.forEach((neighbor) => {\r\n          if (!visited.has(neighbor)) {\r\n            dfsTraversal(neighbor, currentNode);\r\n          }\r\n        });\r\n  \r\n        // After exploring all neighbors, remove highlight from the current node\r\n        if (!neighbors.length && prevNode !== null) {\r\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\r\n        }\r\n      }, 500);\r\n    };\r\n  \r\n    dfsTraversal(startNode); // Start DFS traversal\r\n  };\r\n  const handleTopoSort = () => {\r\n    // Step 1: Calculate in-degrees for each node\r\n    const inDegree = {};\r\n    nodes.forEach(node => {\r\n      inDegree[node.id] = 0;\r\n    });\r\n  \r\n    edges.forEach(edge => {\r\n      inDegree[edge.target.id] = (inDegree[edge.target.id] || 0) + 1;\r\n    });\r\n  \r\n    // Step 2: Initialize the queue with nodes having in-degree of 0\r\n    const queue = [];\r\n    nodes.forEach(node => {\r\n      if (inDegree[node.id] === 0) {\r\n        queue.push(node.id);\r\n      }\r\n    });\r\n  \r\n    let topologicalOrder = [];\r\n    let visitedCount = 0;\r\n  \r\n    // Step 3: Process nodes in the queue\r\n    while (queue.length > 0) {\r\n      const currentNode = queue.shift(); // Dequeue node\r\n  \r\n      topologicalOrder.push(currentNode); // Add it to topological order\r\n      visitedCount++;\r\n  \r\n      // Find all neighbors (edges) of the current node and decrease their in-degree\r\n      edges.forEach(edge => {\r\n        if (edge.source.id === currentNode) {\r\n          const neighbor = edge.target.id;\r\n          inDegree[neighbor]--;\r\n  \r\n          // If in-degree of neighbor becomes 0, add it to the queue\r\n          if (inDegree[neighbor] === 0) {\r\n            queue.push(neighbor);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  \r\n    // Step 4: Check if there was a cycle (graph is not a DAG)\r\n    if (visitedCount !== nodes.length) {\r\n      setError(\"The graph is not a Directed Acyclic Graph (DAG). Topological Sort not possible.\");\r\n      return;\r\n    }\r\n  \r\n    // Step 5: Display the topological order\r\n    setError(\"\"); // Clear previous errors\r\n    setTopoSortResult(topologicalOrder.join(\" → \"));\r\n  };\r\n  \r\n  const findShortestPath = (startNode, endNode) => {\r\n    if (!startNode || !endNode) {\r\n      setError(\"Please provide both start and end nodes.\");\r\n      return;\r\n    }\r\n  \r\n    const graph = new Map();\r\n  \r\n    // Build adjacency list with weights\r\n    edges.forEach(({ source, target, weight }) => {\r\n      if (!graph.has(source)) graph.set(source, []);\r\n      graph.get(source).push({ node: target, weight });\r\n      if (!isDirected) {\r\n        if (!graph.has(target)) graph.set(target, []);\r\n        graph.get(target).push({ node: source, weight });\r\n      }\r\n    });\r\n  \r\n    // Dijkstra's Algorithm\r\n    const distances = {};\r\n    const previousNodes = {};\r\n    const pq = new Set(nodes.map((node) => node.id));\r\n  \r\n    nodes.forEach(({ id }) => {\r\n      distances[id] = id === startNode ? 0 : Infinity;\r\n      previousNodes[id] = null;\r\n    });\r\n  \r\n    while (pq.size) {\r\n      const current = [...pq].reduce((a, b) =>\r\n        distances[a] < distances[b] ? a : b\r\n      );\r\n  \r\n      pq.delete(current);\r\n  \r\n      if (current === endNode) break;\r\n  \r\n      const neighbors = graph.get(current) || [];\r\n      neighbors.forEach(({ node: neighbor, weight }) => {\r\n        const alt = distances[current] + weight;\r\n        if (alt < distances[neighbor]) {\r\n          distances[neighbor] = alt;\r\n          previousNodes[neighbor] = current;\r\n        }\r\n      });\r\n    }\r\n  \r\n    // Reconstruct the shortest path\r\n    let path = [];\r\n    let currentNode = endNode;\r\n    while (currentNode) {\r\n      path.unshift(currentNode);\r\n      currentNode = previousNodes[currentNode];\r\n    }\r\n  \r\n    if (path[0] !== startNode) {\r\n      setError(`No path exists between ${startNode} and ${endNode}.`);\r\n      setShortestPathResult(\"\");\r\n    } else {\r\n      setError(\"\");\r\n      setShortestPathResult(path.join(\" → \"));\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n\r\n      <div className=\"button-container\">\r\n        <button\r\n          className={`toggle-button ${isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(true);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Directed\r\n        </button>\r\n        <button\r\n          className={`toggle-button ${!isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(false);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Undirected\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          placeholder={`Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`}\r\n          onChange={handleInputChange}\r\n          className=\"input-container\"\r\n          value={input}\r\n          rows=\"5\"\r\n        ></textarea>\r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={downloadGraph}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-txt\">Download Graph</p>\r\n        </div>\r\n      </div>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      <div className=\"graphdislpay-button-wraper\">\r\n  <div className=\"operation-button-container\">\r\n    <button className=\"operation_button\" onClick={handleBFS}>BFS</button>\r\n    <button className=\"operation_button\" onClick={handleDFS}>DFS</button>\r\n    <button className=\"operation_button\" onClick={handleTopoSort}>Topo Sort</button>\r\n    <input\r\n  type=\"text\"\r\n  placeholder=\"Start Node\"\r\n  onChange={(e) =>\r\n    setShortestPathInput({ ...shortestPathInput, startNode: e.target.value })\r\n  }\r\n  style={{ marginLeft: \"10px\" }}\r\n/>\r\n<input\r\n  type=\"text\"\r\n  placeholder=\"End Node\"\r\n  onChange={(e) =>\r\n    setShortestPathInput({ ...shortestPathInput, endNode: e.target.value })\r\n  }\r\n  style={{ marginLeft: \"10px\" }}\r\n/>\r\n    \r\n<button className=\"operation_button\" onClick={findShortestPath}>\r\n  Shortest Path\r\n</button>\r\n\r\n          \r\n    <button className=\"operation_button\">MST</button>\r\n    <button className=\"operation_button\">Kruskal</button>\r\n  </div>\r\n\r\n  <div\r\n    className=\"graph-display\"\r\n    ref={graphContainerRef}\r\n    style={{ alignItems: \"flex-end\", overflow: \"auto\", maxWidth: \"63%\", height: \"400px\" }}\r\n  >\r\n    <svg ref={svgRef} width=\"1000\" height=\"400\" style={{ border: \"1px solid black\" }}></svg>\r\n  </div>\r\n</div>\r\n{topoSortResult && (\r\n    <div className=\"operation-result\">\r\n      <h3>Topological Sort:</h3>\r\n      <p>{topoSortResult}</p>\r\n    </div>\r\n  )}\r\n   {shortestPathResult && (\r\n        <div className=\"operation-result\">\r\n          <h3>Shortest Path:</h3>\r\n          <p>{shortestPathResult}</p>\r\n        </div>\r\n      )}\r\n\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}