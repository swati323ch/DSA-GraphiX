{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [input, setInput] = useState(\"1 2\\n2 3\\n2 4\\n3 5\\n4 6\"); // Default input\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [startNode, setStartNode] = useState(\"\");\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\n  const [bfsQueue, setBfsQueue] = useState([]);\n  const svgRef = useRef();\n\n  // Parse the input graph\n  const validateInput = () => {\n    const lines = input.trim().split(\"\\n\");\n    const nodeSet = new Set();\n    const parsedEdges = [];\n    try {\n      lines.forEach(line => {\n        const [from, to] = line.trim().split(\" \").map(Number);\n        if (isNaN(from) || isNaN(to)) {\n          throw new Error(\"Invalid input. Each line must contain two integers.\");\n        }\n        nodeSet.add(from);\n        nodeSet.add(to);\n        parsedEdges.push({\n          source: from,\n          target: to\n        });\n      });\n      setNodes(Array.from(nodeSet).map(id => ({\n        id\n      })));\n      setEdges(parsedEdges);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  // BFS Traversal with queue visualization\n  const bfsTraversal = startNodeId => {\n    const startNode = +startNodeId;\n    if (!nodes.some(node => node.id === startNode)) {\n      alert(`Node ${startNode} does not exist.`);\n      return;\n    }\n    const visited = new Set();\n    const queue = [startNode];\n    const traversalOrder = [];\n    const visualQueue = [[...queue]];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (!visited.has(current)) {\n        traversalOrder.push(current);\n        visited.add(current);\n\n        // Add neighbors to the queue\n        edges.filter(edge => edge.source === current && !visited.has(edge.target)).forEach(edge => queue.push(edge.target));\n\n        // Update the visual queue with the current state of the queue\n        visualQueue.push([...queue]);\n      }\n    }\n    animateTraversal(traversalOrder, visualQueue);\n  };\n\n  // Animate traversal and queue visualization\n  const animateTraversal = (traversalOrder, visualQueue) => {\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < traversalOrder.length) {\n        setHighlightedNodes([traversalOrder[index]]);\n        setBfsQueue(visualQueue[index]); // Update BFS queue at each step\n        index++;\n      } else {\n        clearInterval(interval);\n        setHighlightedNodes([]);\n        setBfsQueue([]);\n      }\n    }, 1000);\n  };\n\n  // Render graph using D3\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 700;\n    const height = 400;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(100)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).on(\"tick\", () => {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y - 15);\n    });\n\n    // Add edges\n    const link = svg.append(\"g\").selectAll(\".link\").data(edges).enter().append(\"line\").attr(\"class\", \"link\").attr(\"stroke\", \"#aaa\").attr(\"stroke-width\", 2);\n\n    // Add nodes\n    const node = svg.append(\"g\").selectAll(\".node\").data(nodes).enter().append(\"circle\").attr(\"class\", \"node\").attr(\"r\", 15).attr(\"fill\", d => highlightedNodes.includes(d.id) ? \"#ff5722\" : \"#4CAF50\").call(d3.drag().on(\"start\", (event, d) => {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = event.x;\n      d.fy = event.y;\n    }).on(\"drag\", (event, d) => {\n      d.fx = event.x;\n      d.fy = event.y;\n    }).on(\"end\", (event, d) => {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }));\n\n    // Add labels\n    const label = svg.append(\"g\").selectAll(\".label\").data(nodes).enter().append(\"text\").attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"fill\", \"#000\").text(d => d.id);\n    return () => {\n      simulation.stop();\n    };\n  }, [nodes, edges, highlightedNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter edges (e.g., 1 2\\\\n2 3)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: validateInput,\n      children: \"Visualize Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: startNode,\n      onChange: e => setStartNode(e.target.value),\n      placeholder: \"Enter start node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => bfsTraversal(startNode),\n      children: \"BFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: 700,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"BFS Queue:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: bfsQueue.map((queue, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: queue.map((nodeId, nodeIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginRight: \"10px\",\n              color: highlightedNodes.includes(nodeId) ? \"red\" : \"black\"\n            },\n            children: nodeId\n          }, nodeIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 17\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"HLzlT5f9+u86CG3Qk4dN+7us99s=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","jsxDEV","_jsxDEV","GraphVisualization","_s","input","setInput","nodes","setNodes","edges","setEdges","startNode","setStartNode","highlightedNodes","setHighlightedNodes","bfsQueue","setBfsQueue","svgRef","validateInput","lines","trim","split","nodeSet","Set","parsedEdges","forEach","line","from","to","map","Number","isNaN","Error","add","push","source","target","Array","id","error","alert","message","bfsTraversal","startNodeId","some","node","visited","queue","traversalOrder","visualQueue","length","current","shift","has","filter","edge","animateTraversal","index","interval","setInterval","clearInterval","svg","select","selectAll","remove","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","on","link","attr","x","y","label","append","data","enter","includes","call","drag","event","active","alphaTarget","restart","fx","fy","text","stop","children","value","onChange","e","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","ref","nodeId","nodeIndex","style","marginRight","color","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [input, setInput] = useState(\"1 2\\n2 3\\n2 4\\n3 5\\n4 6\"); // Default input\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [startNode, setStartNode] = useState(\"\");\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n  const [bfsQueue, setBfsQueue] = useState([]);\r\n  const svgRef = useRef();\r\n\r\n  // Parse the input graph\r\n  const validateInput = () => {\r\n    const lines = input.trim().split(\"\\n\");\r\n    const nodeSet = new Set();\r\n    const parsedEdges = [];\r\n\r\n    try {\r\n      lines.forEach((line) => {\r\n        const [from, to] = line.trim().split(\" \").map(Number);\r\n        if (isNaN(from) || isNaN(to)) {\r\n          throw new Error(\"Invalid input. Each line must contain two integers.\");\r\n        }\r\n        nodeSet.add(from);\r\n        nodeSet.add(to);\r\n        parsedEdges.push({ source: from, target: to });\r\n      });\r\n\r\n      setNodes(Array.from(nodeSet).map((id) => ({ id })));\r\n      setEdges(parsedEdges);\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  // BFS Traversal with queue visualization\r\n  const bfsTraversal = (startNodeId) => {\r\n    const startNode = +startNodeId;\r\n\r\n    if (!nodes.some((node) => node.id === startNode)) {\r\n      alert(`Node ${startNode} does not exist.`);\r\n      return;\r\n    }\r\n\r\n    const visited = new Set();\r\n    const queue = [startNode];\r\n    const traversalOrder = [];\r\n    const visualQueue = [[...queue]];\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      if (!visited.has(current)) {\r\n        traversalOrder.push(current);\r\n        visited.add(current);\r\n\r\n        // Add neighbors to the queue\r\n        edges\r\n          .filter((edge) => edge.source === current && !visited.has(edge.target))\r\n          .forEach((edge) => queue.push(edge.target));\r\n\r\n        // Update the visual queue with the current state of the queue\r\n        visualQueue.push([...queue]);\r\n      }\r\n    }\r\n\r\n    animateTraversal(traversalOrder, visualQueue);\r\n  };\r\n\r\n  // Animate traversal and queue visualization\r\n  const animateTraversal = (traversalOrder, visualQueue) => {\r\n    let index = 0;\r\n\r\n    const interval = setInterval(() => {\r\n      if (index < traversalOrder.length) {\r\n        setHighlightedNodes([traversalOrder[index]]);\r\n        setBfsQueue(visualQueue[index]); // Update BFS queue at each step\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setHighlightedNodes([]);\r\n        setBfsQueue([]);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  // Render graph using D3\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    const width = 700;\r\n    const height = 400;\r\n\r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(100))\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .on(\"tick\", () => {\r\n        link.attr(\"x1\", (d) => d.source.x)\r\n          .attr(\"y1\", (d) => d.source.y)\r\n          .attr(\"x2\", (d) => d.target.x)\r\n          .attr(\"y2\", (d) => d.target.y);\r\n\r\n        node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n        label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y - 15);\r\n      });\r\n\r\n    // Add edges\r\n    const link = svg\r\n      .append(\"g\")\r\n      .selectAll(\".link\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"link\")\r\n      .attr(\"stroke\", \"#aaa\")\r\n      .attr(\"stroke-width\", 2);\r\n\r\n    // Add nodes\r\n    const node = svg\r\n      .append(\"g\")\r\n      .selectAll(\".node\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"class\", \"node\")\r\n      .attr(\"r\", 15)\r\n      .attr(\"fill\", (d) =>\r\n        highlightedNodes.includes(d.id) ? \"#ff5722\" : \"#4CAF50\"\r\n      )\r\n      .call(\r\n        d3.drag()\r\n          .on(\"start\", (event, d) => {\r\n            if (!event.active) simulation.alphaTarget(0.3).restart();\r\n            d.fx = event.x;\r\n            d.fy = event.y;\r\n          })\r\n          .on(\"drag\", (event, d) => {\r\n            d.fx = event.x;\r\n            d.fy = event.y;\r\n          })\r\n          .on(\"end\", (event, d) => {\r\n            if (!event.active) simulation.alphaTarget(0);\r\n            d.fx = null;\r\n            d.fy = null;\r\n          })\r\n      );\r\n\r\n    // Add labels\r\n    const label = svg\r\n      .append(\"g\")\r\n      .selectAll(\".label\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"class\", \"label\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"#000\")\r\n      .text((d) => d.id);\r\n\r\n    return () => {\r\n      simulation.stop();\r\n    };\r\n  }, [nodes, edges, highlightedNodes]);\r\n\r\n  return (\r\n    <div>\r\n      <textarea\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter edges (e.g., 1 2\\n2 3)\"\r\n      ></textarea>\r\n      <button onClick={validateInput}>Visualize Graph</button>\r\n      <input\r\n        type=\"text\"\r\n        value={startNode}\r\n        onChange={(e) => setStartNode(e.target.value)}\r\n        placeholder=\"Enter start node\"\r\n      />\r\n      <button onClick={() => bfsTraversal(startNode)}>BFS</button>\r\n      <svg ref={svgRef} width={700} height={400}></svg>\r\n      <div>\r\n        <h3>BFS Queue:</h3>\r\n        <div>\r\n          {bfsQueue.map((queue, index) => (\r\n            <div key={index}>\r\n              {queue.map((nodeId, nodeIndex) => (\r\n                <span\r\n                  key={nodeIndex}\r\n                  style={{\r\n                    marginRight: \"10px\",\r\n                    color: highlightedNodes.includes(nodeId)\r\n                      ? \"red\"\r\n                      : \"black\",\r\n                  }}\r\n                >\r\n                  {nodeId}\r\n                </span>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}