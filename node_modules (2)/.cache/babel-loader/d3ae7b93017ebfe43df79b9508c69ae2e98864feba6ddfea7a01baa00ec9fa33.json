{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactFlow, { Controls, ReactFlowProvider } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualizer = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const parseInput = () => {\n    const lines = inputValue.trim().split(\"\\n\");\n    const newNodes = [];\n    const nodeIds = new Set(); // Keep track of node IDs for validation\n    const newEdges = [];\n    lines.forEach(line => {\n      const parts = line.split(\" \").map(item => item.trim());\n\n      // Handle nodes\n      if (parts.length === 1) {\n        const nodeId = parts[0];\n        if (!nodeIds.has(nodeId)) {\n          nodeIds.add(nodeId);\n          newNodes.push({\n            id: nodeId,\n            data: {\n              label: `Node ${nodeId}`\n            },\n            position: {\n              x: Math.random() * 400,\n              y: Math.random() * 400\n            }\n          });\n        }\n      }\n\n      // Handle edges\n      if (parts.length >= 2) {\n        const [source, target, weight] = parts;\n        if (nodeIds.has(source) && nodeIds.has(target)) {\n          newEdges.push({\n            id: `${source}-${target}`,\n            source,\n            target,\n            label: weight ? `Weight: ${weight}` : \"\",\n            animated: isDirected\n          });\n        } else {\n          console.warn(`Edge (${source} -> ${target}) refers to non-existent nodes.`);\n        }\n      }\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  const toggleGraphType = directed => {\n    setIsDirected(directed);\n    setEdges(prevEdges => prevEdges.map(edge => ({\n      ...edge,\n      animated: directed\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Enter graph input...\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        rows: \"6\",\n        cols: \"30\",\n        style: {\n          marginBottom: \"10px\",\n          display: \"block\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: parseInput,\n        style: {\n          marginRight: \"10px\"\n        },\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleGraphType(true),\n        style: {\n          marginRight: \"10px\"\n        },\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleGraphType(false),\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"400px\",\n          marginTop: \"20px\",\n          border: \"1px solid #ddd\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          fitView: true,\n          children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualizer, \"ZGc9Ig5T0DYDW+R/j/E0Nxff+tU=\");\n_c = GraphVisualizer;\nexport default GraphVisualizer;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualizer\");","map":{"version":3,"names":["React","useState","ReactFlow","Controls","ReactFlowProvider","jsxDEV","_jsxDEV","GraphVisualizer","_s","nodes","setNodes","edges","setEdges","inputValue","setInputValue","isDirected","setIsDirected","parseInput","lines","trim","split","newNodes","nodeIds","Set","newEdges","forEach","line","parts","map","item","length","nodeId","has","add","push","id","data","label","position","x","Math","random","y","source","target","weight","animated","console","warn","toggleGraphType","directed","prevEdges","edge","children","style","padding","placeholder","value","onChange","e","rows","cols","marginBottom","display","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginRight","width","height","marginTop","border","fitView","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactFlow, { Controls, ReactFlowProvider } from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\n\r\nconst GraphVisualizer = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n\r\n  const parseInput = () => {\r\n    const lines = inputValue.trim().split(\"\\n\");\r\n    const newNodes = [];\r\n    const nodeIds = new Set(); // Keep track of node IDs for validation\r\n    const newEdges = [];\r\n\r\n    lines.forEach((line) => {\r\n      const parts = line.split(\" \").map((item) => item.trim());\r\n\r\n      // Handle nodes\r\n      if (parts.length === 1) {\r\n        const nodeId = parts[0];\r\n        if (!nodeIds.has(nodeId)) {\r\n          nodeIds.add(nodeId);\r\n          newNodes.push({\r\n            id: nodeId,\r\n            data: { label: `Node ${nodeId}` },\r\n            position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n          });\r\n        }\r\n      }\r\n\r\n      // Handle edges\r\n      if (parts.length >= 2) {\r\n        const [source, target, weight] = parts;\r\n        if (nodeIds.has(source) && nodeIds.has(target)) {\r\n          newEdges.push({\r\n            id: `${source}-${target}`,\r\n            source,\r\n            target,\r\n            label: weight ? `Weight: ${weight}` : \"\",\r\n            animated: isDirected,\r\n          });\r\n        } else {\r\n          console.warn(`Edge (${source} -> ${target}) refers to non-existent nodes.`);\r\n        }\r\n      }\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  const toggleGraphType = (directed) => {\r\n    setIsDirected(directed);\r\n    setEdges((prevEdges) =>\r\n      prevEdges.map((edge) => ({\r\n        ...edge,\r\n        animated: directed,\r\n      }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ReactFlowProvider>\r\n      <div style={{ padding: \"20px\" }}>\r\n        <textarea\r\n          placeholder=\"Enter graph input...\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          rows=\"6\"\r\n          cols=\"30\"\r\n          style={{ marginBottom: \"10px\", display: \"block\" }}\r\n        />\r\n        <button onClick={parseInput} style={{ marginRight: \"10px\" }}>\r\n          Generate Graph\r\n        </button>\r\n        <button onClick={() => toggleGraphType(true)} style={{ marginRight: \"10px\" }}>\r\n          Directed\r\n        </button>\r\n        <button onClick={() => toggleGraphType(false)}>Undirected</button>\r\n        <div style={{ width: \"100%\", height: \"400px\", marginTop: \"20px\", border: \"1px solid #ddd\" }}>\r\n          <ReactFlow nodes={nodes} edges={edges} fitView>\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n      </div>\r\n    </ReactFlowProvider>\r\n  );\r\n};\r\n\r\nexport default GraphVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}