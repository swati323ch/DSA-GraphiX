{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\InsertionSort.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './InsertionSort.css'; // Make sure this is the correct path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InsertionSort() {\n  _s();\n  const [array, setArray] = useState([]);\n  const [isPaused, setIsPaused] = useState(false);\n  const [status, setStatus] = useState('');\n  const [i, setI] = useState(1);\n  const [j, setJ] = useState(0);\n  const [currentTimeouts, setCurrentTimeouts] = useState([]);\n  const [sortedArray, setSortedArray] = useState([]);\n\n  // Track the current key being sorted\n  const [key, setKey] = useState(null);\n\n  // Input value for array\n  const [inputValue, setInputValue] = useState('');\n\n  // Reset sorting state\n  const resetSortingState = () => {\n    setIsPaused(false);\n    currentTimeouts.forEach(timeout => clearTimeout(timeout)); // Clear all timeouts\n    setCurrentTimeouts([]);\n    setArray([]);\n    setSortedArray([]);\n    setI(1);\n    setJ(0);\n    setKey(null);\n    setStatus('');\n  };\n  const togglePause = () => {\n    setIsPaused(prev => !prev);\n    if (isPaused) {\n      continueSorting();\n    } else {\n      currentTimeouts.forEach(timeout => clearTimeout(timeout));\n      setCurrentTimeouts([]);\n    }\n  };\n  const continueSorting = () => {\n    step();\n  };\n  const step = () => {\n    if (isPaused) return;\n    if (i >= array.length) {\n      setStatus('Sorting complete!');\n      setSortedArray([...array]); // Set the sorted array\n      return;\n    }\n    setKey(array[i]);\n    setJ(i - 1);\n    setStatus(`Sorting element ${array[i]}...`);\n\n    // Continue inner loop step\n    innerStep(array[i]);\n  };\n  const innerStep = key => {\n    if (isPaused) return;\n    if (j >= 0 && array[j] > key) {\n      const newArray = [...array];\n      newArray[j + 1] = array[j];\n      setArray(newArray);\n      setJ(j - 1);\n      setTimeout(() => innerStep(key), 1000); // Continue inner step after timeout\n    } else {\n      const newArray = [...array];\n      newArray[j + 1] = key;\n      setArray(newArray);\n      setStatus(`Inserted ${key} at position ${j + 1}`);\n      setI(i + 1);\n      setTimeout(step, 1000); // Continue to the next element after timeout\n    }\n  };\n  const startSorting = () => {\n    if (!inputValue) {\n      setStatus('Please enter an array to sort.');\n      return;\n    }\n    resetSortingState();\n    const parsedArray = inputValue.split(' ').map(Number);\n    setArray(parsedArray);\n    setI(1);\n    setStatus('');\n    step();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"insertion-sort-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Insertion Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        placeholder: \"Enter numbers separated by space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startSorting,\n        children: \"Start Sorting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePause,\n      children: isPaused ? 'Resume' : 'Pause'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"visualization\",\n      children: array.map((num, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `box ${num === key ? 'highlight' : ''} ${sortedArray.includes(num) ? 'sorted' : ''}`,\n        children: num\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(InsertionSort, \"j13CjbnqAzYeNCaQQ52kIuMP1Qw=\");\n_c = InsertionSort;\nexport default InsertionSort;\nvar _c;\n$RefreshReg$(_c, \"InsertionSort\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","InsertionSort","_s","array","setArray","isPaused","setIsPaused","status","setStatus","i","setI","j","setJ","currentTimeouts","setCurrentTimeouts","sortedArray","setSortedArray","key","setKey","inputValue","setInputValue","resetSortingState","forEach","timeout","clearTimeout","togglePause","prev","continueSorting","step","length","innerStep","newArray","setTimeout","startSorting","parsedArray","split","map","Number","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","id","num","idx","includes","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/InsertionSort.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './InsertionSort.css'; // Make sure this is the correct path\r\n\r\nfunction InsertionSort() {\r\n  const [array, setArray] = useState([]);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [status, setStatus] = useState('');\r\n  const [i, setI] = useState(1);\r\n  const [j, setJ] = useState(0);\r\n  const [currentTimeouts, setCurrentTimeouts] = useState([]);\r\n  const [sortedArray, setSortedArray] = useState([]);\r\n  \r\n  // Track the current key being sorted\r\n  const [key, setKey] = useState(null);\r\n  \r\n  // Input value for array\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  // Reset sorting state\r\n  const resetSortingState = () => {\r\n    setIsPaused(false);\r\n    currentTimeouts.forEach(timeout => clearTimeout(timeout)); // Clear all timeouts\r\n    setCurrentTimeouts([]);\r\n    setArray([]);\r\n    setSortedArray([]);\r\n    setI(1);\r\n    setJ(0);\r\n    setKey(null);\r\n    setStatus('');\r\n  };\r\n\r\n  const togglePause = () => {\r\n    setIsPaused(prev => !prev);\r\n    if (isPaused) {\r\n      continueSorting();\r\n    } else {\r\n      currentTimeouts.forEach(timeout => clearTimeout(timeout));\r\n      setCurrentTimeouts([]);\r\n    }\r\n  };\r\n\r\n  const continueSorting = () => {\r\n    step();\r\n  };\r\n\r\n  const step = () => {\r\n    if (isPaused) return;\r\n\r\n    if (i >= array.length) {\r\n      setStatus('Sorting complete!');\r\n      setSortedArray([...array]); // Set the sorted array\r\n      return;\r\n    }\r\n\r\n    setKey(array[i]);\r\n    setJ(i - 1);\r\n    setStatus(`Sorting element ${array[i]}...`);\r\n\r\n    // Continue inner loop step\r\n    innerStep(array[i]);\r\n  };\r\n\r\n  const innerStep = (key) => {\r\n    if (isPaused) return;\r\n\r\n    if (j >= 0 && array[j] > key) {\r\n        const newArray = [...array];\r\n        newArray[j + 1] = array[j];\r\n        setArray(newArray);\r\n        setJ(j - 1);\r\n        setTimeout(() => innerStep(key), 1000); // Continue inner step after timeout\r\n    } else {\r\n        const newArray = [...array];\r\n        newArray[j + 1] = key;\r\n        setArray(newArray);\r\n        setStatus(`Inserted ${key} at position ${j + 1}`);\r\n        setI(i + 1);\r\n        setTimeout(step, 1000); // Continue to the next element after timeout\r\n    }\r\n};\r\n\r\n  const startSorting = () => {\r\n    if (!inputValue) {\r\n      setStatus('Please enter an array to sort.');\r\n      return;\r\n    }\r\n    resetSortingState();\r\n    const parsedArray = inputValue.split(' ').map(Number);\r\n    setArray(parsedArray);\r\n    setI(1);\r\n    setStatus('');\r\n    step();\r\n  };\r\n\r\n  return (\r\n    <div className=\"insertion-sort-container\">\r\n      <h1>Insertion Sort</h1>\r\n      \r\n      {/* Input field to enter array */}\r\n      <div>\r\n        <input \r\n          type=\"text\" \r\n          value={inputValue} \r\n          onChange={(e) => setInputValue(e.target.value)} \r\n          placeholder=\"Enter numbers separated by space\"\r\n        />\r\n        <button onClick={startSorting}>Start Sorting</button>\r\n      </div>\r\n      \r\n      <button onClick={togglePause}>{isPaused ? 'Resume' : 'Pause'}</button>\r\n\r\n      {/* Visualization */}\r\n      <div id=\"visualization\">\r\n        {array.map((num, idx) => (\r\n          <div\r\n            key={idx}\r\n            className={`box ${num === key ? 'highlight' : ''} ${sortedArray.includes(num) ? 'sorted' : ''}`}\r\n          >\r\n            {num}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div id=\"status\">{status}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InsertionSort;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}