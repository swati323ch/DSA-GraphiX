{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport db from \"./assets/Download_button.png\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\n  const [treeData, setTreeData] = useState(null);\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\n  const [bfsQueue, setBfsQueue] = useState([]);\n  const [traversalResult, setTraversalResult] = useState({});\n  const [isAnimating, setIsAnimating] = useState(false);\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n  const traverseTree = (node, order) => {\n    const result = [];\n    const inorder = current => {\n      if (!current) return;\n      inorder(current.left);\n      result.push(current.value);\n      inorder(current.right);\n    };\n    const preorder = current => {\n      if (!current) return;\n      result.push(current.value);\n      preorder(current.left);\n      preorder(current.right);\n    };\n    const postorder = current => {\n      if (!current) return;\n      postorder(current.left);\n      postorder(current.right);\n      result.push(current.value);\n    };\n    if (order === \"inorder\") inorder(node);\n    if (order === \"preorder\") preorder(node);\n    if (order === \"postorder\") postorder(node);\n    return result;\n  };\n  const bfsTraversal = node => {\n    const queue = [node];\n    const traversal = [];\n    const visualQueue = [];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (current) {\n        traversal.push(current.value);\n        visualQueue.push([...queue.map(n => n.value), current.value]);\n        if (current.left) queue.push(current.left);\n        if (current.right) queue.push(current.right);\n      }\n    }\n    return {\n      traversal,\n      visualQueue\n    };\n  };\n  const animateTraversal = (traversal, visualQueue = null) => {\n    setIsAnimating(true);\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < traversal.length) {\n        setHighlightedNodes([traversal[index]]);\n        if (visualQueue) setBfsQueue(visualQueue[index]);\n        index++;\n      } else {\n        clearInterval(interval);\n        setIsAnimating(false);\n        setHighlightedNodes([]);\n        setBfsQueue([]);\n      }\n    }, 1500);\n  };\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n  const handleTraversal = type => {\n    if (!treeData || isAnimating) {\n      alert(isAnimating ? \"Animation is running. Please wait.\" : \"Visualize the tree first.\");\n      return;\n    }\n    if (type === \"bfs\") {\n      const {\n        traversal,\n        visualQueue\n      } = bfsTraversal(treeData);\n      animateTraversal(traversal, visualQueue);\n    } else {\n      const result = traverseTree(treeData, type);\n      setTraversalResult({\n        ...traversalResult,\n        [type]: result\n      });\n      animateTraversal(result);\n    }\n  };\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\n    if (!node) return null;\n    const horizontalSpacing = 3800 / Math.pow(2, level + 4);\n    const leftChildX = x - horizontalSpacing;\n    const rightChildX = x + horizontalSpacing;\n    const childY = y + 100;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY + 28,\n        x2: x,\n        y2: y,\n        stroke: \"black\",\n        strokeWidth: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"circle-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: \"25\",\n          className: highlightedNodes.includes(node.value) ? \"highlighted-circle\" : \"tree-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          textAnchor: \"middle\",\n          dy: \"5\",\n          fill: \"white\",\n          fontWeight: \"bold\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y), node.right && renderTree(node.right, rightChildX, childY, level + 1, x, y)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-download-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"input-box\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"download-button\",\n          onClick: handleDownload,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: db,\n            alt: \"Download\",\n            className: \"download-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"download-text\",\n          children: \"Download Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bfs-button\",\n        onClick: () => handleTraversal(\"bfs\"),\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: () => handleTraversal(\"inorder\"),\n        children: \"Inorder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: () => handleTraversal(\"preorder\"),\n        children: \"Preorder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: () => handleTraversal(\"postorder\"),\n        children: \"Postorder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), isAnimating && bfsQueue.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"queue-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"queue-title\",\n        children: [\"BFS Queue: \", bfsQueue.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), Object.keys(traversalResult).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"traversal-result-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [key.charAt(0).toUpperCase() + key.slice(1), \" Traversal: \", traversalResult[key].join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: \"0 0 1000 530\",\n        children: treeData && renderTree(treeData, 500, 50, 0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"BpdAP4THuZAWbJ15ukC6iUnTRRs=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","db","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","highlightedNodes","setHighlightedNodes","bfsQueue","setBfsQueue","traversalResult","setTraversalResult","isAnimating","setIsAnimating","buildTree","arr","length","nodes","map","value","left","right","i","j","traverseTree","node","order","result","inorder","current","push","preorder","postorder","bfsTraversal","queue","traversal","visualQueue","shift","n","animateTraversal","index","interval","setInterval","clearInterval","handleVisualize","parsedArray","JSON","parse","error","alert","handleTraversal","type","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","url","URL","createObjectURL","a","createElement","href","download","click","renderTree","x","y","level","parentX","parentY","horizontalSpacing","Math","pow","leftChildX","rightChildX","childY","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","cx","cy","r","includes","textAnchor","dy","fill","fontWeight","onChange","e","target","placeholder","onClick","src","alt","join","Object","keys","key","charAt","toUpperCase","slice","id","viewBox","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\nimport db from \"./assets/Download_button.png\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n  const [bfsQueue, setBfsQueue] = useState([]);\r\n  const [traversalResult, setTraversalResult] = useState({});\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n    const nodes = arr.map((value) =>\r\n      value !== null ? { value, left: null, right: null } : null\r\n    );\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n    return nodes[0];\r\n  };\r\n\r\n  const traverseTree = (node, order) => {\r\n    const result = [];\r\n\r\n    const inorder = (current) => {\r\n      if (!current) return;\r\n      inorder(current.left);\r\n      result.push(current.value);\r\n      inorder(current.right);\r\n    };\r\n\r\n    const preorder = (current) => {\r\n      if (!current) return;\r\n      result.push(current.value);\r\n      preorder(current.left);\r\n      preorder(current.right);\r\n    };\r\n\r\n    const postorder = (current) => {\r\n      if (!current) return;\r\n      postorder(current.left);\r\n      postorder(current.right);\r\n      result.push(current.value);\r\n    };\r\n\r\n    if (order === \"inorder\") inorder(node);\r\n    if (order === \"preorder\") preorder(node);\r\n    if (order === \"postorder\") postorder(node);\r\n\r\n    return result;\r\n  };\r\n\r\n  const bfsTraversal = (node) => {\r\n    const queue = [node];\r\n    const traversal = [];\r\n    const visualQueue = [];\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      if (current) {\r\n        traversal.push(current.value);\r\n        visualQueue.push([...queue.map((n) => n.value), current.value]);\r\n        if (current.left) queue.push(current.left);\r\n        if (current.right) queue.push(current.right);\r\n      }\r\n    }\r\n\r\n    return { traversal, visualQueue };\r\n  };\r\n\r\n  const animateTraversal = (traversal, visualQueue = null) => {\r\n    setIsAnimating(true);\r\n    let index = 0;\r\n\r\n    const interval = setInterval(() => {\r\n      if (index < traversal.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n        if (visualQueue) setBfsQueue(visualQueue[index]);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setIsAnimating(false);\r\n        setHighlightedNodes([]);\r\n        setBfsQueue([]);\r\n      }\r\n    }, 1500);\r\n  };\r\n\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  const handleTraversal = (type) => {\r\n    if (!treeData || isAnimating) {\r\n      alert(isAnimating ? \"Animation is running. Please wait.\" : \"Visualize the tree first.\");\r\n      return;\r\n    }\r\n\r\n    if (type === \"bfs\") {\r\n      const { traversal, visualQueue } = bfsTraversal(treeData);\r\n      animateTraversal(traversal, visualQueue);\r\n    } else {\r\n      const result = traverseTree(treeData, type);\r\n      setTraversalResult({ ...traversalResult, [type]: result });\r\n      animateTraversal(result);\r\n    }\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    const horizontalSpacing = 3800 / Math.pow(2, level + 4);\r\n    const leftChildX = x - horizontalSpacing;\r\n    const rightChildX = x + horizontalSpacing;\r\n    const childY = y + 100;\r\n\r\n    return (\r\n      <>\r\n        {parentX !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY + 28}\r\n            x2={x}\r\n            y2={y}\r\n            stroke=\"black\"\r\n            strokeWidth=\"3\"\r\n          />\r\n        )}\r\n        <g className=\"circle-group\">\r\n          <circle\r\n            cx={x}\r\n            cy={y}\r\n            r=\"25\"\r\n            className={\r\n              highlightedNodes.includes(node.value)\r\n                ? \"highlighted-circle\"\r\n                : \"tree-circle\"\r\n            }\r\n          />\r\n          <text\r\n            x={x}\r\n            y={y}\r\n            textAnchor=\"middle\"\r\n            dy=\"5\"\r\n            fill=\"white\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n        {node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y)}\r\n        {node.right &&\r\n          renderTree(node.right, rightChildX, childY, level + 1, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          className=\"input-box\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n        />\r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={handleDownload}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-text\">Download Tree</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"bfs-button\" onClick={() => handleTraversal(\"bfs\")}>\r\n          BFS\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={() => handleTraversal(\"inorder\")}>\r\n          Inorder\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={() => handleTraversal(\"preorder\")}>\r\n          Preorder\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={() => handleTraversal(\"postorder\")}>\r\n          Postorder\r\n        </button>\r\n      </div>\r\n\r\n      {isAnimating && bfsQueue.length > 0 && (\r\n        <div className=\"queue-container\">\r\n          <h3 className=\"queue-title\">\r\n            BFS Queue: {bfsQueue.join(\", \")}\r\n          </h3>\r\n        </div>\r\n      )}\r\n\r\n      {Object.keys(traversalResult).map((key) => (\r\n        <div key={key} className=\"traversal-result-container\">\r\n          <h3>{key.charAt(0).toUpperCase() + key.slice(1)} Traversal: {traversalResult[key].join(\", \")}</h3>\r\n        </div>\r\n      ))}\r\n\r\n      <div className=\"canvas-container\">\r\n        <svg id=\"treeCanvas\" className=\"tree-canvas\" viewBox=\"0 0 1000 530\">\r\n          {treeData && renderTree(treeData, 500, 50, 0)}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}