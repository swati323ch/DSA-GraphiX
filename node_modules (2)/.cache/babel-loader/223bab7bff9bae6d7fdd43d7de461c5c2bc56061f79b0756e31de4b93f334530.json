{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactFlow, { Controls, ReactFlowProvider } from \"reactflow\";\nimport \"GraphV.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [nodes, setNodes] = useState([{\n    id: \"1\",\n    data: {\n      label: \"Node 1\"\n    },\n    position: {\n      x: 100,\n      y: 100\n    }\n  }, {\n    id: \"2\",\n    data: {\n      label: \"Node 2\"\n    },\n    position: {\n      x: 300,\n      y: 100\n    }\n  }]);\n  const [edges, setEdges] = useState([{\n    id: \"e1-2\",\n    source: \"1\",\n    target: \"2\",\n    label: \"Edge 1-2\"\n  }]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const parseInput = () => {\n    const lines = inputValue.trim().split(\"\\n\");\n    const newNodes = [];\n    const newEdges = [];\n    lines.forEach(line => {\n      const parts = line.split(\" \").map(item => item.trim());\n      if (parts.length === 1) {\n        newNodes.push({\n          id: parts[0],\n          data: {\n            label: parts[0]\n          },\n          position: {\n            x: Math.random() * 400,\n            y: Math.random() * 400\n          }\n        });\n      } else if (parts.length >= 2) {\n        const source = parts[0];\n        const target = parts[1];\n        const weight = parts[2] ? ` (${parts[2]})` : \"\";\n        newEdges.push({\n          id: `${source}-${target}`,\n          source,\n          target,\n          label: weight,\n          animated: isDirected\n        });\n      }\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  const toggleGraphType = directed => {\n    setIsDirected(directed);\n    setEdges(prevEdges => prevEdges.map(edge => ({\n      ...edge,\n      animated: directed\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Enter graph input...\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        rows: \"6\",\n        cols: \"30\",\n        style: {\n          marginBottom: \"10px\",\n          display: \"block\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: parseInput,\n        children: \"Generate Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleGraphType(true),\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleGraphType(false),\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"400px\",\n          marginTop: \"20px\",\n          border: \"1px solid #ddd\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          fitView: true,\n          children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"DCXmD3zvNhsnDqEcj68D8hpvD+U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ReactFlow","Controls","ReactFlowProvider","jsxDEV","_jsxDEV","App","_s","nodes","setNodes","id","data","label","position","x","y","edges","setEdges","source","target","inputValue","setInputValue","isDirected","setIsDirected","parseInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","map","item","length","push","Math","random","weight","animated","toggleGraphType","directed","prevEdges","edge","children","style","padding","placeholder","value","onChange","e","rows","cols","marginBottom","display","fileName","_jsxFileName","lineNumber","columnNumber","onClick","width","height","marginTop","border","fitView","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactFlow, { Controls, ReactFlowProvider } from \"reactflow\";\r\nimport \"GraphV.css\";\r\n\r\nconst App = () => {\r\n  const [nodes, setNodes] = useState([\r\n    { id: \"1\", data: { label: \"Node 1\" }, position: { x: 100, y: 100 } },\r\n    { id: \"2\", data: { label: \"Node 2\" }, position: { x: 300, y: 100 } },\r\n  ]);\r\n  const [edges, setEdges] = useState([\r\n    { id: \"e1-2\", source: \"1\", target: \"2\", label: \"Edge 1-2\" },\r\n  ]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n\r\n  const parseInput = () => {\r\n    const lines = inputValue.trim().split(\"\\n\");\r\n    const newNodes = [];\r\n    const newEdges = [];\r\n    lines.forEach((line) => {\r\n      const parts = line.split(\" \").map((item) => item.trim());\r\n      if (parts.length === 1) {\r\n        newNodes.push({\r\n          id: parts[0],\r\n          data: { label: parts[0] },\r\n          position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n        });\r\n      } else if (parts.length >= 2) {\r\n        const source = parts[0];\r\n        const target = parts[1];\r\n        const weight = parts[2] ? ` (${parts[2]})` : \"\";\r\n        newEdges.push({\r\n          id: `${source}-${target}`,\r\n          source,\r\n          target,\r\n          label: weight,\r\n          animated: isDirected,\r\n        });\r\n      }\r\n    });\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  const toggleGraphType = (directed) => {\r\n    setIsDirected(directed);\r\n    setEdges((prevEdges) =>\r\n      prevEdges.map((edge) => ({\r\n        ...edge,\r\n        animated: directed,\r\n      }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ReactFlowProvider>\r\n      <div style={{ padding: \"20px\" }}>\r\n        <textarea\r\n          placeholder=\"Enter graph input...\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          rows=\"6\"\r\n          cols=\"30\"\r\n          style={{ marginBottom: \"10px\", display: \"block\" }}\r\n        />\r\n        <button onClick={parseInput}>Generate Graph</button>\r\n        <button onClick={() => toggleGraphType(true)}>Directed</button>\r\n        <button onClick={() => toggleGraphType(false)}>Undirected</button>\r\n        <div style={{ width: \"100%\", height: \"400px\", marginTop: \"20px\", border: \"1px solid #ddd\" }}>\r\n          <ReactFlow nodes={nodes} edges={edges} fitView>\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n      </div>\r\n    </ReactFlowProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}