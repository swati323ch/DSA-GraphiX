{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\n  const [bfsQueue, setBfsQueue] = useState([]);\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\n  const svgRef = useRef();\n  const graphContainerRef = useRef();\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n        const edgeWeight = weight ? parseInt(weight) : null;\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n      setNodes(newNodes);\n      setEdges(newEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const downloadGraph = () => {\n    if (graphContainerRef.current) {\n      toPng(graphContainerRef.current).then(dataUrl => {\n        const link = document.createElement(\"a\");\n        link.download = \"graph_visualization.png\";\n        link.href = dataUrl;\n        link.click();\n      }).catch(err => {\n        console.error(\"Failed to download graph as PNG:\", err);\n      });\n    }\n  };\n  const bfsTraversal = startNodeId => {\n    if (!startNodeId || isBfsRunning) return;\n    setIsBfsRunning(true);\n    const adjacencyList = new Map();\n    nodes.forEach(node => adjacencyList.set(node.id, []));\n    edges.forEach(edge => {\n      if (adjacencyList.has(edge.source)) {\n        adjacencyList.get(edge.source).push(edge.target);\n      }\n      if (!isDirected && adjacencyList.has(edge.target)) {\n        adjacencyList.get(edge.target).push(edge.source);\n      }\n    });\n    const visited = new Set();\n    const queue = [startNodeId];\n    const traversal = [];\n    const visualQueue = [];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (!visited.has(current)) {\n        visited.add(current);\n        traversal.push(current);\n        visualQueue.push([...queue, current]);\n        const neighbors = adjacencyList.get(current) || [];\n        neighbors.forEach(neighbor => {\n          if (!visited.has(neighbor)) {\n            queue.push(neighbor);\n          }\n        });\n      }\n    }\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < traversal.length) {\n        setHighlightedNodes([traversal[index]]);\n        setBfsQueue(visualQueue[index] || []);\n        index++;\n      } else {\n        clearInterval(interval);\n        setIsBfsRunning(false);\n        setHighlightedNodes([]);\n        setBfsQueue([]);\n      }\n    }, 1000);\n  };\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 700;\n    const height = 350;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(140)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).on(\"tick\", ticked);\n    svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 25).attr(\"refY\", 0).attr(\"orient\", \"auto\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#42a5f5\");\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2).attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", d => highlightedNodes.includes(d.id) ? \"#ff5722\" : \"#4CAF50\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2);\n    const label = svg.append(\"g\").attr(\"class\", \"labels\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \".35em\").attr(\"fill\", \"white\");\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n    }\n    return () => simulation.stop();\n  }, [nodes, edges, highlightedNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(true);\n          validateInput(input);\n        },\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${!isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(false);\n          validateInput(input);\n        },\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-download-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Enter edges (e.g., '1 2 3' for edge with weight 3) one per line\",\n        onChange: handleInputChange,\n        className: \"input-container\",\n        value: input,\n        rows: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"download-button\",\n          onClick: downloadGraph,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: db,\n            alt: \"Download\",\n            className: \"download-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"download-txt\",\n          children: \"Download Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"operation-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"operation_button\",\n        onClick: () => {\n          var _nodes$;\n          return bfsTraversal((_nodes$ = nodes[0]) === null || _nodes$ === void 0 ? void 0 : _nodes$.id);\n        },\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      ref: graphContainerRef,\n      style: {\n        overflow: \"auto\",\n        maxWidth: \"63%\",\n        height: \"400px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"1000\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bfs-queue-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"BFS Queue:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: bfsQueue.join(\" -> \")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"plmKunIsXujf+3PD0kaUcH1q/P4=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","highlightedNodes","setHighlightedNodes","bfsQueue","setBfsQueue","isBfsRunning","setIsBfsRunning","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","message","downloadGraph","current","then","dataUrl","link","document","createElement","download","href","click","catch","err","console","bfsTraversal","startNodeId","adjacencyList","Map","set","edge","has","get","visited","Set","queue","traversal","visualQueue","shift","add","neighbors","neighbor","index","interval","setInterval","clearInterval","svg","select","selectAll","remove","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","on","ticked","append","attr","data","enter","includes","label","text","x","y","stop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","rows","src","alt","_nodes$","ref","style","overflow","maxWidth","border","join","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n  const [bfsQueue, setBfsQueue] = useState([]);\r\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef();\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n\r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\r\n        }\r\n\r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n\r\n        const edgeWeight = weight ? parseInt(weight) : null;\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n\r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const downloadGraph = () => {\r\n    if (graphContainerRef.current) {\r\n      toPng(graphContainerRef.current)\r\n        .then((dataUrl) => {\r\n          const link = document.createElement(\"a\");\r\n          link.download = \"graph_visualization.png\";\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to download graph as PNG:\", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const bfsTraversal = (startNodeId) => {\r\n    if (!startNodeId || isBfsRunning) return;\r\n    setIsBfsRunning(true);\r\n\r\n    const adjacencyList = new Map();\r\n    nodes.forEach((node) => adjacencyList.set(node.id, []));\r\n    edges.forEach((edge) => {\r\n      if (adjacencyList.has(edge.source)) {\r\n        adjacencyList.get(edge.source).push(edge.target);\r\n      }\r\n      if (!isDirected && adjacencyList.has(edge.target)) {\r\n        adjacencyList.get(edge.target).push(edge.source);\r\n      }\r\n    });\r\n\r\n    const visited = new Set();\r\n    const queue = [startNodeId];\r\n    const traversal = [];\r\n    const visualQueue = [];\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      if (!visited.has(current)) {\r\n        visited.add(current);\r\n        traversal.push(current);\r\n        visualQueue.push([...queue, current]);\r\n\r\n        const neighbors = adjacencyList.get(current) || [];\r\n        neighbors.forEach((neighbor) => {\r\n          if (!visited.has(neighbor)) {\r\n            queue.push(neighbor);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < traversal.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n        setBfsQueue(visualQueue[index] || []);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setIsBfsRunning(false);\r\n        setHighlightedNodes([]);\r\n        setBfsQueue([]);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n    const width = 700;\r\n    const height = 350;\r\n\r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(140))\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .on(\"tick\", ticked);\r\n\r\n    svg\r\n      .append(\"defs\")\r\n      .append(\"marker\")\r\n      .attr(\"id\", \"arrowhead\")\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 25)\r\n      .attr(\"refY\", 0)\r\n      .attr(\"orient\", \"auto\")\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#42a5f5\");\r\n\r\n    const link = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"links\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n\r\n    const node = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"nodes\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 20)\r\n      .attr(\"fill\", (d) => (highlightedNodes.includes(d.id) ? \"#ff5722\" : \"#4CAF50\"))\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"stroke-width\", 2);\r\n\r\n    const label = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"labels\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d.id)\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \".35em\")\r\n      .attr(\"fill\", \"white\");\r\n\r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n    }\r\n\r\n    return () => simulation.stop();\r\n  }, [nodes, edges, highlightedNodes]);\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n\r\n      <div className=\"button-container\">\r\n        <button\r\n          className={`toggle-button ${isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(true);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Directed\r\n        </button>\r\n        <button\r\n          className={`toggle-button ${!isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(false);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Undirected\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          placeholder=\"Enter edges (e.g., '1 2 3' for edge with weight 3) one per line\"\r\n          onChange={handleInputChange}\r\n          className=\"input-container\"\r\n          value={input}\r\n          rows=\"5\"\r\n        ></textarea>\r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={downloadGraph}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-txt\">Download Graph</p>\r\n        </div>\r\n      </div>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      <div className=\"operation-button-container\">\r\n        <button className=\"operation_button\" onClick={() => bfsTraversal(nodes[0]?.id)}>\r\n          BFS\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className=\"graph-display\"\r\n        ref={graphContainerRef}\r\n        style={{ overflow: \"auto\", maxWidth: \"63%\", height: \"400px\" }}\r\n      >\r\n        <svg ref={svgRef} width=\"1000\" height=\"400\" style={{ border: \"1px solid black\" }}></svg>\r\n      </div>\r\n\r\n      <div className=\"bfs-queue-container\">\r\n        <h3>BFS Queue:</h3>\r\n        <div>{bfsQueue.join(\" -> \")}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}