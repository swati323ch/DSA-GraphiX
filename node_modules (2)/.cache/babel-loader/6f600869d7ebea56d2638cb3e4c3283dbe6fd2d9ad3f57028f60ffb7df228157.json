{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [queueState, setQueueState] = useState([]);\n  const [visitedNodes, setVisitedNodes] = useState(new Set());\n  const [startNode, setStartNode] = useState(\"\"); // Track the start node input\n\n  const svgRef = useRef();\n  const graphContainerRef = useRef();\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.source === edge.source && e.target === edge.target || e.source === edge.target && e.target === edge.source));\n      setNodes(newNodes);\n      setEdges(uniqueEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const downloadGraph = () => {\n    if (graphContainerRef.current) {\n      toPng(graphContainerRef.current).then(dataUrl => {\n        const link = document.createElement(\"a\");\n        link.download = \"graph_visualization.png\";\n        link.href = dataUrl;\n        link.click();\n      }).catch(err => {\n        console.error(\"Failed to download graph as PNG:\", err);\n      });\n    }\n  };\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 700;\n    const height = 350;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(140)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).force(\"x\", d3.forceX(width / 2).strength(0.1)).force(\"y\", d3.forceY(height / 2).strength(0.1)).on(\"tick\", ticked);\n    function constrainBounds(d) {\n      d.x = Math.max(20, Math.min(width - 20, d.x));\n      d.y = Math.max(20, Math.min(height - 20, d.y));\n    }\n    svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 25).attr(\"refY\", 0).attr(\"orient\", \"auto\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#42a5f5\");\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2).attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"#4CAF50\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"class\", d => `node node-${d.id}`).call(d3.drag().on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\", dragEnded));\n    const label = svg.append(\"g\").attr(\"class\", \"labels\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \".35em\").attr(\"fill\", \"white\");\n    const edgeLabels = svg.append(\"g\").attr(\"class\", \"edge-labels\").selectAll(\"text\").data(edges).enter().append(\"text\").text(d => d.weight !== null ? d.weight : \"\").attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \"-10px\").attr(\"fill\", \"black\").style(\"fill\", \"black\");\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.each(constrainBounds).attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n      edgeLabels.attr(\"x\", d => (d.source.x + d.target.x) / 2).attr(\"y\", d => (d.source.y + d.target.y) / 2);\n    }\n    function dragStarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragEnded(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n    return () => simulation.stop();\n  }, [nodes, edges, isDirected]);\n  const handleBFS = () => {\n    const nodeId = startNode || nodes[0].id; // Use the user-input start node\n    const queue = [nodeId];\n    const visited = new Set();\n    visited.add(nodeId);\n    const bfsTraversal = (prevNode = null) => {\n      if (queue.length === 0) {\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n        return;\n      }\n      const currentNode = queue.shift();\n      setQueueState(prevQueueState => [...prevQueueState, currentNode]);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => (edge.source.id === currentNode ? edge.target : edge.source).id);\n      neighbors.forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push(neighbor);\n        }\n      });\n      setTimeout(() => bfsTraversal(currentNode), 1000);\n    };\n    bfsTraversal();\n  };\n  const handleDFS = () => {\n    const nodeId = startNode || nodes[0].id; // Use the user-input start node\n    const stack = [nodeId];\n    const visited = new Set();\n    visited.add(nodeId);\n    const dfsTraversal = (prevNode = null) => {\n      if (stack.length === 0) {\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n        return;\n      }\n      const currentNode = stack.pop();\n      setQueueState(prevQueueState => [...prevQueueState, currentNode]);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => (edge.source.id === currentNode ? edge.target : edge.source).id);\n      neighbors.forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          stack.push(neighbor);\n        }\n      });\n      setTimeout(() => dfsTraversal(currentNode), 1000);\n    };\n    dfsTraversal();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    ref: graphContainerRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Enter graph edges (e.g., 1 2 10)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"start-node\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Start Node\",\n          value: startNode,\n          onChange: e => setStartNode(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBFS,\n          children: \"Start BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDFS,\n          children: \"Start DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadGraph,\n        children: \"Download Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"700\",\n      height: \"350\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"Vp+TD9oEo7Xl5wXkpWGbeK29KUE=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","Set","startNode","setStartNode","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","uniqueEdges","filter","edge","index","self","findIndex","message","downloadGraph","current","then","dataUrl","link","document","createElement","download","href","click","catch","err","console","svg","select","selectAll","remove","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","forceX","forceY","on","ticked","constrainBounds","x","Math","max","min","y","append","attr","data","enter","call","drag","dragStarted","dragged","dragEnded","label","text","edgeLabels","style","each","event","active","alphaTarget","restart","fx","fy","stop","handleBFS","nodeId","queue","visited","add","bfsTraversal","prevNode","classed","currentNode","shift","prevQueueState","prevVisitedNodes","neighbors","map","neighbor","has","setTimeout","handleDFS","stack","dfsTraversal","pop","className","ref","children","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]);\r\n  const [visitedNodes, setVisitedNodes] = useState(new Set());\r\n  const [startNode, setStartNode] = useState(\"\"); // Track the start node input\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef();\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n  \r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\r\n        }\r\n  \r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n  \r\n        const edgeWeight = weight ? parseInt(weight) : null;  // Set to null if no weight provided\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n  \r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n  \r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (e) =>\r\n              (e.source === edge.source && e.target === edge.target) ||\r\n              (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n  \r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const downloadGraph = () => {\r\n    if (graphContainerRef.current) {\r\n      toPng(graphContainerRef.current)\r\n        .then((dataUrl) => {\r\n          const link = document.createElement(\"a\");\r\n          link.download = \"graph_visualization.png\";\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to download graph as PNG:\", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n    const width = 700;\r\n    const height = 350;\r\n\r\n    const simulation = d3\r\n    .forceSimulation(nodes)\r\n    .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(140))\r\n    .force(\"charge\", d3.forceManyBody().strength(-300))\r\n    .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n    .force(\"x\", d3.forceX(width / 2).strength(0.1))\r\n    .force(\"y\", d3.forceY(height / 2).strength(0.1))\r\n    .on(\"tick\", ticked);\r\n\r\n    function constrainBounds(d) {\r\n      d.x = Math.max(20, Math.min(width - 20, d.x));\r\n      d.y = Math.max(20, Math.min(height - 20, d.y));\r\n    }\r\n\r\n    svg\r\n      .append(\"defs\")\r\n      .append(\"marker\")\r\n      .attr(\"id\", \"arrowhead\")\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 25)\r\n      .attr(\"refY\", 0)\r\n      .attr(\"orient\", \"auto\")\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#42a5f5\");\r\n\r\n    const link = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"links\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n\r\n    const node = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"nodes\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 20)\r\n      .attr(\"fill\", \"#4CAF50\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"class\", (d) => `node node-${d.id}`)\r\n      .call(\r\n        d3\r\n          .drag()\r\n          .on(\"start\", dragStarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragEnded)\r\n      );\r\n\r\n    const label = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"labels\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d.id)\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \".35em\")\r\n      .attr(\"fill\", \"white\");\r\n\r\n    const edgeLabels = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"edge-labels\")\r\n      .selectAll(\"text\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => (d.weight !== null ? d.weight : \"\"))\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"-10px\")\r\n      .attr(\"fill\", \"black\")\r\n      .style(\"fill\", \"black\");\r\n\r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      node.each(constrainBounds).attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n      edgeLabels\r\n        .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n        .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n    }\r\n\r\n    function dragStarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n\r\n    function dragEnded(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n\r\n    return () => simulation.stop();\r\n  }, [nodes, edges, isDirected]);\r\n\r\n  const handleBFS = () => {\r\n    const nodeId = startNode || nodes[0].id; // Use the user-input start node\r\n    const queue = [nodeId];\r\n    const visited = new Set();\r\n    visited.add(nodeId);\r\n\r\n    const bfsTraversal = (prevNode = null) => {\r\n      if (queue.length === 0) {\r\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n        return;\r\n      }\r\n\r\n      const currentNode = queue.shift();\r\n      setQueueState((prevQueueState) => [...prevQueueState, currentNode]);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n      const neighbors = edges\r\n        .filter((edge) => edge.source.id === currentNode || edge.target.id === currentNode)\r\n        .map((edge) => (edge.source.id === currentNode ? edge.target : edge.source).id);\r\n      \r\n      neighbors.forEach((neighbor) => {\r\n        if (!visited.has(neighbor)) {\r\n          visited.add(neighbor);\r\n          queue.push(neighbor);\r\n        }\r\n      });\r\n\r\n      setTimeout(() => bfsTraversal(currentNode), 1000);\r\n    };\r\n\r\n    bfsTraversal();\r\n  };\r\n\r\n  const handleDFS = () => {\r\n    const nodeId = startNode || nodes[0].id; // Use the user-input start node\r\n    const stack = [nodeId];\r\n    const visited = new Set();\r\n    visited.add(nodeId);\r\n\r\n    const dfsTraversal = (prevNode = null) => {\r\n      if (stack.length === 0) {\r\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n        return;\r\n      }\r\n\r\n      const currentNode = stack.pop();\r\n      setQueueState((prevQueueState) => [...prevQueueState, currentNode]);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n      const neighbors = edges\r\n        .filter((edge) => edge.source.id === currentNode || edge.target.id === currentNode)\r\n        .map((edge) => (edge.source.id === currentNode ? edge.target : edge.source).id);\r\n\r\n      neighbors.forEach((neighbor) => {\r\n        if (!visited.has(neighbor)) {\r\n          visited.add(neighbor);\r\n          stack.push(neighbor);\r\n        }\r\n      });\r\n\r\n      setTimeout(() => dfsTraversal(currentNode), 1000);\r\n    };\r\n\r\n    dfsTraversal();\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-container\" ref={graphContainerRef}>\r\n      <div className=\"graph-controls\">\r\n        <textarea\r\n          value={input}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Enter graph edges (e.g., 1 2 10)\"\r\n        />\r\n        <div className=\"start-node\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Start Node\"\r\n            value={startNode}\r\n            onChange={(e) => setStartNode(e.target.value)}\r\n          />\r\n          <button onClick={handleBFS}>Start BFS</button>\r\n          <button onClick={handleDFS}>Start DFS</button>\r\n        </div>\r\n        <button onClick={downloadGraph}>Download Graph</button>\r\n        {error && <div className=\"error-message\">{error}</div>}\r\n      </div>\r\n      <svg ref={svgRef} width=\"700\" height=\"350\"></svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}