{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactFlow, { Controls, ReactFlowProvider } from \"reactflow\";\nimport \"./GraphVisualization.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualizer = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [isDirected, setIsDirected] = useState(true);\n  const [inputValue, setInputValue] = useState(\"\");\n  const parseInput = () => {\n    const lines = inputValue.trim().split(\"\\n\");\n    const newNodes = [];\n    const newEdges = [];\n    lines.forEach(line => {\n      const parts = line.split(\" \").map(item => item.trim());\n      if (parts.length === 1) {\n        newNodes.push({\n          id: parts[0],\n          data: {\n            label: parts[0]\n          },\n          position: {\n            x: Math.random() * 400,\n            y: Math.random() * 400\n          }\n        });\n      } else if (parts.length >= 2) {\n        const source = parts[0];\n        const target = parts[1];\n        const weight = parts[2] ? ` (${parts[2]})` : \"\";\n        newEdges.push({\n          id: `${source}-${target}`,\n          source,\n          target,\n          label: weight,\n          animated: isDirected\n        });\n      }\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  const toggleGraphType = directed => {\n    setIsDirected(directed);\n    setEdges(prevEdges => prevEdges.map(edge => ({\n      ...edge,\n      animated: directed\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Enter graph input...\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          rows: \"10\",\n          cols: \"30\",\n          style: {\n            marginBottom: \"10px\",\n            resize: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: parseInput,\n            style: {\n              marginRight: \"10px\"\n            },\n            children: \"Generate Graph\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => toggleGraphType(true),\n            style: {\n              marginRight: \"10px\"\n            },\n            children: \"Directed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => toggleGraphType(false),\n            children: \"Undirected\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          fitView: true,\n          children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualizer, \"k2SyDF19IcKbd3EtZMydTpheAUM=\");\n_c = GraphVisualizer;\nexport default GraphVisualizer;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualizer\");","map":{"version":3,"names":["React","useState","ReactFlow","Controls","ReactFlowProvider","jsxDEV","_jsxDEV","GraphVisualizer","_s","nodes","setNodes","edges","setEdges","isDirected","setIsDirected","inputValue","setInputValue","parseInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","map","item","length","push","id","data","label","position","x","Math","random","y","source","target","weight","animated","toggleGraphType","directed","prevEdges","edge","children","style","width","height","display","flexDirection","alignItems","marginBottom","placeholder","value","onChange","e","rows","cols","resize","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginRight","fitView","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["\r\nimport React, { useState } from \"react\";\r\nimport ReactFlow, { Controls, ReactFlowProvider } from \"reactflow\";\r\nimport \"./GraphVisualization.css\";\r\n\r\nconst GraphVisualizer = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const parseInput = () => {\r\n    const lines = inputValue.trim().split(\"\\n\");\r\n    const newNodes = [];\r\n    const newEdges = [];\r\n\r\n    lines.forEach((line) => {\r\n      const parts = line.split(\" \").map((item) => item.trim());\r\n      if (parts.length === 1) {\r\n        newNodes.push({\r\n          id: parts[0],\r\n          data: { label: parts[0] },\r\n          position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n        });\r\n      } else if (parts.length >= 2) {\r\n        const source = parts[0];\r\n        const target = parts[1];\r\n        const weight = parts[2] ? ` (${parts[2]})` : \"\";\r\n        newEdges.push({\r\n          id: `${source}-${target}`,\r\n          source,\r\n          target,\r\n          label: weight,\r\n          animated: isDirected,\r\n        });\r\n      }\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  const toggleGraphType = (directed) => {\r\n    setIsDirected(directed);\r\n    setEdges((prevEdges) =>\r\n      prevEdges.map((edge) => ({\r\n        ...edge,\r\n        animated: directed,\r\n      }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ReactFlowProvider>\r\n      <div style={{ width: \"100%\", height: \"100vh\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n        <div style={{ marginBottom: \"20px\" }}>\r\n          <textarea\r\n            placeholder=\"Enter graph input...\"\r\n            value={inputValue}\r\n            onChange={(e) => setInputValue(e.target.value)}\r\n            rows=\"10\"\r\n            cols=\"30\"\r\n            style={{ marginBottom: \"10px\", resize: \"none\" }}\r\n          />\r\n          <div>\r\n            <button onClick={parseInput} style={{ marginRight: \"10px\" }}>\r\n              Generate Graph\r\n            </button>\r\n            <button onClick={() => toggleGraphType(true)} style={{ marginRight: \"10px\" }}>\r\n              Directed\r\n            </button>\r\n            <button onClick={() => toggleGraphType(false)}>Undirected</button>\r\n          </div>\r\n        </div>\r\n        <div style={{ width: \"100%\", height: \"100%\" }}>\r\n          <ReactFlow nodes={nodes} edges={edges} fitView>\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n      </div>\r\n    </ReactFlowProvider>\r\n  );\r\n};\r\n\r\nexport default GraphVisualizer;\r\n\r\n\r\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,IAAIC,QAAQ,EAAEC,iBAAiB,QAAQ,WAAW;AAClE,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMgB,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,KAAK,GAAGH,UAAU,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;IAC3C,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMC,QAAQ,GAAG,EAAE;IAEnBJ,KAAK,CAACK,OAAO,CAAEC,IAAI,IAAK;MACtB,MAAMC,KAAK,GAAGD,IAAI,CAACJ,KAAK,CAAC,GAAG,CAAC,CAACM,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACR,IAAI,CAAC,CAAC,CAAC;MACxD,IAAIM,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;QACtBP,QAAQ,CAACQ,IAAI,CAAC;UACZC,EAAE,EAAEL,KAAK,CAAC,CAAC,CAAC;UACZM,IAAI,EAAE;YAAEC,KAAK,EAAEP,KAAK,CAAC,CAAC;UAAE,CAAC;UACzBQ,QAAQ,EAAE;YAAEC,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;YAAEC,CAAC,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;UAAI;QAC7D,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIX,KAAK,CAACG,MAAM,IAAI,CAAC,EAAE;QAC5B,MAAMU,MAAM,GAAGb,KAAK,CAAC,CAAC,CAAC;QACvB,MAAMc,MAAM,GAAGd,KAAK,CAAC,CAAC,CAAC;QACvB,MAAMe,MAAM,GAAGf,KAAK,CAAC,CAAC,CAAC,GAAG,KAAKA,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE;QAC/CH,QAAQ,CAACO,IAAI,CAAC;UACZC,EAAE,EAAE,GAAGQ,MAAM,IAAIC,MAAM,EAAE;UACzBD,MAAM;UACNC,MAAM;UACNP,KAAK,EAAEQ,MAAM;UACbC,QAAQ,EAAE5B;QACZ,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEFH,QAAQ,CAACW,QAAQ,CAAC;IAClBT,QAAQ,CAACU,QAAQ,CAAC;EACpB,CAAC;EAED,MAAMoB,eAAe,GAAIC,QAAQ,IAAK;IACpC7B,aAAa,CAAC6B,QAAQ,CAAC;IACvB/B,QAAQ,CAAEgC,SAAS,IACjBA,SAAS,CAAClB,GAAG,CAAEmB,IAAI,KAAM;MACvB,GAAGA,IAAI;MACPJ,QAAQ,EAAEE;IACZ,CAAC,CAAC,CACJ,CAAC;EACH,CAAC;EAED,oBACErC,OAAA,CAACF,iBAAiB;IAAA0C,QAAA,eAChBxC,OAAA;MAAKyC,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE,OAAO;QAAEC,OAAO,EAAE,MAAM;QAAEC,aAAa,EAAE,QAAQ;QAAEC,UAAU,EAAE;MAAS,CAAE;MAAAN,QAAA,gBAC7GxC,OAAA;QAAKyC,KAAK,EAAE;UAAEM,YAAY,EAAE;QAAO,CAAE;QAAAP,QAAA,gBACnCxC,OAAA;UACEgD,WAAW,EAAC,sBAAsB;UAClCC,KAAK,EAAExC,UAAW;UAClByC,QAAQ,EAAGC,CAAC,IAAKzC,aAAa,CAACyC,CAAC,CAAClB,MAAM,CAACgB,KAAK,CAAE;UAC/CG,IAAI,EAAC,IAAI;UACTC,IAAI,EAAC,IAAI;UACTZ,KAAK,EAAE;YAAEM,YAAY,EAAE,MAAM;YAAEO,MAAM,EAAE;UAAO;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC,eACF1D,OAAA;UAAAwC,QAAA,gBACExC,OAAA;YAAQ2D,OAAO,EAAEhD,UAAW;YAAC8B,KAAK,EAAE;cAAEmB,WAAW,EAAE;YAAO,CAAE;YAAApB,QAAA,EAAC;UAE7D;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT1D,OAAA;YAAQ2D,OAAO,EAAEA,CAAA,KAAMvB,eAAe,CAAC,IAAI,CAAE;YAACK,KAAK,EAAE;cAAEmB,WAAW,EAAE;YAAO,CAAE;YAAApB,QAAA,EAAC;UAE9E;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT1D,OAAA;YAAQ2D,OAAO,EAAEA,CAAA,KAAMvB,eAAe,CAAC,KAAK,CAAE;YAAAI,QAAA,EAAC;UAAU;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACN1D,OAAA;QAAKyC,KAAK,EAAE;UAAEC,KAAK,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAO,CAAE;QAAAH,QAAA,eAC5CxC,OAAA,CAACJ,SAAS;UAACO,KAAK,EAAEA,KAAM;UAACE,KAAK,EAAEA,KAAM;UAACwD,OAAO;UAAArB,QAAA,eAC5CxC,OAAA,CAACH,QAAQ;YAAA0D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAExB,CAAC;AAACxD,EAAA,CA7EID,eAAe;AAAA6D,EAAA,GAAf7D,eAAe;AA+ErB,eAAeA,eAAe;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}