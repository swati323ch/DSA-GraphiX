{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./GraphVisualization.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]); // List of nodes\n  const [edges, setEdges] = useState([]); // List of edges\n  const [positions, setPositions] = useState({}); // Store node positions\n  const [input, setInput] = useState(\"\"); // Input state for adjacency list\n  const [error, setError] = useState(\"\"); // Error state for validation\n\n  // Handle the input change\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n\n  // Validate and update graph data\n  const validateInput = input => {\n    try {\n      const adjList = JSON.parse(input);\n\n      // Validate if the input is an array of arrays\n      if (!Array.isArray(adjList) || adjList.some(item => !Array.isArray(item))) {\n        setError(\"Invalid format! Please enter a valid adjacency list.\");\n        return;\n      }\n\n      // Create new nodes if needed\n      let newNodes = [...nodes];\n      let newEdges = [...edges];\n      adjList.forEach((neighbors, from) => {\n        from = from.toString(); // Ensure the node index is a string\n\n        // Check if the node exists in the nodes list, if not, add it\n        if (!newNodes.some(node => node.id === from)) {\n          newNodes.push({\n            id: from\n          });\n        }\n\n        // Add edges for each neighbor\n        neighbors.forEach(to => {\n          to = to.toString(); // Ensure the neighbor is a string\n\n          // Add the target node if it doesn't exist yet\n          if (!newNodes.some(node => node.id === to)) {\n            newNodes.push({\n              id: to\n            });\n          }\n\n          // Create an edge\n          newEdges.push({\n            from,\n            to\n          });\n        });\n      });\n      setNodes(newNodes);\n      setEdges(newEdges);\n      setError(\"\"); // Clear error if input is valid\n\n      // Apply positions and update the graph\n      applyPositions(newNodes);\n    } catch (error) {\n      setError(\"Invalid JSON! Please provide a valid adjacency list.\");\n    }\n  };\n\n  // Assign random positions to nodes\n  const applyPositions = newNodes => {\n    const width = 600;\n    const height = 400;\n    const newPositions = {};\n    newNodes.forEach((node, index) => {\n      newPositions[node.id] = {\n        x: Math.random() * width,\n        y: Math.random() * height\n      };\n    });\n    setPositions(newPositions);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Graph Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter adjacency list as JSON (e.g., [[2,1],[0,4]])\",\n      onChange: handleInputChange,\n      className: \"input-container\",\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"600\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        },\n        children: [edges.map((edge, index) => {\n          const fromPos = positions[edge.from];\n          const toPos = positions[edge.to];\n          if (!fromPos || !toPos) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromPos.x,\n            y1: fromPos.y,\n            x2: toPos.x,\n            y2: toPos.y,\n            stroke: \"#333\",\n            strokeWidth: 2\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this);\n        }), nodes.map(node => {\n          const pos = positions[node.id];\n          if (!pos) return null;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: pos.x,\n              cy: pos.y,\n              r: 30,\n              fill: \"#4CAF50\",\n              stroke: \"black\",\n              strokeWidth: 3,\n              children: /*#__PURE__*/_jsxDEV(\"title\", {\n                children: node.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: pos.x,\n              y: pos.y,\n              fontSize: \"16\",\n              fontWeight: \"bold\",\n              textAnchor: \"middle\",\n              fill: \"white\",\n              dy: \".3em\" // Vertically center the text\n              ,\n              children: node.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)]\n          }, node.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"IKUsu0TLRdxcYH2pMME+NuUjZts=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","positions","setPositions","input","setInput","error","setError","handleInputChange","e","value","target","validateInput","adjList","JSON","parse","Array","isArray","some","item","newNodes","newEdges","forEach","neighbors","from","toString","node","id","push","to","applyPositions","width","height","newPositions","index","x","Math","random","y","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","style","border","map","edge","fromPos","toPos","x1","y1","x2","y2","stroke","strokeWidth","pos","cx","cy","r","fill","fontSize","fontWeight","textAnchor","dy","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./GraphVisualization.css\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]); // List of nodes\r\n  const [edges, setEdges] = useState([]); // List of edges\r\n  const [positions, setPositions] = useState({}); // Store node positions\r\n  const [input, setInput] = useState(\"\"); // Input state for adjacency list\r\n  const [error, setError] = useState(\"\"); // Error state for validation\r\n\r\n  // Handle the input change\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  // Validate and update graph data\r\n  const validateInput = (input) => {\r\n    try {\r\n      const adjList = JSON.parse(input);\r\n\r\n      // Validate if the input is an array of arrays\r\n      if (!Array.isArray(adjList) || adjList.some(item => !Array.isArray(item))) {\r\n        setError(\"Invalid format! Please enter a valid adjacency list.\");\r\n        return;\r\n      }\r\n\r\n      // Create new nodes if needed\r\n      let newNodes = [...nodes];\r\n      let newEdges = [...edges];\r\n      adjList.forEach((neighbors, from) => {\r\n        from = from.toString(); // Ensure the node index is a string\r\n\r\n        // Check if the node exists in the nodes list, if not, add it\r\n        if (!newNodes.some(node => node.id === from)) {\r\n          newNodes.push({ id: from });\r\n        }\r\n\r\n        // Add edges for each neighbor\r\n        neighbors.forEach((to) => {\r\n          to = to.toString(); // Ensure the neighbor is a string\r\n\r\n          // Add the target node if it doesn't exist yet\r\n          if (!newNodes.some(node => node.id === to)) {\r\n            newNodes.push({ id: to });\r\n          }\r\n\r\n          // Create an edge\r\n          newEdges.push({ from, to });\r\n        });\r\n      });\r\n\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n      setError(\"\"); // Clear error if input is valid\r\n\r\n      // Apply positions and update the graph\r\n      applyPositions(newNodes);\r\n\r\n    } catch (error) {\r\n      setError(\"Invalid JSON! Please provide a valid adjacency list.\");\r\n    }\r\n  };\r\n\r\n  // Assign random positions to nodes\r\n  const applyPositions = (newNodes) => {\r\n    const width = 600;\r\n    const height = 400;\r\n    const newPositions = {};\r\n\r\n    newNodes.forEach((node, index) => {\r\n      newPositions[node.id] = {\r\n        x: Math.random() * width,\r\n        y: Math.random() * height,\r\n      };\r\n    });\r\n\r\n    setPositions(newPositions);\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>Graph Visualization</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder='Enter adjacency list as JSON (e.g., [[2,1],[0,4]])'\r\n        onChange={handleInputChange}\r\n        className=\"input-container\"\r\n        value={input}\r\n      />\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>} {/* Display error message if any */}\r\n\r\n      <div className=\"graph-display\">\r\n        <svg width=\"600\" height=\"400\" style={{ border: \"1px solid black\" }}>\r\n          {/* Render edges */}\r\n          {edges.map((edge, index) => {\r\n            const fromPos = positions[edge.from];\r\n            const toPos = positions[edge.to];\r\n\r\n            if (!fromPos || !toPos) return null;\r\n\r\n            return (\r\n              <line\r\n                key={index}\r\n                x1={fromPos.x}\r\n                y1={fromPos.y}\r\n                x2={toPos.x}\r\n                y2={toPos.y}\r\n                stroke=\"#333\"\r\n                strokeWidth={2}\r\n              />\r\n            );\r\n          })}\r\n\r\n          {/* Render nodes */}\r\n          {nodes.map((node) => {\r\n            const pos = positions[node.id];\r\n            if (!pos) return null;\r\n\r\n            return (\r\n              <g key={node.id}>\r\n                <circle\r\n                  cx={pos.x}\r\n                  cy={pos.y}\r\n                  r={30}\r\n                  fill=\"#4CAF50\"\r\n                  stroke=\"black\"\r\n                  strokeWidth={3}\r\n                >\r\n                  <title>{node.id}</title>\r\n                </circle>\r\n                {/* Render the node's name inside the circle */}\r\n                <text\r\n                  x={pos.x}\r\n                  y={pos.y}\r\n                  fontSize=\"16\"\r\n                  fontWeight=\"bold\"\r\n                  textAnchor=\"middle\"\r\n                  fill=\"white\"\r\n                  dy=\".3em\"  // Vertically center the text\r\n                >\r\n                  {node.id}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}