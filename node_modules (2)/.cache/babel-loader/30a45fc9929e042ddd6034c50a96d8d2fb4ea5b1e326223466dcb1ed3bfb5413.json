{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./GraphVisualization.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]); // List of nodes\n  const [edges, setEdges] = useState([]); // List of edges\n  const [positions, setPositions] = useState({}); // Store node positions\n  const [input, setInput] = useState(\"\"); // Input state for adjacency list\n  const [error, setError] = useState(\"\"); // Error state for validation\n  const [isDirected, setIsDirected] = useState(true); // Graph type: Directed or Undirected\n\n  // Handle the input change\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n\n  // Validate and update graph data\n  const validateInput = input => {\n    try {\n      const adjList = JSON.parse(input);\n\n      // Validate if the input is an array of arrays\n      if (!Array.isArray(adjList) || adjList.some(item => !Array.isArray(item))) {\n        setError(\"Invalid format! Please enter a valid adjacency list.\");\n        return;\n      }\n\n      // Initialize new nodes and edges\n      const newNodes = [];\n      const newEdges = [];\n      adjList.forEach((neighbors, from) => {\n        const fromId = from.toString(); // Ensure node id is a string\n\n        // Add the source node if not already present\n        if (!newNodes.some(node => node.id === fromId)) {\n          newNodes.push({\n            id: fromId\n          });\n        }\n        neighbors.forEach(to => {\n          const toId = to.toString();\n\n          // Add the target node if not already present\n          if (!newNodes.some(node => node.id === toId)) {\n            newNodes.push({\n              id: toId\n            });\n          }\n\n          // Add the edge\n          newEdges.push({\n            from: fromId,\n            to: toId\n          });\n\n          // If the graph is undirected, add the reverse edge\n          if (!isDirected) {\n            newEdges.push({\n              from: toId,\n              to: fromId\n            });\n          }\n        });\n      });\n\n      // Remove duplicate edges\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.from === edge.from && e.to === edge.to));\n\n      // Update states\n      setNodes(newNodes);\n      setEdges(uniqueEdges);\n      setError(\"\");\n\n      // Apply positions and update the graph\n      applyPositions(newNodes);\n    } catch (error) {\n      setError(\"Invalid JSON! Please provide a valid adjacency list.\");\n    }\n  };\n\n  // Assign random positions to nodes\n  const applyPositions = newNodes => {\n    const width = 600;\n    const height = 400;\n    const newPositions = {\n      ...positions\n    };\n    newNodes.forEach(node => {\n      if (!newPositions[node.id]) {\n        newPositions[node.id] = {\n          x: Math.random() * width,\n          y: Math.random() * height\n        };\n      }\n    });\n    setPositions(newPositions);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Graph Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${isDirected ? \"active\" : \"\"}`,\n        onClick: () => setIsDirected(true),\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${!isDirected ? \"active\" : \"\"}`,\n        onClick: () => setIsDirected(false),\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter adjacency list as JSON (e.g., [[1,2],[3,4]])\",\n      onChange: handleInputChange,\n      className: \"input-container\",\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"600\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        },\n        children: [isDirected && /*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"marker\", {\n            id: \"arrowhead\",\n            markerWidth: \"10\",\n            markerHeight: \"7\",\n            refX: \"10\",\n            refY: \"3.5\",\n            orient: \"auto\",\n            markerUnits: \"strokeWidth\",\n            children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n              points: \"0 0, 10 3.5, 0 7\",\n              fill: \"#333\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), edges.map((edge, index) => {\n          const fromPos = positions[edge.from];\n          const toPos = positions[edge.to];\n          if (!fromPos || !toPos) return null;\n\n          // Calculate adjusted positions to avoid arrows overlapping nodes\n          const dx = toPos.x - fromPos.x;\n          const dy = toPos.y - fromPos.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          const offset = 30; // Node radius offset\n\n          const startX = fromPos.x + dx / distance * offset;\n          const startY = fromPos.y + dy / distance * offset;\n          const endX = toPos.x - dx / distance * offset;\n          const endY = toPos.y - dy / distance * offset;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: startX,\n            y1: startY,\n            x2: endX,\n            y2: endY,\n            stroke: \"#333\",\n            strokeWidth: 2,\n            markerEnd: isDirected ? \"url(#arrowhead)\" : undefined // Add arrowhead only for directed graph\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this);\n        }), nodes.map(node => {\n          const pos = positions[node.id];\n          if (!pos) return null;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: pos.x,\n              cy: pos.y,\n              r: 30,\n              fill: \"#4CAF50\",\n              stroke: \"black\",\n              strokeWidth: 3,\n              children: /*#__PURE__*/_jsxDEV(\"title\", {\n                children: node.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: pos.x,\n              y: pos.y,\n              fontSize: \"16\",\n              fontWeight: \"bold\",\n              textAnchor: \"middle\",\n              fill: \"white\",\n              dy: \".3em\" // Vertically center the text\n              ,\n              children: node.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this)]\n          }, node.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"UUNP4l8RdpWeJtcXVczrHdiPMEw=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","positions","setPositions","input","setInput","error","setError","isDirected","setIsDirected","handleInputChange","e","value","target","validateInput","adjList","JSON","parse","Array","isArray","some","item","newNodes","newEdges","forEach","neighbors","from","fromId","toString","node","id","push","to","toId","uniqueEdges","filter","edge","index","self","findIndex","applyPositions","width","height","newPositions","x","Math","random","y","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","placeholder","onChange","style","border","markerWidth","markerHeight","refX","refY","orient","markerUnits","points","fill","map","fromPos","toPos","dx","dy","distance","sqrt","offset","startX","startY","endX","endY","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","undefined","pos","cx","cy","r","fontSize","fontWeight","textAnchor","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./GraphVisualization.css\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]); // List of nodes\r\n  const [edges, setEdges] = useState([]); // List of edges\r\n  const [positions, setPositions] = useState({}); // Store node positions\r\n  const [input, setInput] = useState(\"\"); // Input state for adjacency list\r\n  const [error, setError] = useState(\"\"); // Error state for validation\r\n  const [isDirected, setIsDirected] = useState(true); // Graph type: Directed or Undirected\r\n\r\n  // Handle the input change\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  // Validate and update graph data\r\n  const validateInput = (input) => {\r\n    try {\r\n      const adjList = JSON.parse(input);\r\n\r\n      // Validate if the input is an array of arrays\r\n      if (!Array.isArray(adjList) || adjList.some((item) => !Array.isArray(item))) {\r\n        setError(\"Invalid format! Please enter a valid adjacency list.\");\r\n        return;\r\n      }\r\n\r\n      // Initialize new nodes and edges\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n\r\n      adjList.forEach((neighbors, from) => {\r\n        const fromId = from.toString(); // Ensure node id is a string\r\n\r\n        // Add the source node if not already present\r\n        if (!newNodes.some((node) => node.id === fromId)) {\r\n          newNodes.push({ id: fromId });\r\n        }\r\n\r\n        neighbors.forEach((to) => {\r\n          const toId = to.toString();\r\n\r\n          // Add the target node if not already present\r\n          if (!newNodes.some((node) => node.id === toId)) {\r\n            newNodes.push({ id: toId });\r\n          }\r\n\r\n          // Add the edge\r\n          newEdges.push({ from: fromId, to: toId });\r\n\r\n          // If the graph is undirected, add the reverse edge\r\n          if (!isDirected) {\r\n            newEdges.push({ from: toId, to: fromId });\r\n          }\r\n        });\r\n      });\r\n\r\n      // Remove duplicate edges\r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index === self.findIndex((e) => e.from === edge.from && e.to === edge.to)\r\n      );\r\n\r\n      // Update states\r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n\r\n      // Apply positions and update the graph\r\n      applyPositions(newNodes);\r\n    } catch (error) {\r\n      setError(\"Invalid JSON! Please provide a valid adjacency list.\");\r\n    }\r\n  };\r\n\r\n  // Assign random positions to nodes\r\n  const applyPositions = (newNodes) => {\r\n    const width = 600;\r\n    const height = 400;\r\n\r\n    const newPositions = { ...positions };\r\n\r\n    newNodes.forEach((node) => {\r\n      if (!newPositions[node.id]) {\r\n        newPositions[node.id] = {\r\n          x: Math.random() * width,\r\n          y: Math.random() * height,\r\n        };\r\n      }\r\n    });\r\n\r\n    setPositions(newPositions);\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>Graph Visualization</h1>\r\n\r\n      {/* Buttons for selecting graph type */}\r\n      <div className=\"button-container\">\r\n        <button\r\n          className={`toggle-button ${isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => setIsDirected(true)}\r\n        >\r\n          Directed\r\n        </button>\r\n        <button\r\n          className={`toggle-button ${!isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => setIsDirected(false)}\r\n        >\r\n          Undirected\r\n        </button>\r\n      </div>\r\n\r\n      <input\r\n        type=\"text\"\r\n        placeholder='Enter adjacency list as JSON (e.g., [[1,2],[3,4]])'\r\n        onChange={handleInputChange}\r\n        className=\"input-container\"\r\n        value={input}\r\n      />\r\n\r\n      {error && <div className=\"error-message\">{error}</div>} {/* Display error message if any */}\r\n\r\n      <div className=\"graph-display\">\r\n        <svg width=\"600\" height=\"400\" style={{ border: \"1px solid black\" }}>\r\n          {/* Define arrowhead marker */}\r\n          {isDirected && (\r\n            <defs>\r\n              <marker\r\n                id=\"arrowhead\"\r\n                markerWidth=\"10\"\r\n                markerHeight=\"7\"\r\n                refX=\"10\"\r\n                refY=\"3.5\"\r\n                orient=\"auto\"\r\n                markerUnits=\"strokeWidth\"\r\n              >\r\n                <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#333\" />\r\n              </marker>\r\n            </defs>\r\n          )}\r\n\r\n          {/* Render edges */}\r\n          {edges.map((edge, index) => {\r\n            const fromPos = positions[edge.from];\r\n            const toPos = positions[edge.to];\r\n\r\n            if (!fromPos || !toPos) return null;\r\n\r\n            // Calculate adjusted positions to avoid arrows overlapping nodes\r\n            const dx = toPos.x - fromPos.x;\r\n            const dy = toPos.y - fromPos.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            const offset = 30; // Node radius offset\r\n\r\n            const startX = fromPos.x + (dx / distance) * offset;\r\n            const startY = fromPos.y + (dy / distance) * offset;\r\n            const endX = toPos.x - (dx / distance) * offset;\r\n            const endY = toPos.y - (dy / distance) * offset;\r\n\r\n            return (\r\n              <line\r\n                key={index}\r\n                x1={startX}\r\n                y1={startY}\r\n                x2={endX}\r\n                y2={endY}\r\n                stroke=\"#333\"\r\n                strokeWidth={2}\r\n                markerEnd={isDirected ? \"url(#arrowhead)\" : undefined} // Add arrowhead only for directed graph\r\n              />\r\n            );\r\n          })}\r\n\r\n          {/* Render nodes */}\r\n          {nodes.map((node) => {\r\n            const pos = positions[node.id];\r\n            if (!pos) return null;\r\n\r\n            return (\r\n              <g key={node.id}>\r\n                <circle\r\n                  cx={pos.x}\r\n                  cy={pos.y}\r\n                  r={30}\r\n                  fill=\"#4CAF50\"\r\n                  stroke=\"black\"\r\n                  strokeWidth={3}\r\n                >\r\n                  <title>{node.id}</title>\r\n                </circle>\r\n                {/* Render the node's name inside the circle */}\r\n                <text\r\n                  x={pos.x}\r\n                  y={pos.y}\r\n                  fontSize=\"16\"\r\n                  fontWeight=\"bold\"\r\n                  textAnchor=\"middle\"\r\n                  fill=\"white\"\r\n                  dy=\".3em\" // Vertically center the text\r\n                >\r\n                  {node.id}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}