{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./GraphVisualization.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]); // List of nodes\n  const [edges, setEdges] = useState([]); // List of edges\n  const [positions, setPositions] = useState({}); // Store node positions\n  const [input, setInput] = useState(\"\"); // Input state for adjacency list\n  const [error, setError] = useState(\"\"); // Error state for validation\n\n  // Handle the input change\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n\n  // Validate and update graph data\n  const validateInput = input => {\n    try {\n      const adjList = JSON.parse(input);\n      if (!Array.isArray(adjList) || adjList.some(item => !Array.isArray(item))) {\n        setError(\"Invalid format! Please enter a valid adjacency list.\");\n        return;\n      }\n      const newNodes = [];\n      const newEdges = [];\n      adjList.forEach((neighbors, from) => {\n        const fromId = from.toString();\n        if (!newNodes.some(node => node.id === fromId)) {\n          newNodes.push({\n            id: fromId\n          });\n        }\n        neighbors.forEach(to => {\n          const toId = to.toString();\n          if (!newNodes.some(node => node.id === toId)) {\n            newNodes.push({\n              id: toId\n            });\n          }\n          if (!newEdges.some(edge => edge.from === fromId && edge.to === toId)) {\n            newEdges.push({\n              from: fromId,\n              to: toId\n            });\n          }\n        });\n      });\n      setNodes(newNodes);\n      setEdges(newEdges);\n      setError(\"\");\n      applyForceDirectedLayout(newNodes, newEdges);\n    } catch (error) {\n      setError(\"Invalid JSON! Please provide a valid adjacency list.\");\n    }\n  };\n\n  // Apply force-directed layout to adjust positions\n  const applyForceDirectedLayout = (newNodes, newEdges) => {\n    const width = 600;\n    const height = 400;\n    const repulsionStrength = 2000; // Strength of repulsive force\n    const attractionStrength = 0.01; // Strength of attractive force\n    const maxIterations = 100;\n\n    // Initialize positions randomly\n    const positions = {};\n    newNodes.forEach(node => {\n      positions[node.id] = {\n        x: Math.random() * width,\n        y: Math.random() * height\n      };\n    });\n\n    // Simulate forces for a number of iterations\n    for (let iteration = 0; iteration < maxIterations; iteration++) {\n      const forces = {};\n\n      // Initialize forces to zero\n      newNodes.forEach(node => {\n        forces[node.id] = {\n          x: 0,\n          y: 0\n        };\n      });\n\n      // Apply repulsive forces\n      newNodes.forEach((nodeA, i) => {\n        newNodes.forEach((nodeB, j) => {\n          if (i !== j) {\n            const dx = positions[nodeA.id].x - positions[nodeB.id].x;\n            const dy = positions[nodeA.id].y - positions[nodeB.id].y;\n            const distance = Math.sqrt(dx * dx + dy * dy) + 0.1; // Add small value to avoid division by zero\n\n            const repulsionForce = repulsionStrength / (distance * distance);\n            forces[nodeA.id].x += dx / distance * repulsionForce;\n            forces[nodeA.id].y += dy / distance * repulsionForce;\n          }\n        });\n      });\n\n      // Apply attractive forces\n      newEdges.forEach(edge => {\n        const fromPos = positions[edge.from];\n        const toPos = positions[edge.to];\n        const dx = toPos.x - fromPos.x;\n        const dy = toPos.y - fromPos.y;\n        const distance = Math.sqrt(dx * dx + dy * dy) + 0.1; // Add small value to avoid division by zero\n\n        const attractionForce = distance * attractionStrength;\n        forces[edge.from].x += dx / distance * attractionForce;\n        forces[edge.from].y += dy / distance * attractionForce;\n        forces[edge.to].x -= dx / distance * attractionForce;\n        forces[edge.to].y -= dy / distance * attractionForce;\n      });\n\n      // Update positions based on forces\n      newNodes.forEach(node => {\n        positions[node.id].x += forces[node.id].x;\n        positions[node.id].y += forces[node.id].y;\n\n        // Keep positions within bounds\n        positions[node.id].x = Math.max(30, Math.min(width - 30, positions[node.id].x));\n        positions[node.id].y = Math.max(30, Math.min(height - 30, positions[node.id].y));\n      });\n    }\n    setPositions(positions);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Directed Graph Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter adjacency list as JSON (e.g., [[1,2],[3,4]])\",\n      onChange: handleInputChange,\n      className: \"input-container\",\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"600\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"marker\", {\n            id: \"arrowhead\",\n            markerWidth: \"10\",\n            markerHeight: \"7\",\n            refX: \"10\",\n            refY: \"3.5\",\n            orient: \"auto\",\n            markerUnits: \"strokeWidth\",\n            children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n              points: \"0 0, 10 3.5, 0 7\",\n              fill: \"#333\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), edges.map((edge, index) => {\n          const fromPos = positions[edge.from];\n          const toPos = positions[edge.to];\n          if (!fromPos || !toPos) return null;\n          const dx = toPos.x - fromPos.x;\n          const dy = toPos.y - fromPos.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          const offset = 30; // Node radius offset\n\n          const startX = fromPos.x + dx / distance * offset;\n          const startY = fromPos.y + dy / distance * offset;\n          const endX = toPos.x - dx / distance * offset;\n          const endY = toPos.y - dy / distance * offset;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: startX,\n            y1: startY,\n            x2: endX,\n            y2: endY,\n            stroke: \"#333\",\n            strokeWidth: 2,\n            markerEnd: \"url(#arrowhead)\" // Add arrowhead to edge\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this);\n        }), nodes.map(node => {\n          const pos = positions[node.id];\n          if (!pos) return null;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: pos.x,\n              cy: pos.y,\n              r: 30,\n              fill: \"#4CAF50\",\n              stroke: \"black\",\n              strokeWidth: 3,\n              children: /*#__PURE__*/_jsxDEV(\"title\", {\n                children: node.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: pos.x,\n              y: pos.y,\n              fontSize: \"16\",\n              fontWeight: \"bold\",\n              textAnchor: \"middle\",\n              fill: \"white\",\n              dy: \".3em\",\n              children: node.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this)]\n          }, node.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"IKUsu0TLRdxcYH2pMME+NuUjZts=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","positions","setPositions","input","setInput","error","setError","handleInputChange","e","value","target","validateInput","adjList","JSON","parse","Array","isArray","some","item","newNodes","newEdges","forEach","neighbors","from","fromId","toString","node","id","push","to","toId","edge","applyForceDirectedLayout","width","height","repulsionStrength","attractionStrength","maxIterations","x","Math","random","y","iteration","forces","nodeA","i","nodeB","j","dx","dy","distance","sqrt","repulsionForce","fromPos","toPos","attractionForce","max","min","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","style","border","markerWidth","markerHeight","refX","refY","orient","markerUnits","points","fill","map","index","offset","startX","startY","endX","endY","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","pos","cx","cy","r","fontSize","fontWeight","textAnchor","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./GraphVisualization.css\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]); // List of nodes\r\n  const [edges, setEdges] = useState([]); // List of edges\r\n  const [positions, setPositions] = useState({}); // Store node positions\r\n  const [input, setInput] = useState(\"\"); // Input state for adjacency list\r\n  const [error, setError] = useState(\"\"); // Error state for validation\r\n\r\n  // Handle the input change\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  // Validate and update graph data\r\n  const validateInput = (input) => {\r\n    try {\r\n      const adjList = JSON.parse(input);\r\n\r\n      if (!Array.isArray(adjList) || adjList.some((item) => !Array.isArray(item))) {\r\n        setError(\"Invalid format! Please enter a valid adjacency list.\");\r\n        return;\r\n      }\r\n\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n\r\n      adjList.forEach((neighbors, from) => {\r\n        const fromId = from.toString();\r\n\r\n        if (!newNodes.some((node) => node.id === fromId)) {\r\n          newNodes.push({ id: fromId });\r\n        }\r\n\r\n        neighbors.forEach((to) => {\r\n          const toId = to.toString();\r\n\r\n          if (!newNodes.some((node) => node.id === toId)) {\r\n            newNodes.push({ id: toId });\r\n          }\r\n\r\n          if (!newEdges.some((edge) => edge.from === fromId && edge.to === toId)) {\r\n            newEdges.push({ from: fromId, to: toId });\r\n          }\r\n        });\r\n      });\r\n\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n      setError(\"\");\r\n\r\n      applyForceDirectedLayout(newNodes, newEdges);\r\n    } catch (error) {\r\n      setError(\"Invalid JSON! Please provide a valid adjacency list.\");\r\n    }\r\n  };\r\n\r\n  // Apply force-directed layout to adjust positions\r\n  const applyForceDirectedLayout = (newNodes, newEdges) => {\r\n    const width = 600;\r\n    const height = 400;\r\n    const repulsionStrength = 2000; // Strength of repulsive force\r\n    const attractionStrength = 0.01; // Strength of attractive force\r\n    const maxIterations = 100;\r\n\r\n    // Initialize positions randomly\r\n    const positions = {};\r\n    newNodes.forEach((node) => {\r\n      positions[node.id] = {\r\n        x: Math.random() * width,\r\n        y: Math.random() * height,\r\n      };\r\n    });\r\n\r\n    // Simulate forces for a number of iterations\r\n    for (let iteration = 0; iteration < maxIterations; iteration++) {\r\n      const forces = {};\r\n\r\n      // Initialize forces to zero\r\n      newNodes.forEach((node) => {\r\n        forces[node.id] = { x: 0, y: 0 };\r\n      });\r\n\r\n      // Apply repulsive forces\r\n      newNodes.forEach((nodeA, i) => {\r\n        newNodes.forEach((nodeB, j) => {\r\n          if (i !== j) {\r\n            const dx = positions[nodeA.id].x - positions[nodeB.id].x;\r\n            const dy = positions[nodeA.id].y - positions[nodeB.id].y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy) + 0.1; // Add small value to avoid division by zero\r\n\r\n            const repulsionForce = repulsionStrength / (distance * distance);\r\n            forces[nodeA.id].x += (dx / distance) * repulsionForce;\r\n            forces[nodeA.id].y += (dy / distance) * repulsionForce;\r\n          }\r\n        });\r\n      });\r\n\r\n      // Apply attractive forces\r\n      newEdges.forEach((edge) => {\r\n        const fromPos = positions[edge.from];\r\n        const toPos = positions[edge.to];\r\n        const dx = toPos.x - fromPos.x;\r\n        const dy = toPos.y - fromPos.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy) + 0.1; // Add small value to avoid division by zero\r\n\r\n        const attractionForce = distance * attractionStrength;\r\n        forces[edge.from].x += (dx / distance) * attractionForce;\r\n        forces[edge.from].y += (dy / distance) * attractionForce;\r\n        forces[edge.to].x -= (dx / distance) * attractionForce;\r\n        forces[edge.to].y -= (dy / distance) * attractionForce;\r\n      });\r\n\r\n      // Update positions based on forces\r\n      newNodes.forEach((node) => {\r\n        positions[node.id].x += forces[node.id].x;\r\n        positions[node.id].y += forces[node.id].y;\r\n\r\n        // Keep positions within bounds\r\n        positions[node.id].x = Math.max(30, Math.min(width - 30, positions[node.id].x));\r\n        positions[node.id].y = Math.max(30, Math.min(height - 30, positions[node.id].y));\r\n      });\r\n    }\r\n\r\n    setPositions(positions);\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>Directed Graph Visualization</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder='Enter adjacency list as JSON (e.g., [[1,2],[3,4]])'\r\n        onChange={handleInputChange}\r\n        className=\"input-container\"\r\n        value={input}\r\n      />\r\n\r\n      {error && <div className=\"error-message\">{error}</div>} {/* Display error message if any */}\r\n\r\n      <div className=\"graph-display\">\r\n        <svg width=\"600\" height=\"400\" style={{ border: \"1px solid black\" }}>\r\n          {/* Define arrowhead marker */}\r\n          <defs>\r\n            <marker\r\n              id=\"arrowhead\"\r\n              markerWidth=\"10\"\r\n              markerHeight=\"7\"\r\n              refX=\"10\"\r\n              refY=\"3.5\"\r\n              orient=\"auto\"\r\n              markerUnits=\"strokeWidth\"\r\n            >\r\n              <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#333\" />\r\n            </marker>\r\n          </defs>\r\n\r\n          {/* Render edges */}\r\n          {edges.map((edge, index) => {\r\n            const fromPos = positions[edge.from];\r\n            const toPos = positions[edge.to];\r\n\r\n            if (!fromPos || !toPos) return null;\r\n\r\n            const dx = toPos.x - fromPos.x;\r\n            const dy = toPos.y - fromPos.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            const offset = 30; // Node radius offset\r\n\r\n            const startX = fromPos.x + (dx / distance) * offset;\r\n            const startY = fromPos.y + (dy / distance) * offset;\r\n            const endX = toPos.x - (dx / distance) * offset;\r\n            const endY = toPos.y - (dy / distance) * offset;\r\n\r\n            return (\r\n              <line\r\n                key={index}\r\n                x1={startX}\r\n                y1={startY}\r\n                x2={endX}\r\n                y2={endY}\r\n                stroke=\"#333\"\r\n                strokeWidth={2}\r\n                markerEnd=\"url(#arrowhead)\" // Add arrowhead to edge\r\n              />\r\n            );\r\n          })}\r\n\r\n          {/* Render nodes */}\r\n          {nodes.map((node) => {\r\n            const pos = positions[node.id];\r\n            if (!pos) return null;\r\n\r\n            return (\r\n              <g key={node.id}>\r\n                <circle\r\n                  cx={pos.x}\r\n                  cy={pos.y}\r\n                  r={30}\r\n                  fill=\"#4CAF50\"\r\n                  stroke=\"black\"\r\n                  strokeWidth={3}\r\n                >\r\n                  <title>{node.id}</title>\r\n                </circle>\r\n                <text\r\n                  x={pos.x}\r\n                  y={pos.y}\r\n                  fontSize=\"16\"\r\n                  fontWeight=\"bold\"\r\n                  textAnchor=\"middle\"\r\n                  fill=\"white\"\r\n                  dy=\".3em\"\r\n                >\r\n                  {node.id}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}