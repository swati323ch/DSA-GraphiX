{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\";\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const svgRef = useRef();\n  const graphContainerRef = useRef();\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const [from, to] = line.trim().split(\" \");\n        if (from === undefined || to === undefined || isNaN(from) || isNaN(to)) {\n          throw new Error(\"Invalid input format! Each line must have two integers.\");\n        }\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n        newEdges.push({\n          source: from,\n          target: to\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from\n          });\n        }\n      });\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.source === edge.source && e.target === edge.target || e.source === edge.target && e.target === edge.source));\n      setNodes(newNodes);\n      setEdges(uniqueEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const createAdjacencyList = () => {\n    const adjacencyList = new Map();\n    nodes.forEach(node => adjacencyList.set(node.id, []));\n    edges.forEach(edge => {\n      adjacencyList.get(edge.source).push(edge.target);\n      if (!isDirected) {\n        adjacencyList.get(edge.target).push(edge.source);\n      }\n    });\n    return adjacencyList;\n  };\n  const visualizeTraversal = async traversal => {\n    const svg = d3.select(svgRef.current);\n    const allNodes = svg.selectAll(\"circle\");\n    const allEdges = svg.selectAll(\"line\");\n    for (const step of traversal) {\n      allNodes.filter(d => d.id === step).transition().duration(500).attr(\"fill\", \"#FFD700\");\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  };\n  const bfs = async () => {\n    const adjacencyList = createAdjacencyList();\n    const visited = new Set();\n    const queue = [nodes[0].id];\n    const traversal = [];\n    while (queue.length > 0) {\n      const node = queue.shift();\n      if (!visited.has(node)) {\n        visited.add(node);\n        traversal.push(node);\n        queue.push(...(adjacencyList.get(node) || []).filter(neighbor => !visited.has(neighbor)));\n      }\n    }\n    await visualizeTraversal(traversal);\n  };\n  const dfs = async () => {\n    const adjacencyList = createAdjacencyList();\n    const visited = new Set();\n    const traversal = [];\n    const dfsRecursive = node => {\n      if (!visited.has(node)) {\n        visited.add(node);\n        traversal.push(node);\n        (adjacencyList.get(node) || []).forEach(dfsRecursive);\n      }\n    };\n    dfsRecursive(nodes[0].id);\n    await visualizeTraversal(traversal);\n  };\n  const topologicalSort = async () => {\n    const adjacencyList = createAdjacencyList();\n    const visited = new Set();\n    const stack = [];\n    const dfsTopo = node => {\n      if (!visited.has(node)) {\n        visited.add(node);\n        (adjacencyList.get(node) || []).forEach(dfsTopo);\n        stack.push(node);\n      }\n    };\n    nodes.forEach(node => {\n      if (!visited.has(node.id)) {\n        dfsTopo(node.id);\n      }\n    });\n    await visualizeTraversal(stack.reverse());\n  };\n  const mst = async () => {\n    const mstEdges = [];\n    const parent = {};\n    const rank = {};\n    const find = node => {\n      if (parent[node] !== node) {\n        parent[node] = find(parent[node]);\n      }\n      return parent[node];\n    };\n    const union = (node1, node2) => {\n      const root1 = find(node1);\n      const root2 = find(node2);\n      if (root1 !== root2) {\n        if (rank[root1] > rank[root2]) {\n          parent[root2] = root1;\n        } else if (rank[root1] < rank[root2]) {\n          parent[root1] = root2;\n        } else {\n          parent[root2] = root1;\n          rank[root1]++;\n        }\n      }\n    };\n    nodes.forEach(node => {\n      parent[node.id] = node.id;\n      rank[node.id] = 0;\n    });\n    edges.sort((a, b) => a.weight - b.weight).forEach(edge => {\n      if (find(edge.source) !== find(edge.target)) {\n        union(edge.source, edge.target);\n        mstEdges.push(edge);\n      }\n    });\n    await visualizeTraversal(mstEdges.map(edge => edge.source));\n  };\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 700;\n    const height = 350;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(100)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).on(\"tick\", ticked);\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2);\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"#4CAF50\");\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n    }\n    return () => simulation.stop();\n  }, [nodes, edges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Graph Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      onChange: handleInputChange,\n      value: input,\n      placeholder: \"Enter edges (e.g., '0 1')\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: bfs,\n      children: \"BFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: dfs,\n      children: \"DFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: topologicalSort,\n      children: \"Topological Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mst,\n      children: \"MST\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"700\",\n      height: \"350\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"cFKcKL/dMEwaXJqSLplhFEcmGyI=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","from","to","undefined","isNaN","Error","some","node","id","push","source","uniqueEdges","filter","edge","index","self","findIndex","message","createAdjacencyList","adjacencyList","Map","set","get","visualizeTraversal","traversal","svg","select","current","allNodes","selectAll","allEdges","step","d","transition","duration","attr","Promise","resolve","setTimeout","bfs","visited","Set","queue","length","shift","has","add","neighbor","dfs","dfsRecursive","topologicalSort","stack","dfsTopo","reverse","mst","mstEdges","parent","rank","find","union","node1","node2","root1","root2","sort","a","b","weight","map","remove","width","height","simulation","forceSimulation","force","forceLink","distance","forceManyBody","strength","forceCenter","on","ticked","link","append","data","enter","x","y","stop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","onClick","ref","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\";\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef();\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n\r\n      lines.forEach((line) => {\r\n        const [from, to] = line.trim().split(\" \");\r\n        if (from === undefined || to === undefined || isNaN(from) || isNaN(to)) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers.\");\r\n        }\r\n\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n\r\n        newEdges.push({ source: from, target: to });\r\n\r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from });\r\n        }\r\n      });\r\n\r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (e) =>\r\n              (e.source === edge.source && e.target === edge.target) ||\r\n              (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n\r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const createAdjacencyList = () => {\r\n    const adjacencyList = new Map();\r\n    nodes.forEach((node) => adjacencyList.set(node.id, []));\r\n    edges.forEach((edge) => {\r\n      adjacencyList.get(edge.source).push(edge.target);\r\n      if (!isDirected) {\r\n        adjacencyList.get(edge.target).push(edge.source);\r\n      }\r\n    });\r\n    return adjacencyList;\r\n  };\r\n\r\n  const visualizeTraversal = async (traversal) => {\r\n    const svg = d3.select(svgRef.current);\r\n    const allNodes = svg.selectAll(\"circle\");\r\n    const allEdges = svg.selectAll(\"line\");\r\n\r\n    for (const step of traversal) {\r\n      allNodes\r\n        .filter((d) => d.id === step)\r\n        .transition()\r\n        .duration(500)\r\n        .attr(\"fill\", \"#FFD700\");\r\n\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    }\r\n  };\r\n\r\n  const bfs = async () => {\r\n    const adjacencyList = createAdjacencyList();\r\n    const visited = new Set();\r\n    const queue = [nodes[0].id];\r\n    const traversal = [];\r\n\r\n    while (queue.length > 0) {\r\n      const node = queue.shift();\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        traversal.push(node);\r\n        queue.push(...(adjacencyList.get(node) || []).filter((neighbor) => !visited.has(neighbor)));\r\n      }\r\n    }\r\n\r\n    await visualizeTraversal(traversal);\r\n  };\r\n\r\n  const dfs = async () => {\r\n    const adjacencyList = createAdjacencyList();\r\n    const visited = new Set();\r\n    const traversal = [];\r\n\r\n    const dfsRecursive = (node) => {\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        traversal.push(node);\r\n        (adjacencyList.get(node) || []).forEach(dfsRecursive);\r\n      }\r\n    };\r\n\r\n    dfsRecursive(nodes[0].id);\r\n    await visualizeTraversal(traversal);\r\n  };\r\n\r\n  const topologicalSort = async () => {\r\n    const adjacencyList = createAdjacencyList();\r\n    const visited = new Set();\r\n    const stack = [];\r\n\r\n    const dfsTopo = (node) => {\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        (adjacencyList.get(node) || []).forEach(dfsTopo);\r\n        stack.push(node);\r\n      }\r\n    };\r\n\r\n    nodes.forEach((node) => {\r\n      if (!visited.has(node.id)) {\r\n        dfsTopo(node.id);\r\n      }\r\n    });\r\n\r\n    await visualizeTraversal(stack.reverse());\r\n  };\r\n\r\n  const mst = async () => {\r\n    const mstEdges = [];\r\n    const parent = {};\r\n    const rank = {};\r\n\r\n    const find = (node) => {\r\n      if (parent[node] !== node) {\r\n        parent[node] = find(parent[node]);\r\n      }\r\n      return parent[node];\r\n    };\r\n\r\n    const union = (node1, node2) => {\r\n      const root1 = find(node1);\r\n      const root2 = find(node2);\r\n\r\n      if (root1 !== root2) {\r\n        if (rank[root1] > rank[root2]) {\r\n          parent[root2] = root1;\r\n        } else if (rank[root1] < rank[root2]) {\r\n          parent[root1] = root2;\r\n        } else {\r\n          parent[root2] = root1;\r\n          rank[root1]++;\r\n        }\r\n      }\r\n    };\r\n\r\n    nodes.forEach((node) => {\r\n      parent[node.id] = node.id;\r\n      rank[node.id] = 0;\r\n    });\r\n\r\n    edges\r\n      .sort((a, b) => a.weight - b.weight)\r\n      .forEach((edge) => {\r\n        if (find(edge.source) !== find(edge.target)) {\r\n          union(edge.source, edge.target);\r\n          mstEdges.push(edge);\r\n        }\r\n      });\r\n\r\n    await visualizeTraversal(mstEdges.map((edge) => edge.source));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n    const width = 700;\r\n    const height = 350;\r\n\r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(100))\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .on(\"tick\", ticked);\r\n\r\n    const link = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"links\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"stroke-width\", 2);\r\n\r\n    const node = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"nodes\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 20)\r\n      .attr(\"fill\", \"#4CAF50\");\r\n\r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n    }\r\n\r\n    return () => simulation.stop();\r\n  }, [nodes, edges]);\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>Graph Visualization</h1>\r\n      <textarea\r\n        onChange={handleInputChange}\r\n        value={input}\r\n        placeholder=\"Enter edges (e.g., '0 1')\"\r\n      ></textarea>\r\n      <button onClick={bfs}>BFS</button>\r\n      <button onClick={dfs}>DFS</button>\r\n      <button onClick={topologicalSort}>Topological Sort</button>\r\n      <button onClick={mst}>MST</button>\r\n      <svg ref={svgRef} width=\"700\" height=\"350\"></svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}