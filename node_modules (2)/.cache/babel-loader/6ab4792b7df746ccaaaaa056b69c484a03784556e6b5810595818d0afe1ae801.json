{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport db from './assets/Download_button.png';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\n  const [treeData, setTreeData] = useState(null);\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\n  const [bfsQueue, setBfsQueue] = useState([]);\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n  const bfsTraversalWithQueue = node => {\n    setIsBfsRunning(true);\n    const queue = [node];\n    const traversal = [];\n    const visualQueue = [];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (current) {\n        traversal.push(current.value);\n        visualQueue.push([...queue.map(n => n.value), current.value]);\n        if (current.left) queue.push(current.left);\n        if (current.right) queue.push(current.right);\n      }\n    }\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < visualQueue.length) {\n        setHighlightedNodes([traversal[index]]);\n        setBfsQueue(visualQueue[index]);\n        index++;\n      } else {\n        clearInterval(interval);\n        setIsBfsRunning(false);\n        setHighlightedNodes([]);\n        setBfsQueue([]);\n      }\n    }, 1500);\n  };\n  const dfsTraversal = node => {\n    const result = [];\n    const dfs = current => {\n      if (!current) return;\n      result.push(current.value);\n      dfs(current.left);\n      dfs(current.right);\n    };\n    dfs(node);\n    return result;\n  };\n  const handleDFSVisualize = () => {\n    const traversal = dfsTraversal(treeData);\n    visualizeTraversal(traversal);\n  };\n  const visualizeTraversal = traversal => {\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < traversal.length) {\n        setHighlightedNodes([traversal[index]]);\n        index++;\n      } else {\n        clearInterval(interval);\n        setHighlightedNodes([]);\n      }\n    }, 1500);\n  };\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\n    if (!node) return null;\n    const horizontalSpacing = 3800 / Math.pow(2, level + 4);\n    const leftChildX = x - horizontalSpacing;\n    const rightChildX = x + horizontalSpacing;\n    const childY = y + 100;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY + 28,\n        x2: x,\n        y2: y,\n        stroke: \"black\",\n        strokeWidth: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"circle-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: \"25\",\n          className: highlightedNodes.includes(node.value) ? \"highlighted-circle\" : \"tree-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          textAnchor: \"middle\",\n          dy: \"5\",\n          fill: \"white\",\n          fontWeight: \"bold\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y), node.right && renderTree(node.right, rightChildX, childY, level + 1, x, y)]\n    }, void 0, true);\n  };\n  const handleBFSVisualize = () => {\n    if (!isBfsRunning && treeData) {\n      bfsTraversalWithQueue(treeData);\n    } else if (isBfsRunning) {\n      alert(\"BFS is already running. Please wait for it to finish.\");\n    } else {\n      alert(\"Please visualize the tree first.\");\n    }\n  };\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-download-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"input-box\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleDownload,\n        \"aria-label\": \"Download\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: db,\n          alt: \"Download\",\n          className: \"download-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 3\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bfs-button\",\n        onClick: handleBFSVisualize,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: handleDFSVisualize,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: handleDFSVisualize,\n        children: \"Inorder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: handleDFSVisualize,\n        children: \"Preorder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: handleDFSVisualize,\n        children: \"Postorder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"queue-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"queue-title\",\n        children: [\"BFS Queue:\", \" \", bfsQueue.map((value, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `queue-inline-item ${highlightedNodes.includes(value) ? \"red-queue-item\" : \"\"}`,\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: \"0 0 1000 530\",\n        children: treeData && renderTree(treeData, 500, 50, 0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"AG3a37a/v1I2Z7z6+mGZmFl/UzY=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","db","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","highlightedNodes","setHighlightedNodes","bfsQueue","setBfsQueue","isBfsRunning","setIsBfsRunning","buildTree","arr","length","nodes","map","value","left","right","i","j","bfsTraversalWithQueue","node","queue","traversal","visualQueue","current","shift","push","n","index","interval","setInterval","clearInterval","dfsTraversal","result","dfs","handleDFSVisualize","visualizeTraversal","handleVisualize","parsedArray","JSON","parse","error","alert","renderTree","x","y","level","parentX","parentY","horizontalSpacing","Math","pow","leftChildX","rightChildX","childY","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","cx","cy","r","includes","textAnchor","dy","fill","fontWeight","handleBFSVisualize","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","onChange","e","target","placeholder","onClick","src","alt","id","viewBox","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\nimport db from './assets/Download_button.png' ;\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n  const [bfsQueue, setBfsQueue] = useState([]);\r\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\r\n\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n\r\n    const nodes = arr.map((value) =>\r\n      value !== null ? { value, left: null, right: null } : null\r\n    );\r\n\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n\r\n    return nodes[0];\r\n  };\r\n\r\n  const bfsTraversalWithQueue = (node) => {\r\n    setIsBfsRunning(true);\r\n    const queue = [node];\r\n    const traversal = [];\r\n    const visualQueue = [];\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      if (current) {\r\n        traversal.push(current.value);\r\n        visualQueue.push([...queue.map((n) => n.value), current.value]);\r\n        if (current.left) queue.push(current.left);\r\n        if (current.right) queue.push(current.right);\r\n      }\r\n    }\r\n\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < visualQueue.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n        setBfsQueue(visualQueue[index]);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setIsBfsRunning(false);\r\n        setHighlightedNodes([]);\r\n        setBfsQueue([]);\r\n      }\r\n    }, 1500);\r\n  };\r\n\r\n  const dfsTraversal = (node) => {\r\n    const result = [];\r\n    const dfs = (current) => {\r\n      if (!current) return;\r\n      result.push(current.value);\r\n      dfs(current.left);\r\n      dfs(current.right);\r\n    };\r\n    dfs(node);\r\n    return result;\r\n  };\r\n\r\n  const handleDFSVisualize = () => {\r\n    const traversal = dfsTraversal(treeData);\r\n    visualizeTraversal(traversal);\r\n  };\r\n\r\n  const visualizeTraversal = (traversal) => {\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < traversal.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setHighlightedNodes([]);\r\n      }\r\n    }, 1500);\r\n  };\r\n\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    const horizontalSpacing = 3800 / Math.pow(2, level + 4);\r\n    const leftChildX = x - horizontalSpacing;\r\n    const rightChildX = x + horizontalSpacing;\r\n    const childY = y + 100;\r\n\r\n    return (\r\n      <>\r\n        {parentX !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY + 28}\r\n            x2={x}\r\n            y2={y}\r\n            stroke=\"black\"\r\n            strokeWidth=\"3\"\r\n          />\r\n        )}\r\n        <g className=\"circle-group\">\r\n          <circle\r\n            cx={x}\r\n            cy={y}\r\n            r=\"25\"\r\n            className={\r\n              highlightedNodes.includes(node.value)\r\n                ? \"highlighted-circle\"\r\n                : \"tree-circle\"\r\n            }\r\n          />\r\n          <text\r\n            x={x}\r\n            y={y}\r\n            textAnchor=\"middle\"\r\n            dy=\"5\"\r\n            fill=\"white\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n        {node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y)}\r\n        {node.right &&\r\n          renderTree(node.right, rightChildX, childY, level + 1, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const handleBFSVisualize = () => {\r\n    if (!isBfsRunning && treeData) {\r\n      bfsTraversalWithQueue(treeData);\r\n    } else if (isBfsRunning) {\r\n      alert(\"BFS is already running. Please wait for it to finish.\");\r\n    } else {\r\n      alert(\"Please visualize the tree first.\");\r\n    }\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          className=\"input-box\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n        />\r\n       <button className=\"download-button\" onClick={handleDownload} aria-label=\"Download\">\r\n  <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n</button>\r\n\r\n      </div>\r\n\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"bfs-button\" onClick={handleBFSVisualize}>\r\n          BFS\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={handleDFSVisualize}>\r\n          DFS\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={handleDFSVisualize}>\r\n          Inorder\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={handleDFSVisualize}>\r\n          Preorder\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={handleDFSVisualize}>\r\n          Postorder\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"queue-container\">\r\n        <h3 className=\"queue-title\">\r\n          BFS Queue:{\" \"}\r\n          {bfsQueue.map((value, index) => (\r\n            <span\r\n              key={index}\r\n              className={`queue-inline-item ${\r\n                highlightedNodes.includes(value) ? \"red-queue-item\" : \"\"\r\n              }`}\r\n            >\r\n              {value}\r\n            </span>\r\n          ))}\r\n        </h3>\r\n      </div>\r\n\r\n      <div className=\"canvas-container\">\r\n        <svg id=\"treeCanvas\" className=\"tree-canvas\" viewBox=\"0 0 1000 530\">\r\n          {treeData && renderTree(treeData, 500, 50, 0)}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}