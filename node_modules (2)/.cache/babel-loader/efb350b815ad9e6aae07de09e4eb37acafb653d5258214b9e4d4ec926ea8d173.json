{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1, [2, [4], [5, [6]]], [3]]');\n  const [treeData, setTreeData] = useState(null);\n  const [levels, setLevels] = useState([]); // 2D vector to hold tree levels\n\n  // Function to build the tree and populate levels (2D vector)\n  const buildTreeAndLevels = (arr, level = 0, levelsArr = []) => {\n    if (!arr || arr.length === 0) return null;\n    const [value, ...children] = arr;\n    const node = {\n      value,\n      children: []\n    };\n\n    // Ensure the levels array has enough space\n    if (!levelsArr[level]) levelsArr[level] = [];\n    levelsArr[level].push(value);\n\n    // Recursively build children and populate levels\n    node.children = children.map(child => buildTreeAndLevels(child, level + 1, levelsArr));\n    return node;\n  };\n\n  // Handle \"Visualize Tree\" button click\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      const levelsArr = [];\n      const tree = buildTreeAndLevels(parsedArray, 0, levelsArr);\n      setTreeData(tree);\n      setLevels(levelsArr); // Set the 2D vector for visualization/debugging\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid nested array.\");\n    }\n  };\n\n  // Recursive function to render the N-ary tree nodes and lines\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\n    if (!node) return null;\n\n    // Dynamically calculate horizontal spacing based on the level and the number of children\n    const horizontalSpacing = 3800 / Math.pow(2, level + 3); // Adjust spacing as depth increases\n    const childY = y + 100;\n\n    // Calculate positions of children dynamically\n    const numChildren = node.children ? node.children.length : 0;\n    const startX = x - horizontalSpacing * (numChildren - 1) / 2;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY + 30,\n        x2: x,\n        y2: y - 10,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"circle-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: \"25\",\n          className: \"tree-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          textAnchor: \"middle\",\n          dy: \"5\",\n          fill: \"white\",\n          fontWeight: \"bold\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), node.children && node.children.map((child, index) => {\n        const childX = startX + index * horizontalSpacing; // Spread children evenly\n        return renderTree(child, childX, childY, level + 1, x, y);\n      })]\n    }, void 0, true);\n  };\n\n  // Handle \"Download Tree\" button click\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"N-ary Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input-box\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter a nested array, e.g., [1, [2, [4], [5, [6]]], [3]]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleDownload,\n        children: \"Download Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"levels-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Tree Levels (2D Vector)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(levels, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: \"0 0 1000 600\",\n        children: [treeData && renderTree(treeData, 500, 50, 0), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"U2TwrstzC4XrogX+t8uJ4vCI7Cg=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","levels","setLevels","buildTreeAndLevels","arr","level","levelsArr","length","value","children","node","push","map","child","handleVisualize","parsedArray","JSON","parse","tree","error","alert","renderTree","x","y","parentX","parentY","horizontalSpacing","Math","pow","childY","numChildren","startX","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","cx","cy","r","textAnchor","dy","fill","fontWeight","index","childX","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","onChange","e","target","placeholder","onClick","stringify","id","viewBox","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1, [2, [4], [5, [6]]], [3]]');\r\n  const [treeData, setTreeData] = useState(null);\r\n  const [levels, setLevels] = useState([]); // 2D vector to hold tree levels\r\n\r\n  // Function to build the tree and populate levels (2D vector)\r\n  const buildTreeAndLevels = (arr, level = 0, levelsArr = []) => {\r\n    if (!arr || arr.length === 0) return null;\r\n\r\n    const [value, ...children] = arr;\r\n    const node = { value, children: [] };\r\n\r\n    // Ensure the levels array has enough space\r\n    if (!levelsArr[level]) levelsArr[level] = [];\r\n    levelsArr[level].push(value);\r\n\r\n    // Recursively build children and populate levels\r\n    node.children = children.map((child) =>\r\n      buildTreeAndLevels(child, level + 1, levelsArr)\r\n    );\r\n\r\n    return node;\r\n  };\r\n\r\n  // Handle \"Visualize Tree\" button click\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      const levelsArr = [];\r\n      const tree = buildTreeAndLevels(parsedArray, 0, levelsArr);\r\n      setTreeData(tree);\r\n      setLevels(levelsArr); // Set the 2D vector for visualization/debugging\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid nested array.\");\r\n    }\r\n  };\r\n\r\n  // Recursive function to render the N-ary tree nodes and lines\r\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    // Dynamically calculate horizontal spacing based on the level and the number of children\r\n    const horizontalSpacing = 3800 / Math.pow(2, level + 3); // Adjust spacing as depth increases\r\n    const childY = y + 100;\r\n\r\n    // Calculate positions of children dynamically\r\n    const numChildren = node.children ? node.children.length : 0;\r\n    const startX = x - (horizontalSpacing * (numChildren - 1)) / 2;\r\n\r\n    return (\r\n      <>\r\n        {/* Draw line to parent node */}\r\n        {parentX !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY + 30}\r\n            x2={x}\r\n            y2={y - 10}\r\n            stroke=\"black\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        )}\r\n\r\n        {/* Draw current node */}\r\n        <g className=\"circle-group\">\r\n          <circle cx={x} cy={y} r=\"25\" className=\"tree-circle\" />\r\n          <text x={x} y={y} textAnchor=\"middle\" dy=\"5\" fill=\"white\" fontWeight=\"bold\">\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n\r\n        {/* Render child nodes recursively */}\r\n        {node.children &&\r\n          node.children.map((child, index) => {\r\n            const childX = startX + index * horizontalSpacing; // Spread children evenly\r\n            return renderTree(child, childX, childY, level + 1, x, y);\r\n          })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  // Handle \"Download Tree\" button click\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">N-ary Tree Visualizer</h1>\r\n\r\n      {/* Textarea for input */}\r\n      <textarea\r\n        className=\"input-box\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter a nested array, e.g., [1, [2, [4], [5, [6]]], [3]]\"\r\n      />\r\n\r\n      {/* Buttons for actions */}\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"download-button\" onClick={handleDownload}>\r\n          Download Tree\r\n        </button>\r\n      </div>\r\n\r\n      {/* 2D Vector Levels Display */}\r\n      <div className=\"levels-container\">\r\n        <h2>Tree Levels (2D Vector)</h2>\r\n        <pre>{JSON.stringify(levels, null, 2)}</pre>\r\n      </div>\r\n\r\n      {/* Canvas for rendering the tree */}\r\n      <div className=\"canvas-container\">\r\n        <svg id=\"treeCanvas\" className=\"tree-canvas\" viewBox=\"0 0 1000 600\">\r\n          {treeData && renderTree(treeData, 500, 50, 0)} {/* Root starts at center */}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}