{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\n  const [topoSortResult, setTopoSortResult] = useState(\"\");\n  const [shortestPathResult, setShortestPathResult] = useState(\"\");\n  const [shortestPathInput, setShortestPathInput] = useState({\n    startNode: \"\",\n    endNode: \"\"\n  });\n  const svgRef = useRef();\n  const graphContainerRef = useRef(); // Ref for the graph container\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.source === edge.source && e.target === edge.target || e.source === edge.target && e.target === edge.source));\n      setNodes(newNodes);\n      setEdges(uniqueEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const findShortestPath = () => {\n    const {\n      startNode,\n      endNode\n    } = shortestPathInput;\n    if (!startNode || !endNode) {\n      setError(\"Please provide both start and end nodes.\");\n      return;\n    }\n    const graph = new Map();\n\n    // Build adjacency list with weights\n    edges.forEach(({\n      source,\n      target,\n      weight\n    }) => {\n      if (!graph.has(source)) graph.set(source, []);\n      graph.get(source).push({\n        node: target,\n        weight\n      });\n      if (!isDirected) {\n        if (!graph.has(target)) graph.set(target, []);\n        graph.get(target).push({\n          node: source,\n          weight\n        });\n      }\n    });\n\n    // Dijkstra's Algorithm\n    const distances = {};\n    const previousNodes = {};\n    const unvisited = new Set(nodes.map(node => node.id));\n    nodes.forEach(({\n      id\n    }) => {\n      distances[id] = id === startNode ? 0 : Infinity;\n      previousNodes[id] = null;\n    });\n    while (unvisited.size) {\n      const current = [...unvisited].reduce((a, b) => distances[a] < distances[b] ? a : b);\n      if (distances[current] === Infinity) break;\n      unvisited.delete(current);\n      if (current === endNode) break;\n      const neighbors = graph.get(current) || [];\n      neighbors.forEach(({\n        node: neighbor,\n        weight\n      }) => {\n        const alt = distances[current] + (weight || 1); // Default weight is 1\n        if (alt < distances[neighbor]) {\n          distances[neighbor] = alt;\n          previousNodes[neighbor] = current;\n        }\n      });\n    }\n\n    // Reconstruct the shortest path\n    let path = [];\n    let currentNode = endNode;\n    while (currentNode) {\n      path.unshift(currentNode);\n      currentNode = previousNodes[currentNode];\n    }\n    if (path[0] !== startNode) {\n      setError(`No path exists between ${startNode} and ${endNode}.`);\n      setShortestPathResult(\"\");\n    } else {\n      setError(\"\");\n      setShortestPathResult(path.join(\" â†’ \"));\n    }\n  };\n\n  // The rest of your component remains the same\n};\n_s(GraphVisualization, \"FZ5aEzvaYw/9K9pq/VIluKtih0Y=\");\n_c = GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","Set","topoSortResult","setTopoSortResult","shortestPathResult","setShortestPathResult","shortestPathInput","setShortestPathInput","startNode","endNode","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","uniqueEdges","filter","edge","index","self","findIndex","message","findShortestPath","graph","Map","has","set","get","distances","previousNodes","unvisited","map","Infinity","size","current","reduce","a","b","delete","neighbors","neighbor","alt","path","currentNode","unshift","join","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\r\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\r\n  const [topoSortResult, setTopoSortResult] = useState(\"\");\r\n  const [shortestPathResult, setShortestPathResult] = useState(\"\");\r\n  const [shortestPathInput, setShortestPathInput] = useState({\r\n    startNode: \"\",\r\n    endNode: \"\",\r\n  });\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef(); // Ref for the graph container\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n  \r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\r\n        }\r\n  \r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n  \r\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n  \r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n  \r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (e) =>\r\n              (e.source === edge.source && e.target === edge.target) ||\r\n              (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n  \r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const findShortestPath = () => {\r\n    const { startNode, endNode } = shortestPathInput;\r\n\r\n    if (!startNode || !endNode) {\r\n      setError(\"Please provide both start and end nodes.\");\r\n      return;\r\n    }\r\n\r\n    const graph = new Map();\r\n\r\n    // Build adjacency list with weights\r\n    edges.forEach(({ source, target, weight }) => {\r\n      if (!graph.has(source)) graph.set(source, []);\r\n      graph.get(source).push({ node: target, weight });\r\n      if (!isDirected) {\r\n        if (!graph.has(target)) graph.set(target, []);\r\n        graph.get(target).push({ node: source, weight });\r\n      }\r\n    });\r\n\r\n    // Dijkstra's Algorithm\r\n    const distances = {};\r\n    const previousNodes = {};\r\n    const unvisited = new Set(nodes.map((node) => node.id));\r\n\r\n    nodes.forEach(({ id }) => {\r\n      distances[id] = id === startNode ? 0 : Infinity;\r\n      previousNodes[id] = null;\r\n    });\r\n\r\n    while (unvisited.size) {\r\n      const current = [...unvisited].reduce((a, b) =>\r\n        distances[a] < distances[b] ? a : b\r\n      );\r\n\r\n      if (distances[current] === Infinity) break;\r\n\r\n      unvisited.delete(current);\r\n\r\n      if (current === endNode) break;\r\n\r\n      const neighbors = graph.get(current) || [];\r\n      neighbors.forEach(({ node: neighbor, weight }) => {\r\n        const alt = distances[current] + (weight || 1); // Default weight is 1\r\n        if (alt < distances[neighbor]) {\r\n          distances[neighbor] = alt;\r\n          previousNodes[neighbor] = current;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Reconstruct the shortest path\r\n    let path = [];\r\n    let currentNode = endNode;\r\n    while (currentNode) {\r\n      path.unshift(currentNode);\r\n      currentNode = previousNodes[currentNode];\r\n    }\r\n\r\n    if (path[0] !== startNode) {\r\n      setError(`No path exists between ${startNode} and ${endNode}.`);\r\n      setShortestPathResult(\"\");\r\n    } else {\r\n      setError(\"\");\r\n      setShortestPathResult(path.join(\" â†’ \"));\r\n    }\r\n  };\r\n\r\n  // The rest of your component remains the same\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}