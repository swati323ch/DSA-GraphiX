{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\n  const [treeData, setTreeData] = useState(null);\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\n  const [bfsQueue, setBfsQueue] = useState([]);\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\n\n  // Function to build the tree from level-order input\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n\n  // BFS Traversal with Queue Visualization\n  const bfsTraversalWithQueue = node => {\n    setIsBfsRunning(true); // Set BFS running state to true\n    const queue = [node];\n    const traversal = [];\n    const visualQueue = [];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (current) {\n        traversal.push(current.value);\n        visualQueue.push([...queue.map(n => n.value), current.value]);\n        if (current.left) queue.push(current.left);\n        if (current.right) queue.push(current.right);\n      }\n    }\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < visualQueue.length) {\n        setHighlightedNodes([traversal[index]]);\n        setBfsQueue(visualQueue[index]);\n        index++;\n      } else {\n        clearInterval(interval);\n        setIsBfsRunning(false); // Set BFS running state to false\n        setHighlightedNodes([]);\n        setBfsQueue([]);\n      }\n    }, 1500); // 1500ms interval for each step\n  };\n\n  // DFS Traversal\n  const dfsTraversal = node => {\n    const result = [];\n    const dfs = current => {\n      if (!current) return;\n      result.push(current.value);\n      dfs(current.left);\n      dfs(current.right);\n    };\n    dfs(node);\n    return result;\n  };\n\n  // Handle DFS Visualization\n  const handleDFSVisualize = () => {\n    const traversal = dfsTraversal(treeData);\n    visualizeTraversal(traversal);\n  };\n\n  // Visualize Traversal (for both BFS and DFS)\n  const visualizeTraversal = traversal => {\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < traversal.length) {\n        setHighlightedNodes([traversal[index]]);\n        index++;\n      } else {\n        clearInterval(interval);\n        setHighlightedNodes([]);\n      }\n    }, 1500);\n  };\n\n  // Handle Tree Visualization\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n\n  // Calculate tree dimensions for dynamic SVG viewBox\n  const calculateTreeDimensions = (node, level = 0) => {\n    if (!node) return {\n      maxDepth: level,\n      maxWidth: Math.pow(2, level)\n    };\n    const leftDimensions = calculateTreeDimensions(node.left, level + 1);\n    const rightDimensions = calculateTreeDimensions(node.right, level + 1);\n    return {\n      maxDepth: Math.max(leftDimensions.maxDepth, rightDimensions.maxDepth),\n      maxWidth: Math.max(leftDimensions.maxWidth, rightDimensions.maxWidth)\n    };\n  };\n\n  // Recursive rendering of the tree\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\n    if (!node) return null;\n    const horizontalSpacing = Math.max(200 / (level + 1), 40); // Minimum spacing of 40px\n    const leftChildX = x - horizontalSpacing;\n    const rightChildX = x + horizontalSpacing;\n    const childY = y + 100; // Vertical spacing between levels\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY + 28,\n        x2: x,\n        y2: y - 28,\n        stroke: \"black\",\n        strokeWidth: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"circle-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: \"25\",\n          className: highlightedNodes.includes(node.value) ? \"highlighted-circle\" : \"tree-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          textAnchor: \"middle\",\n          dy: \"5\",\n          fill: \"white\",\n          fontWeight: \"bold\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y), node.right && renderTree(node.right, rightChildX, childY, level + 1, x, y)]\n    }, void 0, true);\n  };\n\n  // BFS Visualization Handler\n  const handleBFSVisualize = () => {\n    if (!isBfsRunning && treeData) {\n      bfsTraversalWithQueue(treeData);\n    } else if (isBfsRunning) {\n      alert(\"BFS is already running. Please wait for it to finish.\");\n    } else {\n      alert(\"Please visualize the tree first.\");\n    }\n  };\n\n  // Download Tree as SVG\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n\n  // Calculate SVG dimensions dynamically\n  const dimensions = treeData ? calculateTreeDimensions(treeData) : {\n    maxDepth: 1,\n    maxWidth: 1\n  };\n  const svgWidth = Math.max(1000, dimensions.maxWidth * 5); // Adjust based on node spacing\n  const svgHeight = Math.max(600, dimensions.maxDepth * 120); // 120px per level\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input-box\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleDownload,\n        children: \"Download Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bfs-button\",\n        onClick: handleBFSVisualize,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dfs-button\",\n        onClick: handleDFSVisualize,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"queue-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"queue-title\",\n        children: [\"BFS Queue:\", \" \", bfsQueue.map((value, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `queue-inline-item ${highlightedNodes.includes(value) ? \"red-queue-item\" : \"\"}`,\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: `0 0 ${svgWidth} ${svgHeight}`,\n        style: {\n          width: `${svgWidth}px`,\n          height: `${svgHeight}px`\n        },\n        children: treeData && renderTree(treeData, svgWidth / 2, 50, 0)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"AG3a37a/v1I2Z7z6+mGZmFl/UzY=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","highlightedNodes","setHighlightedNodes","bfsQueue","setBfsQueue","isBfsRunning","setIsBfsRunning","buildTree","arr","length","nodes","map","value","left","right","i","j","bfsTraversalWithQueue","node","queue","traversal","visualQueue","current","shift","push","n","index","interval","setInterval","clearInterval","dfsTraversal","result","dfs","handleDFSVisualize","visualizeTraversal","handleVisualize","parsedArray","JSON","parse","error","alert","calculateTreeDimensions","level","maxDepth","maxWidth","Math","pow","leftDimensions","rightDimensions","max","renderTree","x","y","parentX","parentY","horizontalSpacing","leftChildX","rightChildX","childY","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","cx","cy","r","includes","textAnchor","dy","fill","fontWeight","handleBFSVisualize","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","dimensions","svgWidth","svgHeight","onChange","e","target","placeholder","onClick","id","viewBox","style","width","height","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n  const [bfsQueue, setBfsQueue] = useState([]);\r\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\r\n\r\n  // Function to build the tree from level-order input\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n\r\n    const nodes = arr.map((value) =>\r\n      value !== null ? { value, left: null, right: null } : null\r\n    );\r\n\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n\r\n    return nodes[0];\r\n  };\r\n\r\n  // BFS Traversal with Queue Visualization\r\n  const bfsTraversalWithQueue = (node) => {\r\n    setIsBfsRunning(true); // Set BFS running state to true\r\n    const queue = [node];\r\n    const traversal = [];\r\n    const visualQueue = [];\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      if (current) {\r\n        traversal.push(current.value);\r\n        visualQueue.push([...queue.map((n) => n.value), current.value]);\r\n        if (current.left) queue.push(current.left);\r\n        if (current.right) queue.push(current.right);\r\n      }\r\n    }\r\n\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < visualQueue.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n        setBfsQueue(visualQueue[index]);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setIsBfsRunning(false); // Set BFS running state to false\r\n        setHighlightedNodes([]);\r\n        setBfsQueue([]);\r\n      }\r\n    }, 1500); // 1500ms interval for each step\r\n  };\r\n\r\n  // DFS Traversal\r\n  const dfsTraversal = (node) => {\r\n    const result = [];\r\n    const dfs = (current) => {\r\n      if (!current) return;\r\n      result.push(current.value);\r\n      dfs(current.left);\r\n      dfs(current.right);\r\n    };\r\n    dfs(node);\r\n    return result;\r\n  };\r\n\r\n  // Handle DFS Visualization\r\n  const handleDFSVisualize = () => {\r\n    const traversal = dfsTraversal(treeData);\r\n    visualizeTraversal(traversal);\r\n  };\r\n\r\n  // Visualize Traversal (for both BFS and DFS)\r\n  const visualizeTraversal = (traversal) => {\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < traversal.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setHighlightedNodes([]);\r\n      }\r\n    }, 1500);\r\n  };\r\n\r\n  // Handle Tree Visualization\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  // Calculate tree dimensions for dynamic SVG viewBox\r\n  const calculateTreeDimensions = (node, level = 0) => {\r\n    if (!node) return { maxDepth: level, maxWidth: Math.pow(2, level) };\r\n\r\n    const leftDimensions = calculateTreeDimensions(node.left, level + 1);\r\n    const rightDimensions = calculateTreeDimensions(node.right, level + 1);\r\n\r\n    return {\r\n      maxDepth: Math.max(leftDimensions.maxDepth, rightDimensions.maxDepth),\r\n      maxWidth: Math.max(leftDimensions.maxWidth, rightDimensions.maxWidth),\r\n    };\r\n  };\r\n\r\n  // Recursive rendering of the tree\r\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    const horizontalSpacing = Math.max(200 / (level + 1), 40); // Minimum spacing of 40px\r\n    const leftChildX = x - horizontalSpacing;\r\n    const rightChildX = x + horizontalSpacing;\r\n    const childY = y + 100; // Vertical spacing between levels\r\n\r\n    return (\r\n      <>\r\n        {parentX !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY + 28}\r\n            x2={x}\r\n            y2={y - 28}\r\n            stroke=\"black\"\r\n            strokeWidth=\"3\"\r\n          />\r\n        )}\r\n        <g className=\"circle-group\">\r\n          <circle\r\n            cx={x}\r\n            cy={y}\r\n            r=\"25\"\r\n            className={\r\n              highlightedNodes.includes(node.value)\r\n                ? \"highlighted-circle\"\r\n                : \"tree-circle\"\r\n            }\r\n          />\r\n          <text\r\n            x={x}\r\n            y={y}\r\n            textAnchor=\"middle\"\r\n            dy=\"5\"\r\n            fill=\"white\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n        {node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y)}\r\n        {node.right &&\r\n          renderTree(node.right, rightChildX, childY, level + 1, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  // BFS Visualization Handler\r\n  const handleBFSVisualize = () => {\r\n    if (!isBfsRunning && treeData) {\r\n      bfsTraversalWithQueue(treeData);\r\n    } else if (isBfsRunning) {\r\n      alert(\"BFS is already running. Please wait for it to finish.\");\r\n    } else {\r\n      alert(\"Please visualize the tree first.\");\r\n    }\r\n  };\r\n\r\n  // Download Tree as SVG\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  // Calculate SVG dimensions dynamically\r\n  const dimensions = treeData\r\n    ? calculateTreeDimensions(treeData)\r\n    : { maxDepth: 1, maxWidth: 1 };\r\n  const svgWidth = Math.max(1000, dimensions.maxWidth * 5); // Adjust based on node spacing\r\n  const svgHeight = Math.max(600, dimensions.maxDepth * 120); // 120px per level\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n\r\n      <textarea\r\n        className=\"input-box\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n      />\r\n\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"download-button\" onClick={handleDownload}>\r\n          Download Tree\r\n        </button>\r\n        <button className=\"bfs-button\" onClick={handleBFSVisualize}>\r\n          BFS\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={handleDFSVisualize}>\r\n          DFS\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"queue-container\">\r\n        <h3 className=\"queue-title\">\r\n          BFS Queue:{\" \"}\r\n          {bfsQueue.map((value, index) => (\r\n            <span\r\n              key={index}\r\n              className={`queue-inline-item ${\r\n                highlightedNodes.includes(value) ? \"red-queue-item\" : \"\"\r\n              }`}\r\n            >\r\n              {value}\r\n            </span>\r\n          ))}\r\n        </h3>\r\n      </div>\r\n\r\n      <div className=\"canvas-container\">\r\n        <svg\r\n          id=\"treeCanvas\"\r\n          className=\"tree-canvas\"\r\n          viewBox={`0 0 ${svgWidth} ${svgHeight}`}\r\n          style={{ width: `${svgWidth}px`, height: `${svgHeight}px` }}\r\n        >\r\n          {treeData && renderTree(treeData, svgWidth / 2, 50, 0)}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}