{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\InsertionSort.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InsertionSort() {\n  _s();\n  const [array, setArray] = useState([]);\n  const [isPaused, setIsPaused] = useState(false);\n  const [status, setStatus] = useState('');\n  const [i, setI] = useState(1);\n  const [currentTimeouts, setCurrentTimeouts] = useState([]);\n  let j = 0;\n\n  // Reset sorting state\n  const resetSortingState = () => {\n    setIsPaused(false);\n    currentTimeouts.forEach(timeout => clearTimeout(timeout)); // Clear all timeouts\n    setCurrentTimeouts([]);\n    setArray([]);\n    setI(1);\n    setStatus('');\n  };\n  const togglePause = () => {\n    setIsPaused(prev => !prev);\n    if (isPaused) {\n      continueSorting();\n    } else {\n      currentTimeouts.forEach(timeout => clearTimeout(timeout));\n      setCurrentTimeouts([]);\n    }\n  };\n  const continueSorting = () => {\n    step();\n  };\n  const step = () => {\n    if (isPaused) return;\n    if (i >= array.length) {\n      setStatus('Sorting complete!');\n      return;\n    }\n    let key = array[i];\n    j = i - 1;\n\n    // Highlight and display sorting status\n    setStatus(`Sorting element ${key}...`);\n    setI(prevI => prevI + 1);\n\n    // Continue inner loop step\n    innerStep();\n  };\n  const innerStep = () => {\n    if (isPaused) return;\n    if (j >= 0 && array[j] > array[i]) {\n      array[j + 1] = array[j];\n      setArray([...array]);\n      j--;\n      setTimeout(innerStep, 1500);\n    } else {\n      array[j + 1] = array[i];\n      setArray([...array]);\n      setStatus(`Inserted ${array[i]} at position ${j + 1}`);\n      step();\n    }\n  };\n  const startSorting = () => {\n    resetSortingState();\n    const arrayInput = prompt(\"Enter numbers separated by space\");\n    const parsedArray = arrayInput.split(' ').map(Number);\n    setArray(parsedArray);\n    setI(1);\n    setStatus('');\n    step();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Insertion Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startSorting,\n      children: \"Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePause,\n      children: isPaused ? \"Resume\" : \"Pause\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"visualization\",\n      children: array.map((num, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"box\",\n        children: num\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(InsertionSort, \"PZ6lhqC+OqFrhJHSoU5mxGUR+YE=\");\n_c = InsertionSort;\nexport default InsertionSort;\nvar _c;\n$RefreshReg$(_c, \"InsertionSort\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","InsertionSort","_s","array","setArray","isPaused","setIsPaused","status","setStatus","i","setI","currentTimeouts","setCurrentTimeouts","j","resetSortingState","forEach","timeout","clearTimeout","togglePause","prev","continueSorting","step","length","key","prevI","innerStep","setTimeout","startSorting","arrayInput","prompt","parsedArray","split","map","Number","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","num","idx","className","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/InsertionSort.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction InsertionSort() {\r\n  const [array, setArray] = useState([]);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [status, setStatus] = useState('');\r\n  const [i, setI] = useState(1);\r\n  const [currentTimeouts, setCurrentTimeouts] = useState([]);\r\n  let j = 0;\r\n\r\n  // Reset sorting state\r\n  const resetSortingState = () => {\r\n    setIsPaused(false);\r\n    currentTimeouts.forEach(timeout => clearTimeout(timeout));  // Clear all timeouts\r\n    setCurrentTimeouts([]);\r\n    setArray([]);\r\n    setI(1);\r\n    setStatus('');\r\n  };\r\n\r\n  const togglePause = () => {\r\n    setIsPaused(prev => !prev);\r\n    if (isPaused) {\r\n      continueSorting();\r\n    } else {\r\n      currentTimeouts.forEach(timeout => clearTimeout(timeout));\r\n      setCurrentTimeouts([]);\r\n    }\r\n  };\r\n\r\n  const continueSorting = () => {\r\n    step();\r\n  };\r\n\r\n  const step = () => {\r\n    if (isPaused) return;\r\n    \r\n    if (i >= array.length) {\r\n      setStatus('Sorting complete!');\r\n      return;\r\n    }\r\n\r\n    let key = array[i];\r\n    j = i - 1;\r\n\r\n    // Highlight and display sorting status\r\n    setStatus(`Sorting element ${key}...`);\r\n\r\n    setI(prevI => prevI + 1);\r\n\r\n    // Continue inner loop step\r\n    innerStep();\r\n  };\r\n\r\n  const innerStep = () => {\r\n    if (isPaused) return;\r\n\r\n    if (j >= 0 && array[j] > array[i]) {\r\n      array[j + 1] = array[j];\r\n      setArray([...array]);\r\n      j--;\r\n      setTimeout(innerStep, 1500);\r\n    } else {\r\n      array[j + 1] = array[i];\r\n      setArray([...array]);\r\n      setStatus(`Inserted ${array[i]} at position ${j + 1}`);\r\n      step();\r\n    }\r\n  };\r\n\r\n  const startSorting = () => {\r\n    resetSortingState();\r\n    const arrayInput = prompt(\"Enter numbers separated by space\");\r\n    const parsedArray = arrayInput.split(' ').map(Number);\r\n    setArray(parsedArray);\r\n    setI(1);\r\n    setStatus('');\r\n    step();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Insertion Sort</h1>\r\n      <button onClick={startSorting}>Sort</button>\r\n      <button onClick={togglePause}>{isPaused ? \"Resume\" : \"Pause\"}</button>\r\n      <div id=\"visualization\">\r\n        {array.map((num, idx) => (\r\n          <div key={idx} className=\"box\">{num}</div>\r\n        ))}\r\n      </div>\r\n      <div>{status}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InsertionSort;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}