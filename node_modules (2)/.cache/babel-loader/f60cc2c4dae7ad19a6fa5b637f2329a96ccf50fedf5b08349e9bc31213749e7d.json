{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ForceGraph2D from \"react-force-graph-2d\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualizer = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [links, setLinks] = useState([]);\n  const [isDirected, setIsDirected] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleParseInput = () => {\n    const lines = input.split(\"\\n\").map(line => line.trim());\n    const newNodes = [];\n    const newLinks = [];\n    lines.forEach(line => {\n      const parts = line.split(\" \").map(item => item.trim());\n      if (parts.length === 1) {\n        // It's a node\n        const nodeId = parts[0];\n        if (!newNodes.some(node => node.id === nodeId)) {\n          newNodes.push({\n            id: nodeId\n          });\n        }\n      } else if (parts.length >= 2) {\n        // It's an edge\n        const [source, target, weight] = parts;\n        newLinks.push({\n          source,\n          target,\n          weight: weight ? parseFloat(weight) : 1 // default weight is 1\n        });\n      }\n    });\n    setNodes(newNodes);\n    setLinks(newLinks);\n  };\n  const toggleGraphType = type => {\n    setIsDirected(type === \"directed\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Enter nodes and edges...\",\n        rows: 10,\n        cols: 30\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleParseInput,\n        children: \"Parse Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleGraphType(\"directed\"),\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => toggleGraphType(\"undirected\"),\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      graphData: {\n        nodes,\n        links: isDirected ? links : links.filter((link, index, self) => self.findIndex(l => l.source === link.target && l.target === link.source || l.source === link.source && l.target === link.target) === index)\n      },\n      nodeAutoColorBy: \"id\",\n      linkDirectionalArrowLength: link => isDirected ? 10 : 0,\n      linkDirectionalArrowRelPos: 1,\n      linkWidth: link => link.weight || 1,\n      linkLabel: link => `Source: ${link.source}\\nTarget: ${link.target}\\nWeight: ${link.weight || 1}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualizer, \"BGMrjcekQaelDx4HlrKbE9uOXeA=\");\n_c = GraphVisualizer;\nexport default GraphVisualizer;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualizer\");","map":{"version":3,"names":["React","useState","ForceGraph2D","jsxDEV","_jsxDEV","GraphVisualizer","_s","nodes","setNodes","links","setLinks","isDirected","setIsDirected","input","setInput","handleInputChange","e","target","value","handleParseInput","lines","split","map","line","trim","newNodes","newLinks","forEach","parts","item","length","nodeId","some","node","id","push","source","weight","parseFloat","toggleGraphType","type","children","style","marginBottom","onChange","placeholder","rows","cols","fileName","_jsxFileName","lineNumber","columnNumber","onClick","graphData","filter","link","index","self","findIndex","l","nodeAutoColorBy","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkWidth","linkLabel","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\n\r\nconst GraphVisualizer = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [links, setLinks] = useState([]);\r\n  const [isDirected, setIsDirected] = useState(false);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleParseInput = () => {\r\n    const lines = input.split(\"\\n\").map((line) => line.trim());\r\n    const newNodes = [];\r\n    const newLinks = [];\r\n\r\n    lines.forEach((line) => {\r\n      const parts = line.split(\" \").map((item) => item.trim());\r\n      if (parts.length === 1) {\r\n        // It's a node\r\n        const nodeId = parts[0];\r\n        if (!newNodes.some((node) => node.id === nodeId)) {\r\n          newNodes.push({ id: nodeId });\r\n        }\r\n      } else if (parts.length >= 2) {\r\n        // It's an edge\r\n        const [source, target, weight] = parts;\r\n        newLinks.push({\r\n          source,\r\n          target,\r\n          weight: weight ? parseFloat(weight) : 1, // default weight is 1\r\n        });\r\n      }\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setLinks(newLinks);\r\n  };\r\n\r\n  const toggleGraphType = (type) => {\r\n    setIsDirected(type === \"directed\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ marginBottom: \"10px\" }}>\r\n        <textarea\r\n          value={input}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Enter nodes and edges...\"\r\n          rows={10}\r\n          cols={30}\r\n        />\r\n        <button onClick={handleParseInput}>Parse Input</button>\r\n      </div>\r\n\r\n      <div style={{ marginBottom: \"10px\" }}>\r\n        <button onClick={() => toggleGraphType(\"directed\")}>Directed</button>\r\n        <button onClick={() => toggleGraphType(\"undirected\")}>Undirected</button>\r\n      </div>\r\n\r\n      <ForceGraph2D\r\n        graphData={{\r\n          nodes,\r\n          links: isDirected\r\n            ? links\r\n            : links.filter((link, index, self) =>\r\n                self.findIndex(\r\n                  (l) =>\r\n                    (l.source === link.target && l.target === link.source) ||\r\n                    (l.source === link.source && l.target === link.target)\r\n                ) === index\r\n              ),\r\n        }}\r\n        nodeAutoColorBy=\"id\"\r\n        linkDirectionalArrowLength={(link) => (isDirected ? 10 : 0)}\r\n        linkDirectionalArrowRelPos={1}\r\n        linkWidth={(link) => link.weight || 1}\r\n        linkLabel={(link) =>\r\n          `Source: ${link.source}\\nTarget: ${link.target}\\nWeight: ${\r\n            link.weight || 1\r\n          }`\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}