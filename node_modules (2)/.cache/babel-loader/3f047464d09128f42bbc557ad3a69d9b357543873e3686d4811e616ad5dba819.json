{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\n  const [treeData, setTreeData] = useState(null);\n\n  // Function to build the tree from a level-order array\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n\n  // Handle \"Visualize Tree\" button click\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n\n  // Recursive function to render the tree nodes and lines\n  const renderTree = (node, x, y, level, maxLevels, totalNodes, parentX = null, parentY = null) => {\n    if (!node) return null;\n    const radius = 30; // Circle radius\n    const canvasWidth = 1000; // Total canvas width\n    const canvasHeight = 600; // Total canvas height\n    const verticalSpacing = canvasHeight / (maxLevels + 1); // Dynamically calculated vertical spacing\n\n    // Calculate horizontal spacing based on the number of nodes and current level\n    const maxHorizontalSpacing = canvasWidth / (totalNodes + 1); // Distribute nodes evenly across width\n    const horizontalSpacing = Math.max(maxHorizontalSpacing / Math.pow(2, level),\n    // Reduced spacing as level increases\n    2 * radius + 20 // Minimum spacing to prevent overlap\n    );\n    const leftChildX = x - horizontalSpacing / 2;\n    const rightChildX = x + horizontalSpacing / 2;\n    const childY = y + verticalSpacing;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY + radius,\n        x2: x,\n        y2: y - radius,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"circle-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: radius,\n          className: \"tree-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          textAnchor: \"middle\",\n          dy: \"5\",\n          fill: \"white\",\n          fontWeight: \"bold\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), node.left && renderTree(node.left, leftChildX, childY, level + 1, maxLevels, totalNodes, x, y), node.right && renderTree(node.right, rightChildX, childY, level + 1, maxLevels, totalNodes, x, y)]\n    }, void 0, true);\n  };\n\n  // Calculate the maximum depth of the tree\n  const calculateMaxDepth = node => {\n    if (!node) return 0;\n    return 1 + Math.max(calculateMaxDepth(node.left), calculateMaxDepth(node.right));\n  };\n\n  // Handle \"Download Tree\" button click\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input-box\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleDownload,\n        children: \"Download Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: \"0 0 1000 600\",\n        children: treeData && renderTree(treeData, 500, 50, 0, calculateMaxDepth(treeData), JSON.parse(input).length)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"JCi5CyM2mjadiQNJ69F/xKnB+Vc=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","buildTree","arr","length","nodes","map","value","left","right","i","j","handleVisualize","parsedArray","JSON","parse","error","alert","renderTree","node","x","y","level","maxLevels","totalNodes","parentX","parentY","radius","canvasWidth","canvasHeight","verticalSpacing","maxHorizontalSpacing","horizontalSpacing","Math","max","pow","leftChildX","rightChildX","childY","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","cx","cy","r","textAnchor","dy","fill","fontWeight","calculateMaxDepth","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","onChange","e","target","placeholder","onClick","id","viewBox","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n\r\n  // Function to build the tree from a level-order array\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n\r\n    const nodes = arr.map((value) => (value !== null ? { value, left: null, right: null } : null));\r\n\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n\r\n    return nodes[0];\r\n  };\r\n\r\n  // Handle \"Visualize Tree\" button click\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  // Recursive function to render the tree nodes and lines\r\n  const renderTree = (node, x, y, level, maxLevels, totalNodes, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    const radius = 30; // Circle radius\r\n    const canvasWidth = 1000; // Total canvas width\r\n    const canvasHeight = 600; // Total canvas height\r\n    const verticalSpacing = canvasHeight / (maxLevels + 1); // Dynamically calculated vertical spacing\r\n\r\n    // Calculate horizontal spacing based on the number of nodes and current level\r\n    const maxHorizontalSpacing = canvasWidth / (totalNodes + 1); // Distribute nodes evenly across width\r\n    const horizontalSpacing = Math.max(\r\n      maxHorizontalSpacing / Math.pow(2, level), // Reduced spacing as level increases\r\n      2 * radius + 20 // Minimum spacing to prevent overlap\r\n    );\r\n\r\n    const leftChildX = x - horizontalSpacing / 2;\r\n    const rightChildX = x + horizontalSpacing / 2;\r\n    const childY = y + verticalSpacing;\r\n\r\n    return (\r\n      <>\r\n        {/* Line connecting to parent */}\r\n        {parentX !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY + radius}\r\n            x2={x}\r\n            y2={y - radius}\r\n            stroke=\"black\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        )}\r\n        {/* Circle and text */}\r\n        <g className=\"circle-group\">\r\n          <circle cx={x} cy={y} r={radius} className=\"tree-circle\" />\r\n          <text x={x} y={y} textAnchor=\"middle\" dy=\"5\" fill=\"white\" fontWeight=\"bold\">\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n        {node.left && renderTree(node.left, leftChildX, childY, level + 1, maxLevels, totalNodes, x, y)}\r\n        {node.right && renderTree(node.right, rightChildX, childY, level + 1, maxLevels, totalNodes, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  // Calculate the maximum depth of the tree\r\n  const calculateMaxDepth = (node) => {\r\n    if (!node) return 0;\r\n    return 1 + Math.max(calculateMaxDepth(node.left), calculateMaxDepth(node.right));\r\n  };\r\n\r\n  // Handle \"Download Tree\" button click\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n\r\n      {/* Textarea for input */}\r\n      <textarea\r\n        className=\"input-box\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n      />\r\n\r\n      {/* Buttons for actions */}\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"download-button\" onClick={handleDownload}>\r\n          Download Tree\r\n        </button>\r\n      </div>\r\n\r\n      {/* Canvas for rendering the tree */}\r\n      <div className=\"canvas-container\">\r\n        <svg id=\"treeCanvas\" className=\"tree-canvas\" viewBox=\"0 0 1000 600\">\r\n          {treeData &&\r\n            renderTree(treeData, 500, 50, 0, calculateMaxDepth(treeData), JSON.parse(input).length)}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}