{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./GraphVisualization.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]); // List of nodes\n  const [edges, setEdges] = useState([]); // List of edges\n  const [input, setInput] = useState(\"\"); // Input state for edge list\n  const [error, setError] = useState(\"\"); // Error state for validation\n  const [isDirected, setIsDirected] = useState(true); // Toggle between Directed and Undirected\n\n  const svgRef = useRef(); // Reference to the SVG element\n\n  // Handle the input change\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value); // Validate input on change\n  };\n\n  // Validate and update graph data\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const [from, to] = line.trim().split(\" \");\n        if (from === undefined || to === undefined || isNaN(from) || isNaN(to)) {\n          throw new Error(\"Invalid input format! Each line must have two integers.\");\n        }\n\n        // Ensure nodes are unique\n        if (!newNodes.some(node => node.id === from)) {\n          newNodes.push({\n            id: from\n          });\n        }\n        if (!newNodes.some(node => node.id === to)) {\n          newNodes.push({\n            id: to\n          });\n        }\n\n        // Add directed edge\n        newEdges.push({\n          source: from,\n          target: to\n        });\n\n        // If undirected, add both the edge and its reverse edge\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from\n          });\n        }\n      });\n\n      // Remove duplicate edges in undirected mode (e.g., if both 0->1 and 1->0 exist, only keep one)\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.source === edge.source && e.target === edge.target || e.source === edge.target && e.target === edge.source));\n\n      // Update states\n      setNodes(newNodes);\n      setEdges(uniqueEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  // Draw the graph using D3\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove(); // Clear previous graph\n\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 600;\n    const height = 400;\n\n    // Create a simulation with forces\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(100)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).on(\"tick\", ticked);\n\n    // Define arrowhead marker at the start of the svg\n    svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 25) // Ensure it's placed properly\n    .attr(\"refY\", 0).attr(\"orient\", \"auto\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).attr(\"xoverflow\", \"visible\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#42a5f5\");\n\n    // Add links (edges)\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2).attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null); // Apply marker for directed edges\n\n    // Add nodes\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"#4CAF50\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).call(d3.drag().on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\", dragEnded));\n\n    // Add labels\n    const label = svg.append(\"g\").attr(\"class\", \"labels\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \".35em\").attr(\"fill\", \"white\");\n\n    // Tick handler\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n    }\n\n    // Drag event handlers\n    function dragStarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragEnded(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n    return () => simulation.stop();\n  }, [nodes, edges, isDirected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(true);\n          validateInput(input); // Re-validate input to update graph\n        },\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${!isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(false);\n          validateInput(input); // Re-validate input to update graph\n        },\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: `Enter edges (e.g., \"0 1\" or \"1 2\") one per line`,\n      onChange: handleInputChange,\n      className: \"input-container\",\n      value: input,\n      rows: \"5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"600\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"kqwVBTfvoPIN9NV/pDZJMXooUWM=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","svgRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","from","to","undefined","isNaN","Error","some","node","id","push","source","uniqueEdges","filter","edge","index","self","findIndex","message","svg","select","current","selectAll","remove","length","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","on","ticked","append","attr","link","data","enter","call","drag","dragStarted","dragged","dragEnded","label","text","x","y","event","active","alphaTarget","restart","fx","fy","stop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","rows","ref","style","border","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport \"./GraphVisualization.css\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]); // List of nodes\r\n  const [edges, setEdges] = useState([]); // List of edges\r\n  const [input, setInput] = useState(\"\"); // Input state for edge list\r\n  const [error, setError] = useState(\"\"); // Error state for validation\r\n  const [isDirected, setIsDirected] = useState(true); // Toggle between Directed and Undirected\r\n\r\n  const svgRef = useRef(); // Reference to the SVG element\r\n\r\n  // Handle the input change\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value); // Validate input on change\r\n  };\r\n\r\n  // Validate and update graph data\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n\r\n      lines.forEach((line) => {\r\n        const [from, to] = line.trim().split(\" \");\r\n\r\n        if (from === undefined || to === undefined || isNaN(from) || isNaN(to)) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers.\");\r\n        }\r\n\r\n        // Ensure nodes are unique\r\n        if (!newNodes.some((node) => node.id === from)) {\r\n          newNodes.push({ id: from });\r\n        }\r\n        if (!newNodes.some((node) => node.id === to)) {\r\n          newNodes.push({ id: to });\r\n        }\r\n\r\n        // Add directed edge\r\n        newEdges.push({ source: from, target: to });\r\n\r\n        // If undirected, add both the edge and its reverse edge\r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from });\r\n        }\r\n      });\r\n\r\n      // Remove duplicate edges in undirected mode (e.g., if both 0->1 and 1->0 exist, only keep one)\r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index === self.findIndex((e) =>\r\n            (e.source === edge.source && e.target === edge.target) ||\r\n            (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n\r\n      // Update states\r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  // Draw the graph using D3\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove(); // Clear previous graph\r\n\r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n    const width = 600;\r\n    const height = 400;\r\n\r\n    // Create a simulation with forces\r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(100))\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .on(\"tick\", ticked);\r\n\r\n    // Define arrowhead marker at the start of the svg\r\n    svg.append(\"defs\").append(\"marker\")\r\n      .attr(\"id\", \"arrowhead\")\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 25) // Ensure it's placed properly\r\n      .attr(\"refY\", 0)\r\n      .attr(\"orient\", \"auto\")\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .attr(\"xoverflow\", \"visible\")\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#42a5f5\");\r\n\r\n    // Add links (edges)\r\n    const link = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"links\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null); // Apply marker for directed edges\r\n\r\n    // Add nodes\r\n    const node = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"nodes\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 20)\r\n      .attr(\"fill\", \"#4CAF50\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"stroke-width\", 2)\r\n      .call(\r\n        d3\r\n          .drag()\r\n          .on(\"start\", dragStarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragEnded)\r\n      );\r\n\r\n    // Add labels\r\n    const label = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"labels\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d.id)\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \".35em\")\r\n      .attr(\"fill\", \"white\");\r\n\r\n    // Tick handler\r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n    }\r\n\r\n    // Drag event handlers\r\n    function dragStarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n\r\n    function dragEnded(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n\r\n    return () => simulation.stop();\r\n  }, [nodes, edges, isDirected]);\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n\r\n      {/* Buttons for toggling between directed and undirected */}\r\n      <div className=\"button-container\">\r\n        <button\r\n          className={`toggle-button ${isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(true);\r\n            validateInput(input); // Re-validate input to update graph\r\n          }}\r\n        >\r\n          Directed\r\n        </button>\r\n        <button\r\n          className={`toggle-button ${!isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(false);\r\n            validateInput(input); // Re-validate input to update graph\r\n          }}\r\n        >\r\n          Undirected\r\n        </button>\r\n      </div>\r\n\r\n      <textarea\r\n        placeholder={`Enter edges (e.g., \"0 1\" or \"1 2\") one per line`}\r\n        onChange={handleInputChange}\r\n        className=\"input-container\"\r\n        value={input}\r\n        rows=\"5\"\r\n      ></textarea>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      <div className=\"graph-display\">\r\n        <svg ref={svgRef} width=\"600\" height=\"400\" style={{ border: \"1px solid black\" }}></svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}