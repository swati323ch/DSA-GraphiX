{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./GraphVisualization.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [positions, setPositions] = useState({});\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\"); // Error state to display error message\n\n  // Debounce function to handle input validation after typing\n  const debounce = (func, delay) => {\n    let timeout;\n    return (...args) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func(...args), delay);\n    };\n  };\n\n  // Handle input change\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n\n    // Trigger validation after a delay\n    validateInput(value);\n  };\n\n  // Validate the input (adjacency list) after the user finishes typing\n  const validateInput = debounce(input => {\n    try {\n      const adjList = JSON.parse(input);\n\n      // Validate if the input is an array of arrays\n      if (!Array.isArray(adjList) || adjList.some(item => !Array.isArray(item))) {\n        setError(\"Invalid format! Please enter a valid adjacency list.\");\n        return;\n      }\n\n      // Prepare nodes and edges\n      const parsedNodes = adjList.map((_, index) => ({\n        id: index.toString() // Use index as node ID\n      }));\n      const parsedEdges = [];\n      adjList.forEach((neighbors, from) => {\n        neighbors.forEach(to => {\n          parsedEdges.push({\n            from: from.toString(),\n            to: to.toString()\n          });\n        });\n      });\n\n      // Generate random positions for each node\n      const newPositions = {};\n      parsedNodes.forEach(node => {\n        newPositions[node.id] = {\n          x: Math.random() * 500 + 50,\n          y: Math.random() * 300 + 50\n        };\n      });\n      setNodes(parsedNodes);\n      setEdges(parsedEdges);\n      setPositions(newPositions);\n      setError(\"\"); // Clear error if input is valid\n    } catch (error) {\n      setError(\"Invalid JSON! Please provide a valid adjacency list.\");\n    }\n  }, 1000); // Delay of 1 second after typing stops\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Graph Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter adjacency list as JSON (e.g., [[1], [0, 2, 4], [1, 3, 4], [2], [1, 2]])\",\n      onChange: handleInputChange,\n      className: \"input-container\",\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"600\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        },\n        children: [edges.map((edge, index) => {\n          const fromPos = positions[edge.from];\n          const toPos = positions[edge.to];\n          if (!fromPos || !toPos) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromPos.x,\n            y1: fromPos.y,\n            x2: toPos.x,\n            y2: toPos.y,\n            stroke: \"#333\",\n            strokeWidth: 2\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this);\n        }), nodes.map(node => {\n          const pos = positions[node.id];\n          if (!pos) return null;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: pos.x,\n              cy: pos.y,\n              r: 30,\n              fill: \"#4CAF50\",\n              stroke: \"black\",\n              strokeWidth: 3,\n              children: /*#__PURE__*/_jsxDEV(\"title\", {\n                children: node.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: pos.x,\n              y: pos.y,\n              fontSize: \"16\",\n              fontWeight: \"bold\",\n              textAnchor: \"middle\",\n              fill: \"white\",\n              dy: \".3em\" // Vertically center the text\n              ,\n              children: node.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this)]\n          }, node.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"IKUsu0TLRdxcYH2pMME+NuUjZts=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","positions","setPositions","input","setInput","error","setError","debounce","func","delay","timeout","args","clearTimeout","setTimeout","handleInputChange","e","value","target","validateInput","adjList","JSON","parse","Array","isArray","some","item","parsedNodes","map","_","index","id","toString","parsedEdges","forEach","neighbors","from","to","push","newPositions","node","x","Math","random","y","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","width","height","style","border","edge","fromPos","toPos","x1","y1","x2","y2","stroke","strokeWidth","pos","cx","cy","r","fill","fontSize","fontWeight","textAnchor","dy","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./GraphVisualization.css\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [positions, setPositions] = useState({});\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\"); // Error state to display error message\r\n\r\n  // Debounce function to handle input validation after typing\r\n  const debounce = (func, delay) => {\r\n    let timeout;\r\n    return (...args) => {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => func(...args), delay);\r\n    };\r\n  };\r\n\r\n  // Handle input change\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n\r\n    // Trigger validation after a delay\r\n    validateInput(value);\r\n  };\r\n\r\n  // Validate the input (adjacency list) after the user finishes typing\r\n  const validateInput = debounce((input) => {\r\n    try {\r\n      const adjList = JSON.parse(input);\r\n\r\n      // Validate if the input is an array of arrays\r\n      if (!Array.isArray(adjList) || adjList.some(item => !Array.isArray(item))) {\r\n        setError(\"Invalid format! Please enter a valid adjacency list.\");\r\n        return;\r\n      }\r\n\r\n      // Prepare nodes and edges\r\n      const parsedNodes = adjList.map((_, index) => ({\r\n        id: index.toString(), // Use index as node ID\r\n      }));\r\n      const parsedEdges = [];\r\n\r\n      adjList.forEach((neighbors, from) => {\r\n        neighbors.forEach((to) => {\r\n          parsedEdges.push({\r\n            from: from.toString(),\r\n            to: to.toString(),\r\n          });\r\n        });\r\n      });\r\n\r\n      // Generate random positions for each node\r\n      const newPositions = {};\r\n      parsedNodes.forEach((node) => {\r\n        newPositions[node.id] = {\r\n          x: Math.random() * 500 + 50,\r\n          y: Math.random() * 300 + 50,\r\n        };\r\n      });\r\n\r\n      setNodes(parsedNodes);\r\n      setEdges(parsedEdges);\r\n      setPositions(newPositions);\r\n      setError(\"\"); // Clear error if input is valid\r\n    } catch (error) {\r\n      setError(\"Invalid JSON! Please provide a valid adjacency list.\");\r\n    }\r\n  }, 1000); // Delay of 1 second after typing stops\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>Graph Visualization</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder='Enter adjacency list as JSON (e.g., [[1], [0, 2, 4], [1, 3, 4], [2], [1, 2]])'\r\n        onChange={handleInputChange}\r\n        className=\"input-container\"\r\n        value={input}\r\n      />\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>} {/* Display error message if any */}\r\n\r\n      <div className=\"graph-display\">\r\n        <svg width=\"600\" height=\"400\" style={{ border: \"1px solid black\" }}>\r\n          {/* Render edges */}\r\n          {edges.map((edge, index) => {\r\n            const fromPos = positions[edge.from];\r\n            const toPos = positions[edge.to];\r\n\r\n            if (!fromPos || !toPos) return null;\r\n\r\n            return (\r\n              <line\r\n                key={index}\r\n                x1={fromPos.x}\r\n                y1={fromPos.y}\r\n                x2={toPos.x}\r\n                y2={toPos.y}\r\n                stroke=\"#333\"\r\n                strokeWidth={2}\r\n              />\r\n            );\r\n          })}\r\n\r\n          {/* Render nodes */}\r\n          {nodes.map((node) => {\r\n            const pos = positions[node.id];\r\n            if (!pos) return null;\r\n\r\n            return (\r\n              <g key={node.id}>\r\n                <circle\r\n                  cx={pos.x}\r\n                  cy={pos.y}\r\n                  r={30}\r\n                  fill=\"#4CAF50\"\r\n                  stroke=\"black\"\r\n                  strokeWidth={3}\r\n                >\r\n                  <title>{node.id}</title>\r\n                </circle>\r\n                {/* Render the node's name inside the circle */}\r\n                <text\r\n                  x={pos.x}\r\n                  y={pos.y}\r\n                  fontSize=\"16\"\r\n                  fontWeight=\"bold\"\r\n                  textAnchor=\"middle\"\r\n                  fill=\"white\"\r\n                  dy=\".3em\"  // Vertically center the text\r\n                >\r\n                  {node.id}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}