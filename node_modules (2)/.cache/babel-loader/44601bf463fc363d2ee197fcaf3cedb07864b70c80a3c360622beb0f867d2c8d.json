{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\n  const [topoSortResult, setTopoSortResult] = useState(\"\");\n  const [shortestPathResult, setShortestPathResult] = useState(\"\");\n  const [showShortestPathInputs, setShowShortestPathInputs] = useState(false);\n  const [shortestPathInput, setShortestPathInput] = useState({\n    startNode: \"\",\n    endNode: \"\"\n  });\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\n  const svgRef = useRef();\n  const graphContainerRef = useRef(); // Ref for the graph container\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n\n        // Handle optional weight\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.source === edge.source && e.target === edge.target || e.source === edge.target && e.target === edge.source));\n      setNodes(newNodes);\n      setEdges(uniqueEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const downloadGraph = () => {\n    if (graphContainerRef.current) {\n      toPng(graphContainerRef.current).then(dataUrl => {\n        const link = document.createElement(\"a\");\n        link.download = \"graph_visualization.png\";\n        link.href = dataUrl;\n        link.click();\n      }).catch(err => {\n        console.error(\"Failed to download graph as PNG:\", err);\n      });\n    }\n  };\n  const handleBFS = () => {\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\n    const queue = [startNode];\n    const visited = new Set();\n    visited.add(startNode);\n    const bfsTraversal = (prevNode = null) => {\n      if (queue.length === 0) {\n        // Remove highlight for the last processed node\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n        return;\n      }\n      const currentNode = queue.shift(); // Dequeue node\n      setQueueState(prevQueueState => [...prevQueueState, currentNode]);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n\n      // Remove highlight for the previously processed node\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n\n      // Highlight the current node\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n\n      // Find neighbors by comparing ids, as edges have source/target as objects\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => edge.source.id === currentNode ? edge.target.id : edge.source.id);\n      neighbors.forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push(neighbor);\n        }\n      });\n      setTimeout(() => bfsTraversal(currentNode), 500); // Delay for visualization\n    };\n    bfsTraversal(); // Start the BFS traversal\n    setShowShortestPathInputs(false);\n  };\n  const handleDFS = () => {\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\n    const visited = new Set();\n    const dfsTraversal = (currentNode, prevNode = null) => {\n      if (visited.has(currentNode)) return;\n      visited.add(currentNode);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n\n      // Remove highlight for the previously processed node\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n\n      // Highlight the current node\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n\n      // Find neighbors\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => edge.source.id === currentNode ? edge.target.id : edge.source.id);\n\n      // Delay for visualization and recursively explore neighbors\n      setTimeout(() => {\n        neighbors.forEach(neighbor => {\n          if (!visited.has(neighbor)) {\n            dfsTraversal(neighbor, currentNode);\n          }\n        });\n\n        // After exploring all neighbors, remove highlight from the current node\n        if (!neighbors.length && prevNode !== null) {\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\n        }\n      }, 500);\n    };\n    dfsTraversal(startNode); // Start DFS traversal\n    setShowShortestPathInputs(false);\n  };\n  const handleTopoSort = () => {\n    // Step 1: Calculate in-degrees for each node\n    const inDegree = {};\n    nodes.forEach(node => {\n      inDegree[node.id] = 0;\n    });\n    edges.forEach(edge => {\n      inDegree[edge.target.id] = (inDegree[edge.target.id] || 0) + 1;\n    });\n\n    // Step 2: Initialize the queue with nodes having in-degree of 0\n    const queue = [];\n    nodes.forEach(node => {\n      if (inDegree[node.id] === 0) {\n        queue.push(node.id);\n      }\n    });\n    let topologicalOrder = [];\n    let visitedCount = 0;\n\n    // Step 3: Process nodes in the queue\n    while (queue.length > 0) {\n      const currentNode = queue.shift(); // Dequeue node\n\n      topologicalOrder.push(currentNode); // Add it to topological order\n      visitedCount++;\n\n      // Find all neighbors (edges) of the current node and decrease their in-degree\n      edges.forEach(edge => {\n        if (edge.source.id === currentNode) {\n          const neighbor = edge.target.id;\n          inDegree[neighbor]--;\n\n          // If in-degree of neighbor becomes 0, add it to the queue\n          if (inDegree[neighbor] === 0) {\n            queue.push(neighbor);\n          }\n        }\n      });\n      setShowShortestPathInputs(false);\n    }\n\n    // Step 4: Check if there was a cycle (graph is not a DAG)\n    if (visitedCount !== nodes.length) {\n      setError(\"The graph is not a Directed Acyclic Graph (DAG). Topological Sort not possible.\");\n      return;\n    }\n\n    // Step 5: Display the topological order\n    setError(\"\"); // Clear previous errors\n    setTopoSortResult(topologicalOrder.join(\" â†’ \"));\n  };\n  const handleGetPath = () => {\n    setShowShortestPathInputs(true); // Show the input fields\n  };\n  const findShortestPath = () => {\n    const {\n      startNode,\n      endNode\n    } = shortestPathInput;\n\n    // Validate input\n    if (!startNode || !endNode) {\n      setError(\"Please provide both start and end nodes.\");\n      setShortestPathResult(\"\");\n      setHighlightedNodes([]); // Clear highlighted nodes\n      return;\n    }\n\n    // Build graph adjacency list with weights\n    const graph = new Map();\n    edges.forEach(({\n      source,\n      target,\n      weight\n    }) => {\n      if (!graph.has(source.id)) graph.set(source.id, []);\n      graph.get(source.id).push({\n        node: target.id,\n        weight\n      });\n      if (!isDirected) {\n        if (!graph.has(target.id)) graph.set(target.id, []);\n        graph.get(target.id).push({\n          node: source.id,\n          weight\n        });\n      }\n    });\n\n    // Initialize Dijkstra's algorithm data structures\n    const distances = {};\n    const previousNodes = {};\n    const pq = new Set(nodes.map(node => node.id)); // Priority Queue\n\n    nodes.forEach(({\n      id\n    }) => {\n      distances[id] = id === startNode ? 0 : Infinity;\n      previousNodes[id] = null;\n    });\n\n    // Dijkstra's Algorithm\n    while (pq.size) {\n      // Find the node with the smallest distance\n      const current = [...pq].reduce((a, b) => distances[a] < distances[b] ? a : b);\n      pq.delete(current);\n\n      // If we've reached the end node, stop processing\n      if (current === endNode) break;\n\n      // Process neighbors\n      const neighbors = graph.get(current) || [];\n      neighbors.forEach(({\n        node: neighbor,\n        weight\n      }) => {\n        const alt = distances[current] + weight;\n        if (alt < distances[neighbor]) {\n          distances[neighbor] = alt;\n          previousNodes[neighbor] = current;\n        }\n      });\n    }\n\n    // Reconstruct the shortest path\n    let path = [];\n    let currentNode = endNode;\n    while (currentNode) {\n      path.unshift(currentNode);\n      currentNode = previousNodes[currentNode];\n    }\n\n    // Validate and display the result\n    if (path[0] !== startNode) {\n      setError(`No path exists between ${startNode} and ${endNode}.`);\n      setShortestPathResult(\"\");\n      setHighlightedNodes([]); // Clear highlighted nodes\n    } else {\n      setError(\"\");\n      setShortestPathResult(path.join(\" â†’ \"));\n      setHighlightedNodes(path); // Set highlighted nodes for the shortest path\n\n      // Highlight the nodes in the shortest path\n      path.forEach(nodeId => {\n        d3.select(`.node-${nodeId}`).classed(\"highlighted\", true);\n      });\n\n      // Optionally, add a delay to remove the highlight after a certain time\n      setTimeout(() => {\n        path.forEach(nodeId => {\n          d3.select(`.node-${nodeId}`).classed(\"highlighted\", false);\n        });\n      }, 2000); // Highlight for 2 seconds\n    }\n    setShowShortestPathInputs(false);\n  };\n  const handleMST = () => {\n    if (edges.length === 0 || nodes.length === 0) {\n      setError(\"Graph must have nodes and edges to compute MST.\");\n      return;\n    }\n\n    // Step 1: Sort edges by weight\n    const sortedEdges = [...edges].sort((a, b) => (a.weight || 0) - (b.weight || 0));\n\n    // Step 2: Initialize disjoint sets for union-find\n    const parent = {};\n    const rank = {};\n    nodes.forEach(({\n      id\n    }) => {\n      parent[id] = id;\n      rank[id] = 0;\n    });\n    const find = node => {\n      if (parent[node] !== node) {\n        parent[node] = find(parent[node]);\n      }\n      return parent[node];\n    };\n    const union = (node1, node2) => {\n      const root1 = find(node1);\n      const root2 = find(node2);\n      if (root1 !== root2) {\n        if (rank[root1] > rank[root2]) {\n          parent[root2] = root1;\n        } else if (rank[root1] < rank[root2]) {\n          parent[root1] = root2;\n        } else {\n          parent[root2] = root1;\n          rank[root1] += 1;\n        }\n      }\n    };\n\n    // Step 3: Construct MST\n    const mstEdges = [];\n    sortedEdges.forEach(edge => {\n      if (find(edge.source.id) !== find(edge.target.id)) {\n        mstEdges.push(edge);\n        union(edge.source.id, edge.target.id);\n      }\n    });\n\n    // Highlight MST edges\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\".mst-highlight\").classed(\"mst-highlight\", false); // Reset previous highlights\n\n    mstEdges.forEach(edge => {\n      svg.selectAll(\"line\").filter(d => d.source.id === edge.source.id && d.target.id === edge.target.id).classed(\"mst-highlight\", true);\n    });\n    setError(\"\"); // Clear any previous error\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(true);\n          validateInput(input);\n        },\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${!isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(false);\n          validateInput(input);\n        },\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-download-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: `Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`,\n        onChange: handleInputChange,\n        className: \"input-container\",\n        value: input,\n        rows: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"download-button\",\n          onClick: downloadGraph,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: db,\n            alt: \"Download\",\n            className: \"download-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 438,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"download-txt\",\n          children: \"Download Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphdislpay-button-wraper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"operation-button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleDFS,\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleBFS,\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleTopoSort,\n          children: \"Topo Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"operation_button\",\n            onClick: handleGetPath,\n            children: \"Shortest Path\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 7\n          }, this), showShortestPathInputs && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"shortestpathop\",\n              type: \"text\",\n              placeholder: \"Start Node\",\n              onChange: e => setShortestPathInput({\n                ...shortestPathInput,\n                startNode: e.target.value\n              }),\n              style: {\n                marginLeft: \"10px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"shortestpathop\",\n              type: \"text\",\n              placeholder: \"End Node\",\n              onChange: e => setShortestPathInput({\n                ...shortestPathInput,\n                endNode: e.target.value\n              }),\n              style: {\n                marginLeft: \"10px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: findShortestPath,\n              children: \"Get Path\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleMST,\n          children: \"MST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-display\",\n        ref: graphContainerRef,\n        style: {\n          alignItems: \"flex-end\",\n          overflow: \"auto\",\n          maxWidth: \"69%\",\n          height: \"450px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          ref: svgRef,\n          width: \"1000\",\n          height: \"450\",\n          style: {\n            border: \"1px solid black\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this), topoSortResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"operation-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Topological Sort:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: topoSortResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 9\n    }, this), shortestPathResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"operation-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Shortest Path:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: shortestPathResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"fXhFGnUS5DH5oYhDcou7yrzozc8=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","Fragment","_Fragment","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","Set","topoSortResult","setTopoSortResult","shortestPathResult","setShortestPathResult","showShortestPathInputs","setShowShortestPathInputs","shortestPathInput","setShortestPathInput","startNode","endNode","highlightedNodes","setHighlightedNodes","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","uniqueEdges","filter","edge","index","self","findIndex","message","downloadGraph","current","then","dataUrl","link","document","createElement","download","href","click","catch","err","console","handleBFS","queue","visited","add","bfsTraversal","prevNode","select","classed","currentNode","shift","prevQueueState","prevVisitedNodes","neighbors","map","neighbor","has","setTimeout","handleDFS","dfsTraversal","handleTopoSort","inDegree","topologicalOrder","visitedCount","join","handleGetPath","findShortestPath","graph","Map","set","get","distances","previousNodes","pq","Infinity","size","reduce","a","b","delete","alt","path","unshift","nodeId","handleMST","sortedEdges","sort","parent","rank","find","union","node1","node2","root1","root2","mstEdges","svg","selectAll","d","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","rows","src","type","style","marginLeft","ref","alignItems","overflow","maxWidth","height","width","border","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\r\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\r\n  const [topoSortResult, setTopoSortResult] = useState(\"\");\r\n  const [shortestPathResult, setShortestPathResult] = useState(\"\");\r\n  const [showShortestPathInputs, setShowShortestPathInputs] = useState(false);\r\n  const [shortestPathInput, setShortestPathInput] = useState({\r\n    startNode: \"\",\r\n    endNode: \"\",\r\n  });\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n\r\n\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef(); // Ref for the graph container\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n  \r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\r\n        }\r\n  \r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n  \r\n        // Handle optional weight\r\n        const edgeWeight = weight ? parseInt(weight) : null;  // Set to null if no weight provided\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n  \r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n  \r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (e) =>\r\n              (e.source === edge.source && e.target === edge.target) ||\r\n              (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n  \r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  \r\n\r\n  const downloadGraph = () => {\r\n    if (graphContainerRef.current) {\r\n      toPng(graphContainerRef.current)\r\n        .then((dataUrl) => {\r\n          const link = document.createElement(\"a\");\r\n          link.download = \"graph_visualization.png\";\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to download graph as PNG:\", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  \r\n  \r\n\r\n  const handleBFS = () => {\r\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\r\n    const queue = [startNode];\r\n    const visited = new Set();\r\n    visited.add(startNode);\r\n  \r\n    const bfsTraversal = (prevNode = null) => {\r\n      if (queue.length === 0) {\r\n        // Remove highlight for the last processed node\r\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n        return;\r\n      }\r\n  \r\n      const currentNode = queue.shift(); // Dequeue node\r\n      setQueueState((prevQueueState) => [...prevQueueState, currentNode]);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n  \r\n      // Remove highlight for the previously processed node\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n  \r\n      // Highlight the current node\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n  \r\n      // Find neighbors by comparing ids, as edges have source/target as objects\r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n  \r\n      neighbors.forEach((neighbor) => {\r\n        if (!visited.has(neighbor)) {\r\n          visited.add(neighbor);\r\n          queue.push(neighbor);\r\n        }\r\n      });\r\n  \r\n      setTimeout(() => bfsTraversal(currentNode), 500); // Delay for visualization\r\n    };\r\n  \r\n    bfsTraversal(); // Start the BFS traversal\r\n    setShowShortestPathInputs(false);\r\n  };\r\n  const handleDFS = () => {\r\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\r\n    const visited = new Set();\r\n  \r\n    const dfsTraversal = (currentNode, prevNode = null) => {\r\n      if (visited.has(currentNode)) return;\r\n  \r\n      visited.add(currentNode);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n  \r\n      // Remove highlight for the previously processed node\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n  \r\n      // Highlight the current node\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n  \r\n      // Find neighbors\r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n  \r\n      // Delay for visualization and recursively explore neighbors\r\n      setTimeout(() => {\r\n        neighbors.forEach((neighbor) => {\r\n          if (!visited.has(neighbor)) {\r\n            dfsTraversal(neighbor, currentNode);\r\n          }\r\n        });\r\n  \r\n        // After exploring all neighbors, remove highlight from the current node\r\n        if (!neighbors.length && prevNode !== null) {\r\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\r\n        }\r\n      }, 500);\r\n    };\r\n  \r\n    dfsTraversal(startNode); // Start DFS traversal\r\n    setShowShortestPathInputs(false);\r\n  };\r\n  const handleTopoSort = () => {\r\n    // Step 1: Calculate in-degrees for each node\r\n    const inDegree = {};\r\n    nodes.forEach(node => {\r\n      inDegree[node.id] = 0;\r\n    });\r\n  \r\n    edges.forEach(edge => {\r\n      inDegree[edge.target.id] = (inDegree[edge.target.id] || 0) + 1;\r\n    });\r\n  \r\n    // Step 2: Initialize the queue with nodes having in-degree of 0\r\n    const queue = [];\r\n    nodes.forEach(node => {\r\n      if (inDegree[node.id] === 0) {\r\n        queue.push(node.id);\r\n      }\r\n    });\r\n  \r\n    let topologicalOrder = [];\r\n    let visitedCount = 0;\r\n  \r\n    // Step 3: Process nodes in the queue\r\n    while (queue.length > 0) {\r\n      const currentNode = queue.shift(); // Dequeue node\r\n  \r\n      topologicalOrder.push(currentNode); // Add it to topological order\r\n      visitedCount++;\r\n  \r\n      // Find all neighbors (edges) of the current node and decrease their in-degree\r\n      edges.forEach(edge => {\r\n        if (edge.source.id === currentNode) {\r\n          const neighbor = edge.target.id;\r\n          inDegree[neighbor]--;\r\n  \r\n          // If in-degree of neighbor becomes 0, add it to the queue\r\n          if (inDegree[neighbor] === 0) {\r\n            queue.push(neighbor);\r\n          }\r\n        }\r\n      });\r\n      setShowShortestPathInputs(false);\r\n    }\r\n  \r\n    // Step 4: Check if there was a cycle (graph is not a DAG)\r\n    if (visitedCount !== nodes.length) {\r\n      setError(\"The graph is not a Directed Acyclic Graph (DAG). Topological Sort not possible.\");\r\n      return;\r\n    }\r\n  \r\n    // Step 5: Display the topological order\r\n    setError(\"\"); // Clear previous errors\r\n    setTopoSortResult(topologicalOrder.join(\" â†’ \"));\r\n  };\r\n  \r\n  const handleGetPath = () => {\r\n    setShowShortestPathInputs(true); // Show the input fields\r\n  };\r\n  const findShortestPath = () => {\r\n    const { startNode, endNode } = shortestPathInput;\r\n  \r\n    // Validate input\r\n    if (!startNode || !endNode) {\r\n      setError(\"Please provide both start and end nodes.\");\r\n      setShortestPathResult(\"\");\r\n      setHighlightedNodes([]); // Clear highlighted nodes\r\n      return;\r\n    }\r\n  \r\n    // Build graph adjacency list with weights\r\n    const graph = new Map();\r\n    edges.forEach(({ source, target, weight }) => {\r\n      if (!graph.has(source.id)) graph.set(source.id, []);\r\n      graph.get(source.id).push({ node: target.id, weight });\r\n      if (!isDirected) {\r\n        if (!graph.has(target.id)) graph.set(target.id, []);\r\n        graph.get(target.id).push({ node: source.id, weight });\r\n      }\r\n    });\r\n  \r\n    // Initialize Dijkstra's algorithm data structures\r\n    const distances = {};\r\n    const previousNodes = {};\r\n    const pq = new Set(nodes.map((node) => node.id)); // Priority Queue\r\n  \r\n    nodes.forEach(({ id }) => {\r\n      distances[id] = id === startNode ? 0 : Infinity;\r\n      previousNodes[id] = null;\r\n    });\r\n  \r\n    // Dijkstra's Algorithm\r\n    while (pq.size) {\r\n      // Find the node with the smallest distance\r\n      const current = [...pq].reduce((a, b) => distances[a] < distances[b] ? a : b);\r\n      pq.delete(current);\r\n  \r\n      // If we've reached the end node, stop processing\r\n      if (current === endNode) break;\r\n  \r\n      // Process neighbors\r\n      const neighbors = graph.get(current) || [];\r\n      neighbors.forEach(({ node: neighbor, weight }) => {\r\n        const alt = distances[current] + weight;\r\n        if (alt < distances[neighbor]) {\r\n          distances[neighbor] = alt;\r\n          previousNodes[neighbor] = current;\r\n        }\r\n      });\r\n    }\r\n  \r\n    // Reconstruct the shortest path\r\n    let path = [];\r\n    let currentNode = endNode;\r\n    while (currentNode) {\r\n      path.unshift(currentNode);\r\n      currentNode = previousNodes[currentNode];\r\n    }\r\n  \r\n    // Validate and display the result\r\n    if (path[0] !== startNode) {\r\n      setError(`No path exists between ${startNode} and ${endNode}.`);\r\n      setShortestPathResult(\"\");\r\n      setHighlightedNodes([]); // Clear highlighted nodes\r\n    } else {\r\n      setError(\"\");\r\n      setShortestPathResult(path.join(\" â†’ \"));\r\n      setHighlightedNodes(path); // Set highlighted nodes for the shortest path\r\n  \r\n      // Highlight the nodes in the shortest path\r\n      path.forEach((nodeId) => {\r\n        d3.select(`.node-${nodeId}`).classed(\"highlighted\", true);\r\n      });\r\n  \r\n      // Optionally, add a delay to remove the highlight after a certain time\r\n      setTimeout(() => {\r\n        path.forEach((nodeId) => {\r\n          d3.select(`.node-${nodeId}`).classed(\"highlighted\", false);\r\n        });\r\n      }, 2000); // Highlight for 2 seconds\r\n    }\r\n    setShowShortestPathInputs(false);\r\n  };\r\n  \r\n  const handleMST = () => {\r\n    if (edges.length === 0 || nodes.length === 0) {\r\n      setError(\"Graph must have nodes and edges to compute MST.\");\r\n      return;\r\n    }\r\n  \r\n    // Step 1: Sort edges by weight\r\n    const sortedEdges = [...edges].sort((a, b) => (a.weight || 0) - (b.weight || 0));\r\n  \r\n    // Step 2: Initialize disjoint sets for union-find\r\n    const parent = {};\r\n    const rank = {};\r\n  \r\n    nodes.forEach(({ id }) => {\r\n      parent[id] = id;\r\n      rank[id] = 0;\r\n    });\r\n  \r\n    const find = (node) => {\r\n      if (parent[node] !== node) {\r\n        parent[node] = find(parent[node]);\r\n      }\r\n      return parent[node];\r\n    };\r\n  \r\n    const union = (node1, node2) => {\r\n      const root1 = find(node1);\r\n      const root2 = find(node2);\r\n  \r\n      if (root1 !== root2) {\r\n        if (rank[root1] > rank[root2]) {\r\n          parent[root2] = root1;\r\n        } else if (rank[root1] < rank[root2]) {\r\n          parent[root1] = root2;\r\n        } else {\r\n          parent[root2] = root1;\r\n          rank[root1] += 1;\r\n        }\r\n      }\r\n    };\r\n  \r\n    // Step 3: Construct MST\r\n    const mstEdges = [];\r\n    sortedEdges.forEach((edge) => {\r\n      if (find(edge.source.id) !== find(edge.target.id)) {\r\n        mstEdges.push(edge);\r\n        union(edge.source.id, edge.target.id);\r\n      }\r\n    });\r\n  \r\n    // Highlight MST edges\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\".mst-highlight\").classed(\"mst-highlight\", false); // Reset previous highlights\r\n  \r\n    mstEdges.forEach((edge) => {\r\n      svg\r\n        .selectAll(\"line\")\r\n        .filter((d) => d.source.id === edge.source.id && d.target.id === edge.target.id)\r\n        .classed(\"mst-highlight\", true);\r\n    });\r\n  \r\n    setError(\"\"); // Clear any previous error\r\n  };\r\n  \r\n  \r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      {/* Title */}\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n  \r\n      {/* Toggle Buttons for Directed/Undirected */}\r\n      <div className=\"button-container\">\r\n        <button\r\n          className={`toggle-button ${isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(true);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Directed\r\n        </button>\r\n        <button\r\n          className={`toggle-button ${!isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(false);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Undirected\r\n        </button>\r\n      </div>\r\n  \r\n      {/* Input and Download Section */}\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          placeholder={`Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`}\r\n          onChange={handleInputChange}\r\n          className=\"input-container\"\r\n          value={input}\r\n          rows=\"5\"\r\n        ></textarea>\r\n  \r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={downloadGraph}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-txt\">Download Graph</p>\r\n        </div>\r\n      </div>\r\n  \r\n      {/* Error Message */}\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n  \r\n      {/* Operations Section */}\r\n      <div className=\"graphdislpay-button-wraper\">\r\n        <div className=\"operation-button-container\">\r\n        <button className=\"operation_button\" onClick={handleDFS}>BFS</button>\r\n          <button className=\"operation_button\" onClick={handleBFS}>DFS</button>\r\n          \r\n          <button className=\"operation_button\" onClick={handleTopoSort}>Topo Sort</button>\r\n          \r\n          {/* Shortest Path Button with Input */}\r\n      <div>\r\n      <button className=\"operation_button\" onClick={handleGetPath}>\r\n        Shortest Path\r\n      </button>\r\n\r\n      {/* Conditionally render the input fields */}\r\n      {showShortestPathInputs && (\r\n        <>\r\n          <input\r\n            className=\"shortestpathop\"\r\n            type=\"text\"\r\n            placeholder=\"Start Node\"\r\n            onChange={(e) =>\r\n              setShortestPathInput({ ...shortestPathInput, startNode: e.target.value })\r\n            }\r\n            style={{ marginLeft: \"10px\" }}\r\n          />\r\n          <input\r\n            className=\"shortestpathop\"\r\n            type=\"text\"\r\n            placeholder=\"End Node\"\r\n            onChange={(e) =>\r\n              setShortestPathInput({ ...shortestPathInput, endNode: e.target.value })\r\n            }\r\n            style={{ marginLeft: \"10px\" }}\r\n          />\r\n          <button onClick={findShortestPath}>Get Path</button>\r\n        </>\r\n      )}\r\n    </div>\r\n          <button className=\"operation_button\" onClick={handleMST}>MST</button>\r\n        </div>\r\n  \r\n        {/* Graph Display */}\r\n        <div\r\n          className=\"graph-display\"\r\n          ref={graphContainerRef}\r\n          style={{\r\n            alignItems: \"flex-end\",\r\n            overflow: \"auto\",\r\n            maxWidth: \"69%\",\r\n            height: \"450px\"\r\n          }}\r\n        >\r\n          <svg ref={svgRef} width=\"1000\" height=\"450\" style={{ border: \"1px solid black\" }}></svg>\r\n        </div>\r\n      </div>\r\n  \r\n      {/* Results Section */}\r\n      {topoSortResult && (\r\n        <div className=\"operation-result\">\r\n          <h3>Topological Sort:</h3>\r\n          <p>{topoSortResult}</p>\r\n        </div>\r\n      )}\r\n  \r\n      {shortestPathResult && (\r\n        <div className=\"operation-result\">\r\n          <h3>Shortest Path:</h3>\r\n          <p>{shortestPathResult}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}