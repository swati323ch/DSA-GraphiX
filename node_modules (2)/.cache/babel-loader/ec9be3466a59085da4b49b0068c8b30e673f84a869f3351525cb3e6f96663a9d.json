{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [startNode, setStartNode] = useState(\"\"); // New state for the starting node\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\n\n  const svgRef = useRef();\n  const graphContainerRef = useRef(); // Ref for the graph container\n  const downloadGraph = () => {\n    if (graphContainerRef.current) {\n      toPng(graphContainerRef.current).then(dataUrl => {\n        const link = document.createElement(\"a\");\n        link.download = \"graph_visualization.png\";\n        link.href = dataUrl;\n        link.click();\n      }).catch(err => {\n        console.error(\"Failed to download graph as PNG:\", err);\n      });\n    }\n  };\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const handleStartNodeChange = e => {\n    setStartNode(e.target.value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n\n        // Handle optional weight\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.source === edge.source && e.target === edge.target || e.source === edge.target && e.target === edge.source));\n      setNodes(newNodes);\n      setEdges(uniqueEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const handleBFS = () => {\n    if (!startNode || !nodes.some(node => node.id === startNode)) {\n      setError(\"Invalid starting node! Please enter a valid node ID.\");\n      return;\n    }\n    const queue = [startNode];\n    const visited = new Set();\n    visited.add(startNode);\n    const bfsTraversal = (prevNode = null) => {\n      if (queue.length === 0) {\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n        return;\n      }\n      const currentNode = queue.shift();\n      setQueueState(prevQueueState => [...prevQueueState, currentNode]);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => edge.source.id === currentNode ? edge.target.id : edge.source.id);\n      neighbors.forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push(neighbor);\n        }\n      });\n      setTimeout(() => bfsTraversal(currentNode), 500);\n    };\n    bfsTraversal();\n  };\n  const handleDFS = () => {\n    if (!startNode || !nodes.some(node => node.id === startNode)) {\n      setError(\"Invalid starting node! Please enter a valid node ID.\");\n      return;\n    }\n    const visited = new Set();\n    const dfsTraversal = (currentNode, prevNode = null) => {\n      if (visited.has(currentNode)) return;\n      visited.add(currentNode);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => edge.source.id === currentNode ? edge.target.id : edge.source.id);\n      setTimeout(() => {\n        neighbors.forEach(neighbor => {\n          if (!visited.has(neighbor)) {\n            dfsTraversal(neighbor, currentNode);\n          }\n        });\n        if (!neighbors.length && prevNode !== null) {\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\n        }\n      }, 500);\n    };\n    dfsTraversal(startNode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(true);\n          validateInput(input);\n        },\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${!isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(false);\n          validateInput(input);\n        },\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-download-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: `Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`,\n        onChange: handleInputChange,\n        className: \"input-container\",\n        value: input,\n        rows: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"download-button\",\n          onClick: downloadGraph,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: db,\n            alt: \"Download\",\n            className: \"download-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"download-txt\",\n          children: \"Download Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"start-node-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter start node ID\",\n        value: startNode,\n        onChange: handleStartNodeChange,\n        className: \"start-node-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"operation-button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"operation_button\",\n        onClick: handleBFS,\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"operation_button\",\n        onClick: handleDFS,\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"operation_button\",\n        children: \"Topo Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"operation_button\",\n        children: \"Shortest Path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"operation_button\",\n        children: \"MST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"operation_button\",\n        children: \"Kruskal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      ref: graphContainerRef,\n      style: {\n        alignItems: \"flex-end\",\n        overflow: \"auto\",\n        maxWidth: \"63%\",\n        height: \"400px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"1000\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"S+Em2d16kLEar+OqMBhxjoyrTfQ=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","startNode","setStartNode","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","Set","svgRef","graphContainerRef","downloadGraph","current","then","dataUrl","link","document","createElement","download","href","click","catch","err","console","handleInputChange","e","value","target","validateInput","handleStartNodeChange","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","uniqueEdges","filter","edge","index","self","findIndex","message","handleBFS","queue","visited","add","bfsTraversal","prevNode","select","classed","currentNode","shift","prevQueueState","prevVisitedNodes","neighbors","map","neighbor","has","setTimeout","handleDFS","dfsTraversal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","rows","src","alt","type","ref","style","alignItems","overflow","maxWidth","height","width","border","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [startNode, setStartNode] = useState(\"\"); // New state for the starting node\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\r\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef(); // Ref for the graph container\r\n  const downloadGraph = () => {\r\n    if (graphContainerRef.current) {\r\n        toPng(graphContainerRef.current)\r\n            .then((dataUrl) => {\r\n                const link = document.createElement(\"a\");\r\n                link.download = \"graph_visualization.png\";\r\n                link.href = dataUrl;\r\n                link.click();\r\n            })\r\n            .catch((err) => {\r\n                console.error(\"Failed to download graph as PNG:\", err);\r\n            });\r\n    }\r\n};\r\n\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const handleStartNodeChange = (e) => {\r\n    setStartNode(e.target.value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n\r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\r\n        }\r\n\r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n\r\n        // Handle optional weight\r\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n\r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n\r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (e) =>\r\n              (e.source === edge.source && e.target === edge.target) ||\r\n              (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n\r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const handleBFS = () => {\r\n    if (!startNode || !nodes.some((node) => node.id === startNode)) {\r\n      setError(\"Invalid starting node! Please enter a valid node ID.\");\r\n      return;\r\n    }\r\n\r\n    const queue = [startNode];\r\n    const visited = new Set();\r\n    visited.add(startNode);\r\n\r\n    const bfsTraversal = (prevNode = null) => {\r\n      if (queue.length === 0) {\r\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n        return;\r\n      }\r\n\r\n      const currentNode = queue.shift();\r\n      setQueueState((prevQueueState) => [...prevQueueState, currentNode]);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n\r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n\r\n      neighbors.forEach((neighbor) => {\r\n        if (!visited.has(neighbor)) {\r\n          visited.add(neighbor);\r\n          queue.push(neighbor);\r\n        }\r\n      });\r\n\r\n      setTimeout(() => bfsTraversal(currentNode), 500);\r\n    };\r\n\r\n    bfsTraversal();\r\n  };\r\n\r\n  const handleDFS = () => {\r\n    if (!startNode || !nodes.some((node) => node.id === startNode)) {\r\n      setError(\"Invalid starting node! Please enter a valid node ID.\");\r\n      return;\r\n    }\r\n\r\n    const visited = new Set();\r\n\r\n    const dfsTraversal = (currentNode, prevNode = null) => {\r\n      if (visited.has(currentNode)) return;\r\n\r\n      visited.add(currentNode);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n\r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n\r\n      setTimeout(() => {\r\n        neighbors.forEach((neighbor) => {\r\n          if (!visited.has(neighbor)) {\r\n            dfsTraversal(neighbor, currentNode);\r\n          }\r\n        });\r\n\r\n        if (!neighbors.length && prevNode !== null) {\r\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\r\n        }\r\n      }, 500);\r\n    };\r\n\r\n    dfsTraversal(startNode);\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n\r\n      <div className=\"button-container\">\r\n        <button\r\n          className={`toggle-button ${isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(true);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Directed\r\n        </button>\r\n        <button\r\n          className={`toggle-button ${!isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(false);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Undirected\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          placeholder={`Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`}\r\n          onChange={handleInputChange}\r\n          className=\"input-container\"\r\n          value={input}\r\n          rows=\"5\"\r\n        ></textarea>\r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={downloadGraph}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-txt\">Download Graph</p>\r\n        </div>\r\n      </div>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      <div className=\"start-node-container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter start node ID\"\r\n          value={startNode}\r\n          onChange={handleStartNodeChange}\r\n          className=\"start-node-input\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"operation-button-container\">\r\n        <button className=\"operation_button\" onClick={handleBFS}>BFS</button>\r\n        <button className=\"operation_button\" onClick={handleDFS}>DFS</button>\r\n        <button className=\"operation_button\">Topo Sort</button>\r\n        <button className=\"operation_button\">Shortest Path</button>\r\n        <button className=\"operation_button\">MST</button>\r\n        <button className=\"operation_button\">Kruskal</button>\r\n      </div>\r\n      \r\n      <div\r\n        className=\"graph-display\"\r\n        ref={graphContainerRef}\r\n        style={{ alignItems: \"flex-end\", overflow: \"auto\", maxWidth: \"63%\", height: \"400px\" }}\r\n      >\r\n        <svg ref={svgRef} width=\"1000\" height=\"400\" style={{ border: \"1px solid black\" }}></svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}