{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\n  const [treeData, setTreeData] = useState(null);\n\n  // Function to build the tree from a level-order array\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n\n  // Handle \"Visualize Tree\" button click\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n\n  // Recursive function to render the tree nodes and lines\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\n    if (!node) return null;\n\n    // Dynamically calculate horizontal spacing based on tree level\n    const horizontalSpacing = Math.pow(200, 1.2) / Math.pow(2, level); // More spacing as depth increases\n    const leftChildX = x - horizontalSpacing;\n    const rightChildX = x + horizontalSpacing;\n    const childY = y + 100;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY + 20,\n        x2: x,\n        y2: y - 20,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"circle-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: \"20\",\n          className: \"tree-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          textAnchor: \"middle\",\n          dy: \"5\",\n          fill: \"white\",\n          fontWeight: \"bold\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y), node.right && renderTree(node.right, rightChildX, childY, level + 1, x, y)]\n    }, void 0, true);\n  };\n\n  // Handle \"Download Tree\" button click\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n\n  // Calculate the tree's overall width and height for SVG viewBox\n  const calculateViewBox = treeData => {\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n    const calculatePositions = (node, x, y, level) => {\n      if (!node) return;\n\n      // Update the bounds of the tree\n      minX = Math.min(minX, x);\n      maxX = Math.max(maxX, x);\n      minY = Math.min(minY, y);\n      maxY = Math.max(maxY, y);\n\n      // Dynamically calculate horizontal spacing based on tree level\n      const horizontalSpacing = Math.pow(200, 1.2) / Math.pow(2, level);\n      const leftChildX = x - horizontalSpacing;\n      const rightChildX = x + horizontalSpacing;\n      const childY = y + 100;\n\n      // Recurse for left and right children\n      calculatePositions(node.left, leftChildX, childY, level + 1);\n      calculatePositions(node.right, rightChildX, childY, level + 1);\n    };\n    calculatePositions(treeData, 500, 50, 0); // Start from center\n\n    const padding = 100;\n    const width = maxX - minX + padding * 2;\n    const height = maxY - minY + padding * 2;\n    return {\n      width,\n      height,\n      viewBoxX: minX - padding,\n      viewBoxY: minY - padding\n    };\n  };\n  const {\n    width,\n    height,\n    viewBoxX,\n    viewBoxY\n  } = treeData ? calculateViewBox(treeData) : {\n    width: 1000,\n    height: 600,\n    viewBoxX: 0,\n    viewBoxY: 0\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input-box\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleDownload,\n        children: \"Download Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: `${viewBoxX} ${viewBoxY} ${width} ${height}`,\n        children: [treeData && renderTree(treeData, 500, 50, 0), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"JCi5CyM2mjadiQNJ69F/xKnB+Vc=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","buildTree","arr","length","nodes","map","value","left","right","i","j","handleVisualize","parsedArray","JSON","parse","error","alert","renderTree","node","x","y","level","parentX","parentY","horizontalSpacing","Math","pow","leftChildX","rightChildX","childY","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","cx","cy","r","textAnchor","dy","fill","fontWeight","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","calculateViewBox","minX","Infinity","maxX","minY","maxY","calculatePositions","min","max","padding","width","height","viewBoxX","viewBoxY","onChange","e","target","placeholder","onClick","id","viewBox","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n\r\n  // Function to build the tree from a level-order array\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n\r\n    const nodes = arr.map((value) => (value !== null ? { value, left: null, right: null } : null));\r\n\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n\r\n    return nodes[0];\r\n  };\r\n\r\n  // Handle \"Visualize Tree\" button click\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  // Recursive function to render the tree nodes and lines\r\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    // Dynamically calculate horizontal spacing based on tree level\r\n    const horizontalSpacing = Math.pow(200, 1.2) / Math.pow(2, level); // More spacing as depth increases\r\n    const leftChildX = x - horizontalSpacing;\r\n    const rightChildX = x + horizontalSpacing;\r\n    const childY = y + 100;\r\n\r\n    return (\r\n      <>\r\n        {/* Draw line to parent node */}\r\n        {parentX !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY + 20}\r\n            x2={x}\r\n            y2={y - 20}\r\n            stroke=\"black\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        )}\r\n        {/* Draw current node */}\r\n        <g className=\"circle-group\">\r\n          <circle cx={x} cy={y} r=\"20\" className=\"tree-circle\" />\r\n          <text x={x} y={y} textAnchor=\"middle\" dy=\"5\" fill=\"white\" fontWeight=\"bold\">\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n        {/* Render left and right child nodes recursively */}\r\n        {node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y)}\r\n        {node.right && renderTree(node.right, rightChildX, childY, level + 1, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  // Handle \"Download Tree\" button click\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  // Calculate the tree's overall width and height for SVG viewBox\r\n  const calculateViewBox = (treeData) => {\r\n    let minX = Infinity;\r\n    let maxX = -Infinity;\r\n    let minY = Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    const calculatePositions = (node, x, y, level) => {\r\n      if (!node) return;\r\n\r\n      // Update the bounds of the tree\r\n      minX = Math.min(minX, x);\r\n      maxX = Math.max(maxX, x);\r\n      minY = Math.min(minY, y);\r\n      maxY = Math.max(maxY, y);\r\n\r\n      // Dynamically calculate horizontal spacing based on tree level\r\n      const horizontalSpacing = Math.pow(200, 1.2) / Math.pow(2, level);\r\n      const leftChildX = x - horizontalSpacing;\r\n      const rightChildX = x + horizontalSpacing;\r\n      const childY = y + 100;\r\n\r\n      // Recurse for left and right children\r\n      calculatePositions(node.left, leftChildX, childY, level + 1);\r\n      calculatePositions(node.right, rightChildX, childY, level + 1);\r\n    };\r\n\r\n    calculatePositions(treeData, 500, 50, 0); // Start from center\r\n\r\n    const padding = 100;\r\n    const width = maxX - minX + padding * 2;\r\n    const height = maxY - minY + padding * 2;\r\n\r\n    return { width, height, viewBoxX: minX - padding, viewBoxY: minY - padding };\r\n  };\r\n\r\n  const { width, height, viewBoxX, viewBoxY } = treeData\r\n    ? calculateViewBox(treeData)\r\n    : { width: 1000, height: 600, viewBoxX: 0, viewBoxY: 0 };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n\r\n      {/* Textarea for input */}\r\n      <textarea\r\n        className=\"input-box\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n      />\r\n\r\n      {/* Buttons for actions */}\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"download-button\" onClick={handleDownload}>\r\n          Download Tree\r\n        </button>\r\n      </div>\r\n\r\n      {/* Canvas for rendering the tree */}\r\n      <div className=\"canvas-container\">\r\n        <svg\r\n          id=\"treeCanvas\"\r\n          className=\"tree-canvas\"\r\n          viewBox={`${viewBoxX} ${viewBoxY} ${width} ${height}`}\r\n        >\r\n          {treeData && renderTree(treeData, 500, 50, 0)} {/* Root starts at center */}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}