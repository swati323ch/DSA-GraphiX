{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [input, setInput] = useState(\"1 2\\n2 3\\n2 4\\n3 5\\n4 6\"); // Default input\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [bfsStartNode, setBfsStartNode] = useState(\"\");\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\n  const [isTraversalRunning, setIsTraversalRunning] = useState(false);\n  const svgRef = useRef();\n\n  // Parse the input graph and update nodes/edges\n  const validateInput = input => {\n    const lines = input.trim().split(\"\\n\");\n    const nodeSet = new Set();\n    const parsedEdges = [];\n    try {\n      lines.forEach(line => {\n        const [from, to] = line.trim().split(\" \").map(Number);\n        if (isNaN(from) || isNaN(to)) {\n          throw new Error(\"Invalid input. Each line must contain two integers.\");\n        }\n        nodeSet.add(from);\n        nodeSet.add(to);\n        parsedEdges.push({\n          source: from,\n          target: to\n        });\n      });\n      setNodes(Array.from(nodeSet).map(id => ({\n        id\n      })));\n      setEdges(parsedEdges);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  // BFS Traversal with highlighting\n  const bfsTraversal = startNodeId => {\n    const startNode = +startNodeId;\n    if (!nodes.some(node => node.id === startNode)) {\n      alert(`Node ${startNode} does not exist.`);\n      return;\n    }\n    setIsTraversalRunning(true);\n    const visited = new Set();\n    const queue = [startNode];\n    const traversalOrder = [];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (!visited.has(current)) {\n        traversalOrder.push(current);\n        visited.add(current);\n        edges.filter(edge => edge.source === current && !visited.has(edge.target)).forEach(edge => queue.push(edge.target));\n      }\n    }\n    animateTraversal(traversalOrder);\n  };\n\n  // DFS Traversal with highlighting\n  const dfsTraversal = startNodeId => {\n    const startNode = +startNodeId;\n    if (!nodes.some(node => node.id === startNode)) {\n      alert(`Node ${startNode} does not exist.`);\n      return;\n    }\n    setIsTraversalRunning(true);\n    const visited = new Set();\n    const stack = [startNode];\n    const traversalOrder = [];\n    while (stack.length > 0) {\n      const current = stack.pop();\n      if (!visited.has(current)) {\n        traversalOrder.push(current);\n        visited.add(current);\n        edges.filter(edge => edge.source === current && !visited.has(edge.target)).reverse().forEach(edge => stack.push(edge.target));\n      }\n    }\n    animateTraversal(traversalOrder);\n  };\n\n  // Animate traversal by highlighting nodes sequentially\n  const animateTraversal = traversalOrder => {\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < traversalOrder.length) {\n        setHighlightedNodes([traversalOrder[index]]);\n        index++;\n      } else {\n        clearInterval(interval);\n        setIsTraversalRunning(false);\n        setHighlightedNodes([]);\n      }\n    }, 1000);\n  };\n\n  // Render graph using D3\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    const width = 700;\n    const height = 400;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(100)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).on(\"tick\", () => {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y - 15);\n    });\n\n    // Add edges\n    const link = svg.append(\"g\").selectAll(\".link\").data(edges).enter().append(\"line\").attr(\"class\", \"link\").attr(\"stroke\", \"#aaa\").attr(\"stroke-width\", 2);\n\n    // Add nodes\n    const node = svg.append(\"g\").selectAll(\".node\").data(nodes).enter().append(\"circle\").attr(\"class\", \"node\").attr(\"r\", 15).attr(\"fill\", d => highlightedNodes.includes(d.id) ? \"#ff5722\" : \"#4CAF50\").call(d3.drag().on(\"start\", (event, d) => {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = event.x;\n      d.fy = event.y;\n    }).on(\"drag\", (event, d) => {\n      d.fx = event.x;\n      d.fy = event.y;\n    }).on(\"end\", (event, d) => {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }));\n\n    // Add labels\n    const label = svg.append(\"g\").selectAll(\".label\").data(nodes).enter().append(\"text\").attr(\"class\", \"label\").attr(\"text-anchor\", \"middle\").attr(\"fill\", \"#000\").text(d => d.id);\n    return () => {\n      simulation.stop();\n    };\n  }, [nodes, edges, highlightedNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter edges (e.g., 1 2\\\\n2 3)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => validateInput(input),\n      children: \"Visualize Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: bfsStartNode,\n      onChange: e => setBfsStartNode(e.target.value),\n      placeholder: \"Enter start node\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => bfsTraversal(bfsStartNode),\n      children: \"BFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dfsTraversal(bfsStartNode),\n      children: \"DFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: 700,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"4z3B7X86aIrSB8l+7B+lbvN4usc=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","jsxDEV","_jsxDEV","GraphVisualization","_s","input","setInput","nodes","setNodes","edges","setEdges","bfsStartNode","setBfsStartNode","highlightedNodes","setHighlightedNodes","isTraversalRunning","setIsTraversalRunning","svgRef","validateInput","lines","trim","split","nodeSet","Set","parsedEdges","forEach","line","from","to","map","Number","isNaN","Error","add","push","source","target","Array","id","error","alert","message","bfsTraversal","startNodeId","startNode","some","node","visited","queue","traversalOrder","length","current","shift","has","filter","edge","animateTraversal","dfsTraversal","stack","pop","reverse","index","interval","setInterval","clearInterval","svg","select","selectAll","remove","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","on","link","attr","x","y","label","append","data","enter","includes","call","drag","event","active","alphaTarget","restart","fx","fy","text","stop","children","value","onChange","e","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","ref","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [input, setInput] = useState(\"1 2\\n2 3\\n2 4\\n3 5\\n4 6\"); // Default input\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [bfsStartNode, setBfsStartNode] = useState(\"\");\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n  const [isTraversalRunning, setIsTraversalRunning] = useState(false);\r\n  const svgRef = useRef();\r\n\r\n  // Parse the input graph and update nodes/edges\r\n  const validateInput = (input) => {\r\n    const lines = input.trim().split(\"\\n\");\r\n    const nodeSet = new Set();\r\n    const parsedEdges = [];\r\n\r\n    try {\r\n      lines.forEach((line) => {\r\n        const [from, to] = line.trim().split(\" \").map(Number);\r\n        if (isNaN(from) || isNaN(to)) {\r\n          throw new Error(\"Invalid input. Each line must contain two integers.\");\r\n        }\r\n        nodeSet.add(from);\r\n        nodeSet.add(to);\r\n        parsedEdges.push({ source: from, target: to });\r\n      });\r\n\r\n      setNodes(Array.from(nodeSet).map((id) => ({ id })));\r\n      setEdges(parsedEdges);\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  };\r\n\r\n  // BFS Traversal with highlighting\r\n  const bfsTraversal = (startNodeId) => {\r\n    const startNode = +startNodeId;\r\n\r\n    if (!nodes.some((node) => node.id === startNode)) {\r\n      alert(`Node ${startNode} does not exist.`);\r\n      return;\r\n    }\r\n\r\n    setIsTraversalRunning(true);\r\n    const visited = new Set();\r\n    const queue = [startNode];\r\n    const traversalOrder = [];\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      if (!visited.has(current)) {\r\n        traversalOrder.push(current);\r\n        visited.add(current);\r\n\r\n        edges\r\n          .filter((edge) => edge.source === current && !visited.has(edge.target))\r\n          .forEach((edge) => queue.push(edge.target));\r\n      }\r\n    }\r\n\r\n    animateTraversal(traversalOrder);\r\n  };\r\n\r\n  // DFS Traversal with highlighting\r\n  const dfsTraversal = (startNodeId) => {\r\n    const startNode = +startNodeId;\r\n\r\n    if (!nodes.some((node) => node.id === startNode)) {\r\n      alert(`Node ${startNode} does not exist.`);\r\n      return;\r\n    }\r\n\r\n    setIsTraversalRunning(true);\r\n    const visited = new Set();\r\n    const stack = [startNode];\r\n    const traversalOrder = [];\r\n\r\n    while (stack.length > 0) {\r\n      const current = stack.pop();\r\n      if (!visited.has(current)) {\r\n        traversalOrder.push(current);\r\n        visited.add(current);\r\n\r\n        edges\r\n          .filter((edge) => edge.source === current && !visited.has(edge.target))\r\n          .reverse()\r\n          .forEach((edge) => stack.push(edge.target));\r\n      }\r\n    }\r\n\r\n    animateTraversal(traversalOrder);\r\n  };\r\n\r\n  // Animate traversal by highlighting nodes sequentially\r\n  const animateTraversal = (traversalOrder) => {\r\n    let index = 0;\r\n\r\n    const interval = setInterval(() => {\r\n      if (index < traversalOrder.length) {\r\n        setHighlightedNodes([traversalOrder[index]]);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setIsTraversalRunning(false);\r\n        setHighlightedNodes([]);\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  // Render graph using D3\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    const width = 700;\r\n    const height = 400;\r\n\r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(100))\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .on(\"tick\", () => {\r\n        link.attr(\"x1\", (d) => d.source.x)\r\n          .attr(\"y1\", (d) => d.source.y)\r\n          .attr(\"x2\", (d) => d.target.x)\r\n          .attr(\"y2\", (d) => d.target.y);\r\n\r\n        node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n        label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y - 15);\r\n      });\r\n\r\n    // Add edges\r\n    const link = svg\r\n      .append(\"g\")\r\n      .selectAll(\".link\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"link\")\r\n      .attr(\"stroke\", \"#aaa\")\r\n      .attr(\"stroke-width\", 2);\r\n\r\n    // Add nodes\r\n    const node = svg\r\n      .append(\"g\")\r\n      .selectAll(\".node\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"class\", \"node\")\r\n      .attr(\"r\", 15)\r\n      .attr(\"fill\", (d) =>\r\n        highlightedNodes.includes(d.id) ? \"#ff5722\" : \"#4CAF50\"\r\n      )\r\n      .call(\r\n        d3.drag()\r\n          .on(\"start\", (event, d) => {\r\n            if (!event.active) simulation.alphaTarget(0.3).restart();\r\n            d.fx = event.x;\r\n            d.fy = event.y;\r\n          })\r\n          .on(\"drag\", (event, d) => {\r\n            d.fx = event.x;\r\n            d.fy = event.y;\r\n          })\r\n          .on(\"end\", (event, d) => {\r\n            if (!event.active) simulation.alphaTarget(0);\r\n            d.fx = null;\r\n            d.fy = null;\r\n          })\r\n      );\r\n\r\n    // Add labels\r\n    const label = svg\r\n      .append(\"g\")\r\n      .selectAll(\".label\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"class\", \"label\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"fill\", \"#000\")\r\n      .text((d) => d.id);\r\n\r\n    return () => {\r\n      simulation.stop();\r\n    };\r\n  }, [nodes, edges, highlightedNodes]);\r\n\r\n  return (\r\n    <div>\r\n      <textarea\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter edges (e.g., 1 2\\n2 3)\"\r\n      ></textarea>\r\n      <button onClick={() => validateInput(input)}>Visualize Graph</button>\r\n      <input\r\n        type=\"text\"\r\n        value={bfsStartNode}\r\n        onChange={(e) => setBfsStartNode(e.target.value)}\r\n        placeholder=\"Enter start node\"\r\n      />\r\n      <button onClick={() => bfsTraversal(bfsStartNode)}>BFS</button>\r\n      <button onClick={() => dfsTraversal(bfsStartNode)}>DFS</button>\r\n      <svg ref={svgRef} width={700} height={400}></svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}