{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\InsertionSort.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './insertion_style.css'; // Make sure this is the correct path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InsertionSort() {\n  _s();\n  const [array, setArray] = useState([]);\n  const [isPaused, setIsPaused] = useState(false);\n  const [status, setStatus] = useState('');\n  const [i, setI] = useState(1);\n  const [currentTimeouts, setCurrentTimeouts] = useState([]);\n  const [sortedArray, setSortedArray] = useState([]);\n  let j = 0;\n\n  // Reset sorting state\n  const resetSortingState = () => {\n    setIsPaused(false);\n    currentTimeouts.forEach(timeout => clearTimeout(timeout)); // Clear all timeouts\n    setCurrentTimeouts([]);\n    setArray([]);\n    setSortedArray([]);\n    setI(1);\n    setStatus('');\n  };\n  const togglePause = () => {\n    setIsPaused(prev => !prev);\n    if (isPaused) {\n      continueSorting();\n    } else {\n      currentTimeouts.forEach(timeout => clearTimeout(timeout));\n      setCurrentTimeouts([]);\n    }\n  };\n  const continueSorting = () => {\n    step();\n  };\n  const step = () => {\n    if (isPaused) return;\n    if (i >= array.length) {\n      setStatus('Sorting complete!');\n      setSortedArray([...array]); // Set the sorted array\n      return;\n    }\n    let key = array[i];\n    j = i - 1;\n\n    // Highlight and display sorting status\n    setStatus(`Sorting element ${key}...`);\n    setI(prevI => prevI + 1);\n\n    // Continue inner loop step\n    innerStep(key);\n  };\n  const innerStep = key => {\n    if (isPaused) return;\n    if (j >= 0 && array[j] > key) {\n      const newArray = [...array];\n      newArray[j + 1] = array[j];\n      setArray(newArray);\n      j--;\n      setTimeout(() => innerStep(key), 1000);\n    } else {\n      const newArray = [...array];\n      newArray[j + 1] = key;\n      setArray(newArray);\n      setStatus(`Inserted ${key} at position ${j + 1}`);\n      step();\n    }\n  };\n  const startSorting = () => {\n    resetSortingState();\n    const arrayInput = prompt('Enter numbers separated by space');\n    const parsedArray = arrayInput.split(' ').map(Number);\n    setArray(parsedArray);\n    setI(1);\n    setStatus('');\n    step();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"insertion-sort-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Insertion Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startSorting,\n      children: \"Start Sorting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePause,\n      children: isPaused ? 'Resume' : 'Pause'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"visualization\",\n      children: array.map((num, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `box ${sortedArray.includes(num) ? 'sorted' : ''}`,\n        children: num\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(InsertionSort, \"6G7e4rTe7ukCre04CQMjxWfp+tE=\");\n_c = InsertionSort;\nexport default InsertionSort;\nvar _c;\n$RefreshReg$(_c, \"InsertionSort\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","InsertionSort","_s","array","setArray","isPaused","setIsPaused","status","setStatus","i","setI","currentTimeouts","setCurrentTimeouts","sortedArray","setSortedArray","j","resetSortingState","forEach","timeout","clearTimeout","togglePause","prev","continueSorting","step","length","key","prevI","innerStep","newArray","setTimeout","startSorting","arrayInput","prompt","parsedArray","split","map","Number","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","num","idx","includes","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/InsertionSort.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './insertion_style.css'; // Make sure this is the correct path\r\n\r\nfunction InsertionSort() {\r\n  const [array, setArray] = useState([]);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [status, setStatus] = useState('');\r\n  const [i, setI] = useState(1);\r\n  const [currentTimeouts, setCurrentTimeouts] = useState([]);\r\n  const [sortedArray, setSortedArray] = useState([]);\r\n\r\n  let j = 0;\r\n\r\n  // Reset sorting state\r\n  const resetSortingState = () => {\r\n    setIsPaused(false);\r\n    currentTimeouts.forEach(timeout => clearTimeout(timeout)); // Clear all timeouts\r\n    setCurrentTimeouts([]);\r\n    setArray([]);\r\n    setSortedArray([]);\r\n    setI(1);\r\n    setStatus('');\r\n  };\r\n\r\n  const togglePause = () => {\r\n    setIsPaused(prev => !prev);\r\n    if (isPaused) {\r\n      continueSorting();\r\n    } else {\r\n      currentTimeouts.forEach(timeout => clearTimeout(timeout));\r\n      setCurrentTimeouts([]);\r\n    }\r\n  };\r\n\r\n  const continueSorting = () => {\r\n    step();\r\n  };\r\n\r\n  const step = () => {\r\n    if (isPaused) return;\r\n\r\n    if (i >= array.length) {\r\n      setStatus('Sorting complete!');\r\n      setSortedArray([...array]); // Set the sorted array\r\n      return;\r\n    }\r\n\r\n    let key = array[i];\r\n    j = i - 1;\r\n\r\n    // Highlight and display sorting status\r\n    setStatus(`Sorting element ${key}...`);\r\n\r\n    setI(prevI => prevI + 1);\r\n\r\n    // Continue inner loop step\r\n    innerStep(key);\r\n  };\r\n\r\n  const innerStep = (key) => {\r\n    if (isPaused) return;\r\n\r\n    if (j >= 0 && array[j] > key) {\r\n      const newArray = [...array];\r\n      newArray[j + 1] = array[j];\r\n      setArray(newArray);\r\n      j--;\r\n      setTimeout(() => innerStep(key), 1000);\r\n    } else {\r\n      const newArray = [...array];\r\n      newArray[j + 1] = key;\r\n      setArray(newArray);\r\n      setStatus(`Inserted ${key} at position ${j + 1}`);\r\n      step();\r\n    }\r\n  };\r\n\r\n  const startSorting = () => {\r\n    resetSortingState();\r\n    const arrayInput = prompt('Enter numbers separated by space');\r\n    const parsedArray = arrayInput.split(' ').map(Number);\r\n    setArray(parsedArray);\r\n    setI(1);\r\n    setStatus('');\r\n    step();\r\n  };\r\n\r\n  return (\r\n    <div className=\"insertion-sort-container\">\r\n      <h1>Insertion Sort</h1>\r\n      <button onClick={startSorting}>Start Sorting</button>\r\n      <button onClick={togglePause}>{isPaused ? 'Resume' : 'Pause'}</button>\r\n\r\n      {/* Visualization */}\r\n      <div id=\"visualization\">\r\n        {array.map((num, idx) => (\r\n          <div\r\n            key={idx}\r\n            className={`box ${sortedArray.includes(num) ? 'sorted' : ''}`}\r\n          >\r\n            {num}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div id=\"status\">{status}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InsertionSort;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}