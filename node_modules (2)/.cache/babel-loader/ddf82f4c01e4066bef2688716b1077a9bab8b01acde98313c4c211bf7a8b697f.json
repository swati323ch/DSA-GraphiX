{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\n  const [treeData, setTreeData] = useState(null);\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\n    if (!node) return null;\n    const horizontalSpacing = 100 / (level + 1);\n    const leftChildX = x - horizontalSpacing;\n    const rightChildX = x + horizontalSpacing;\n    const childY = y + 100;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY,\n        x2: x,\n        y2: y,\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: x,\n        cy: y,\n        r: \"20\",\n        fill: \"skyblue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: x,\n        y: y,\n        textAnchor: \"middle\",\n        dy: \"5\",\n        fill: \"black\",\n        children: node.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y), node.right && renderTree(node.right, rightChildX, childY, level + 1, x, y)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\",\n        rows: 4,\n        style: {\n          width: \"80%\",\n          padding: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVisualize,\n        style: {\n          padding: \"10px 20px\",\n          fontSize: \"16px\",\n          marginTop: \"10px\"\n        },\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      height: \"500\",\n      style: {\n        border: \"1px solid #ccc\"\n      },\n      children: treeData && renderTree(treeData, 500, 50, 0)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"JCi5CyM2mjadiQNJ69F/xKnB+Vc=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","buildTree","arr","length","nodes","map","value","left","right","i","j","handleVisualize","parsedArray","JSON","parse","error","alert","renderTree","node","x","y","level","parentX","parentY","horizontalSpacing","leftChildX","rightChildX","childY","children","x1","y1","x2","y2","stroke","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","r","fill","textAnchor","dy","className","style","textAlign","padding","marginBottom","onChange","e","target","placeholder","rows","width","onClick","fontSize","marginTop","height","border","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\"; \r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n\r\n    const nodes = arr.map((value) => (value !== null ? { value, left: null, right: null } : null));\r\n\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n\r\n    return nodes[0];\r\n  };\r\n\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    const horizontalSpacing = 100 / (level + 1);\r\n    const leftChildX = x - horizontalSpacing;\r\n    const rightChildX = x + horizontalSpacing;\r\n    const childY = y + 100;\r\n\r\n    return (\r\n      <>\r\n        {parentX !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY}\r\n            x2={x}\r\n            y2={y}\r\n            stroke=\"black\"\r\n          />\r\n        )}\r\n        <circle cx={x} cy={y} r=\"20\" fill=\"skyblue\" />\r\n        <text x={x} y={y} textAnchor=\"middle\" dy=\"5\" fill=\"black\">\r\n          {node.value}\r\n        </text>\r\n        {node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y)}\r\n        {node.right && renderTree(node.right, rightChildX, childY, level + 1, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\" style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>Tree Visualizer</h1>\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        <textarea\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n          rows={4}\r\n          style={{ width: \"80%\", padding: \"10px\" }}\r\n        />\r\n        <br />\r\n        <button onClick={handleVisualize} style={{ padding: \"10px 20px\", fontSize: \"16px\", marginTop: \"10px\" }}>\r\n          Visualize Tree\r\n        </button>\r\n      </div>\r\n\r\n      <svg width=\"100%\" height=\"500\" style={{ border: \"1px solid #ccc\" }}>\r\n        {treeData && renderTree(treeData, 500, 50, 0)}\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}