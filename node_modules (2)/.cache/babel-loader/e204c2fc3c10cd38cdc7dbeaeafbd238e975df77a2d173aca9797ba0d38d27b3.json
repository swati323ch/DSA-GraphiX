{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\n  const [dfsStartNode, setDfsStartNode] = useState(\"\"); // State for DFS start node input\n  const [showDfsInput, setShowDfsInput] = useState(false); // Toggle DFS input visibility\n\n  const svgRef = useRef();\n  const graphContainerRef = useRef(); // Ref for the graph container\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n\n        // Handle optional weight\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.source === edge.source && e.target === edge.target || e.source === edge.target && e.target === edge.source));\n      setNodes(newNodes);\n      setEdges(uniqueEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const downloadGraph = () => {\n    if (graphContainerRef.current) {\n      toPng(graphContainerRef.current).then(dataUrl => {\n        const link = document.createElement(\"a\");\n        link.download = \"graph_visualization.png\";\n        link.href = dataUrl;\n        link.click();\n      }).catch(err => {\n        console.error(\"Failed to download graph as PNG:\", err);\n      });\n    }\n  };\n  const handleDFSStart = () => {\n    var _nodes$;\n    const startNode = dfsStartNode || ((_nodes$ = nodes[0]) === null || _nodes$ === void 0 ? void 0 : _nodes$.id); // Use the user-defined node or the first node\n    const visited = new Set();\n    const dfsTraversal = (currentNode, prevNode = null) => {\n      if (visited.has(currentNode)) return;\n      visited.add(currentNode);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n\n      // Remove highlight for the previously processed node\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n\n      // Highlight the current node\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n\n      // Find neighbors\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => edge.source.id === currentNode ? edge.target.id : edge.source.id);\n\n      // Delay for visualization and recursively explore neighbors\n      setTimeout(() => {\n        neighbors.forEach(neighbor => {\n          if (!visited.has(neighbor)) {\n            dfsTraversal(neighbor, currentNode);\n          }\n        });\n\n        // After exploring all neighbors, remove highlight from the current node\n        if (!neighbors.length && prevNode !== null) {\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\n        }\n      }, 500);\n    };\n    dfsTraversal(startNode); // Start DFS traversal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(true);\n          validateInput(input);\n        },\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${!isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(false);\n          validateInput(input);\n        },\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-download-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: `Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`,\n        onChange: handleInputChange,\n        className: \"input-container\",\n        value: input,\n        rows: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"download-button\",\n          onClick: downloadGraph,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: db,\n            alt: \"Download\",\n            className: \"download-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"download-txt\",\n          children: \"Download Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"operation-button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"operation_button\",\n        onClick: () => setShowDfsInput(!showDfsInput),\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), showDfsInput && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dfs-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter start node\",\n          value: dfsStartNode,\n          onChange: e => setDfsStartNode(e.target.value),\n          className: \"dfs-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"dfs-start-button\",\n          onClick: handleDFSStart,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      ref: graphContainerRef,\n      style: {\n        alignItems: \"flex-end\",\n        overflow: \"auto\",\n        maxWidth: \"63%\",\n        height: \"400px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"1000\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"V4OLDX68R1VMGT/e0Sz3jtulL/4=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","Set","dfsStartNode","setDfsStartNode","showDfsInput","setShowDfsInput","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","uniqueEdges","filter","edge","index","self","findIndex","message","downloadGraph","current","then","dataUrl","link","document","createElement","download","href","click","catch","err","console","handleDFSStart","_nodes$","startNode","visited","dfsTraversal","currentNode","prevNode","has","add","prevVisitedNodes","select","classed","neighbors","map","setTimeout","neighbor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","rows","src","alt","type","ref","style","alignItems","overflow","maxWidth","height","width","border","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\r\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\r\n  const [dfsStartNode, setDfsStartNode] = useState(\"\"); // State for DFS start node input\r\n  const [showDfsInput, setShowDfsInput] = useState(false); // Toggle DFS input visibility\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef(); // Ref for the graph container\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n\r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\r\n            \"Invalid input format! Each line must have two integers, and optionally a weight.\"\r\n          );\r\n        }\r\n\r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n\r\n        // Handle optional weight\r\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n\r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n\r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (e) =>\r\n              (e.source === edge.source && e.target === edge.target) ||\r\n              (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n\r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const downloadGraph = () => {\r\n    if (graphContainerRef.current) {\r\n      toPng(graphContainerRef.current)\r\n        .then((dataUrl) => {\r\n          const link = document.createElement(\"a\");\r\n          link.download = \"graph_visualization.png\";\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to download graph as PNG:\", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleDFSStart = () => {\r\n    const startNode = dfsStartNode || nodes[0]?.id; // Use the user-defined node or the first node\r\n    const visited = new Set();\r\n\r\n    const dfsTraversal = (currentNode, prevNode = null) => {\r\n      if (visited.has(currentNode)) return;\r\n\r\n      visited.add(currentNode);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n\r\n      // Remove highlight for the previously processed node\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n\r\n      // Highlight the current node\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n\r\n      // Find neighbors\r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n\r\n      // Delay for visualization and recursively explore neighbors\r\n      setTimeout(() => {\r\n        neighbors.forEach((neighbor) => {\r\n          if (!visited.has(neighbor)) {\r\n            dfsTraversal(neighbor, currentNode);\r\n          }\r\n        });\r\n\r\n        // After exploring all neighbors, remove highlight from the current node\r\n        if (!neighbors.length && prevNode !== null) {\r\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\r\n        }\r\n      }, 500);\r\n    };\r\n\r\n    dfsTraversal(startNode); // Start DFS traversal\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n\r\n      <div className=\"button-container\">\r\n        <button\r\n          className={`toggle-button ${isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(true);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Directed\r\n        </button>\r\n        <button\r\n          className={`toggle-button ${!isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(false);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Undirected\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          placeholder={`Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`}\r\n          onChange={handleInputChange}\r\n          className=\"input-container\"\r\n          value={input}\r\n          rows=\"5\"\r\n        ></textarea>\r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={downloadGraph}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-txt\">Download Graph</p>\r\n        </div>\r\n      </div>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      <div className=\"operation-button-container\">\r\n        <button className=\"operation_button\" onClick={() => setShowDfsInput(!showDfsInput)}>\r\n          DFS\r\n        </button>\r\n        {showDfsInput && (\r\n          <div className=\"dfs-input-container\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter start node\"\r\n              value={dfsStartNode}\r\n              onChange={(e) => setDfsStartNode(e.target.value)}\r\n              className=\"dfs-input\"\r\n            />\r\n            <button className=\"dfs-start-button\" onClick={handleDFSStart}>\r\n              Start\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div\r\n        className=\"graph-display\"\r\n        ref={graphContainerRef}\r\n        style={{ alignItems: \"flex-end\", overflow: \"auto\", maxWidth: \"63%\", height: \"400px\" }}\r\n      >\r\n        <svg ref={svgRef} width=\"1000\" height=\"400\" style={{ border: \"1px solid black\" }}></svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}