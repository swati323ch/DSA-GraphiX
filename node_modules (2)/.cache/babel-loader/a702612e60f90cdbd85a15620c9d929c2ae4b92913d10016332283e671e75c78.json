{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\n  const [topoSortResult, setTopoSortResult] = useState(\"\");\n  const [shortestPathResult, setShortestPathResult] = useState(\"\");\n  const [showShortestPathInputs, setShowShortestPathInputs] = useState(false);\n  const [shortestPathInput, setShortestPathInput] = useState({\n    startNode: \"\",\n    endNode: \"\"\n  });\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\n  const svgRef = useRef();\n  const graphContainerRef = useRef(); // Ref for the graph container\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n\n        // Handle optional weight\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.source === edge.source && e.target === edge.target || e.source === edge.target && e.target === edge.source));\n      setNodes(newNodes);\n      setEdges(uniqueEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const downloadGraph = () => {\n    if (graphContainerRef.current) {\n      toPng(graphContainerRef.current).then(dataUrl => {\n        const link = document.createElement(\"a\");\n        link.download = \"graph_visualization.png\";\n        link.href = dataUrl;\n        link.click();\n      }).catch(err => {\n        console.error(\"Failed to download graph as PNG:\", err);\n      });\n    }\n  };\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 800;\n    const height = 400;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(200)) // Increased edge distance\n    .force(\"charge\", d3.forceManyBody().strength(-500)) // Increased repulsion strength\n    .force(\"center\", d3.forceCenter(width / 2, height / 2)).force(\"x\", d3.forceX(width / 2).strength(0.2)) // Adjusted strength for centering\n    .force(\"y\", d3.forceY(height / 2).strength(0.2)) // Adjusted strength for centering\n    .on(\"tick\", ticked);\n    function constrainBounds(d) {\n      d.x = MuseEffect(() => {\n        const svg = d3.select(svgRef.current);\n        svg.selectAll(\"*\").remove();\n        if (nodes.length === 0 || edges.length === 0) return;\n        const width = 800;\n        const height = 400;\n\n        // Function to calculate edge density\n        function calculateEdgeDensity(edges, gridSize) {\n          const density = Array.from({\n            length: gridSize\n          }, () => Array(gridSize).fill(0));\n          edges.forEach(edge => {\n            const x1 = Math.floor(edge.source.x / width * gridSize);\n            const y1 = Math.floor(edge.source.y / height * gridSize);\n            const x2 = Math.floor(edge.target.x / width * gridSize);\n            const y2 = Math.floor(edge.target.y / height * gridSize);\n            if (x1 >= 0 && x1 < gridSize && y1 >= 0 && y1 < gridSize) {\n              density[x1][y1]++;\n            }\n            if (x2 >= 0 && x2 < gridSize && y2 >= 0 && y2 < gridSize) {\n              density[x2][y2]++;\n            }\n          });\n          return density;\n        }\n\n        // Custom force function\n        function avoidDenseEdges(alpha) {\n          const gridSize = 10; // Divide the graph into a grid\n          const density = calculateEdgeDensity(edges, gridSize);\n          nodes.forEach(node => {\n            const gridX = Math.floor(node.x / width * gridSize);\n            const gridY = Math.floor(node.y / height * gridSize);\n            if (gridX >= 0 && gridX < gridSize && gridY >= 0 && gridY < gridSize && density[gridX][gridY] > 5 // Arbitrary threshold for density\n            ) {\n              node.vx -= (node.x - width / 2) * alpha * 0.1;\n              node.vy -= (node.y - height / 2) * alpha * 0.1;\n            }\n          });\n        }\n        const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(200)).force(\"charge\", d3.forceManyBody().strength(-500)).force(\"center\", d3.forceCenter(width / 2, height / 2)).force(\"x\", d3.forceX(width / 2).strength(0.2)).force(\"y\", d3.forceY(height / 2).strength(0.2)).force(\"avoidDenseEdges\", alpha => avoidDenseEdges(alpha)) // Add custom force\n        .on(\"tick\", ticked);\n        function constrainBounds(d) {\n          d.x = Math.max(20, Math.min(width - 20, d.x));\n          d.y = Math.max(20, Math.min(height - 20, d.y));\n        }\n        svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 28).attr(\"refY\", 0).attr(\"orient\", \"auto\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#333536\");\n        const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2).attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\n        const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 22).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"class\", d => `node node-${d.id}`).call(d3.drag().on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\", dragEnded));\n        const label = svg.append(\"g\").attr(\"class\", \"labels\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \".35em\").attr(\"fill\", \"white\");\n        function ticked() {\n          link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n          node.each(constrainBounds).attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n          label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n        }\n        function dragStarted(event, d) {\n          if (!event.active) simulation.alphaTarget(0.3).restart();\n          d.fx = d.x;\n          d.fy = d.y;\n        }\n        function dragged(event, d) {\n          d.fx = event.x;\n          d.fy = event.y;\n        }\n        function dragEnded(event, d) {\n          if (!event.active) simulation.alphaTarget(0);\n          d.fx = null;\n          d.fy = null;\n        }\n        return () => simulation.stop();\n      }, [nodes, edges, isDirected]);\n      th.max(20, Math.min(width - 20, d.x));\n      d.y = Math.max(20, Math.min(height - 20, d.y));\n    }\n    svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 28).attr(\"refY\", 0).attr(\"orient\", \"auto\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#333536\");\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2).attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 22).attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"class\", d => `node node-${d.id}`).call(d3.drag().on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\", dragEnded));\n    const label = svg.append(\"g\").attr(\"class\", \"labels\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \".35em\").attr(\"fill\", \"white\");\n    const edgeLabels = svg.append(\"g\").attr(\"class\", \"edge-labels\").selectAll(\"text\").data(edges).enter().append(\"text\").text(d => d.weight !== null ? d.weight : \"\").attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \"-10px\").attr(\"fill\", \"black\").style(\"fill\", \"black\");\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.each(constrainBounds).attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n      edgeLabels.attr(\"x\", d => (d.source.x + d.target.x) / 2).attr(\"y\", d => (d.source.y + d.target.y) / 2);\n    }\n    function dragStarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragEnded(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n    return () => simulation.stop();\n  }, [nodes, edges, isDirected]);\n  const handleBFS = () => {\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\n    const queue = [startNode];\n    const visited = new Set();\n    visited.add(startNode);\n    const bfsTraversal = (prevNode = null) => {\n      if (queue.length === 0) {\n        // Remove highlight for the last processed node\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n        return;\n      }\n      const currentNode = queue.shift(); // Dequeue node\n      setQueueState(prevQueueState => [...prevQueueState, currentNode]);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n\n      // Remove highlight for the previously processed node\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n\n      // Highlight the current node\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n\n      // Find neighbors by comparing ids, as edges have source/target as objects\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => edge.source.id === currentNode ? edge.target.id : edge.source.id);\n      neighbors.forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push(neighbor);\n        }\n      });\n      setTimeout(() => bfsTraversal(currentNode), 500); // Delay for visualization\n    };\n    bfsTraversal(); // Start the BFS traversal\n    setShowShortestPathInputs(false);\n  };\n  const handleDFS = () => {\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\n    const visited = new Set();\n    const dfsTraversal = (currentNode, prevNode = null) => {\n      if (visited.has(currentNode)) return;\n      visited.add(currentNode);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n\n      // Remove highlight for the previously processed node\n      if (prevNode) {\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\n      }\n\n      // Highlight the current node\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n\n      // Find neighbors\n      const neighbors = edges.filter(edge => edge.source.id === currentNode || edge.target.id === currentNode).map(edge => edge.source.id === currentNode ? edge.target.id : edge.source.id);\n\n      // Delay for visualization and recursively explore neighbors\n      setTimeout(() => {\n        neighbors.forEach(neighbor => {\n          if (!visited.has(neighbor)) {\n            dfsTraversal(neighbor, currentNode);\n          }\n        });\n\n        // After exploring all neighbors, remove highlight from the current node\n        if (!neighbors.length && prevNode !== null) {\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\n        }\n      }, 500);\n    };\n    dfsTraversal(startNode); // Start DFS traversal\n    setShowShortestPathInputs(false);\n  };\n  const handleTopoSort = () => {\n    // Step 1: Calculate in-degrees for each node\n    const inDegree = {};\n    nodes.forEach(node => {\n      inDegree[node.id] = 0;\n    });\n    edges.forEach(edge => {\n      inDegree[edge.target.id] = (inDegree[edge.target.id] || 0) + 1;\n    });\n\n    // Step 2: Initialize the queue with nodes having in-degree of 0\n    const queue = [];\n    nodes.forEach(node => {\n      if (inDegree[node.id] === 0) {\n        queue.push(node.id);\n      }\n    });\n    let topologicalOrder = [];\n    let visitedCount = 0;\n\n    // Step 3: Process nodes in the queue\n    while (queue.length > 0) {\n      const currentNode = queue.shift(); // Dequeue node\n\n      topologicalOrder.push(currentNode); // Add it to topological order\n      visitedCount++;\n\n      // Find all neighbors (edges) of the current node and decrease their in-degree\n      edges.forEach(edge => {\n        if (edge.source.id === currentNode) {\n          const neighbor = edge.target.id;\n          inDegree[neighbor]--;\n\n          // If in-degree of neighbor becomes 0, add it to the queue\n          if (inDegree[neighbor] === 0) {\n            queue.push(neighbor);\n          }\n        }\n      });\n      setShowShortestPathInputs(false);\n    }\n\n    // Step 4: Check if there was a cycle (graph is not a DAG)\n    if (visitedCount !== nodes.length) {\n      setError(\"The graph is not a Directed Acyclic Graph (DAG). Topological Sort not possible.\");\n      return;\n    }\n\n    // Step 5: Display the topological order\n    setError(\"\"); // Clear previous errors\n    setTopoSortResult(topologicalOrder.join(\" → \"));\n  };\n  const handleGetPath = () => {\n    setShowShortestPathInputs(true); // Show the input fields\n  };\n  const findShortestPath = () => {\n    const {\n      startNode,\n      endNode\n    } = shortestPathInput;\n\n    // Validate input\n    if (!startNode || !endNode) {\n      setError(\"Please provide both start and end nodes.\");\n      setShortestPathResult(\"\");\n      setHighlightedNodes([]); // Clear highlighted nodes\n      return;\n    }\n\n    // Build graph adjacency list with weights\n    const graph = new Map();\n    edges.forEach(({\n      source,\n      target,\n      weight\n    }) => {\n      if (!graph.has(source.id)) graph.set(source.id, []);\n      graph.get(source.id).push({\n        node: target.id,\n        weight\n      });\n      if (!isDirected) {\n        if (!graph.has(target.id)) graph.set(target.id, []);\n        graph.get(target.id).push({\n          node: source.id,\n          weight\n        });\n      }\n    });\n\n    // Initialize Dijkstra's algorithm data structures\n    const distances = {};\n    const previousNodes = {};\n    const pq = new Set(nodes.map(node => node.id)); // Priority Queue\n\n    nodes.forEach(({\n      id\n    }) => {\n      distances[id] = id === startNode ? 0 : Infinity;\n      previousNodes[id] = null;\n    });\n\n    // Dijkstra's Algorithm\n    while (pq.size) {\n      // Find the node with the smallest distance\n      const current = [...pq].reduce((a, b) => distances[a] < distances[b] ? a : b);\n      pq.delete(current);\n\n      // If we've reached the end node, stop processing\n      if (current === endNode) break;\n\n      // Process neighbors\n      const neighbors = graph.get(current) || [];\n      neighbors.forEach(({\n        node: neighbor,\n        weight\n      }) => {\n        const alt = distances[current] + weight;\n        if (alt < distances[neighbor]) {\n          distances[neighbor] = alt;\n          previousNodes[neighbor] = current;\n        }\n      });\n    }\n\n    // Reconstruct the shortest path\n    let path = [];\n    let currentNode = endNode;\n    while (currentNode) {\n      path.unshift(currentNode);\n      currentNode = previousNodes[currentNode];\n    }\n\n    // Validate and display the result\n    if (path[0] !== startNode) {\n      setError(`No path exists between ${startNode} and ${endNode}.`);\n      setShortestPathResult(\"\");\n      setHighlightedNodes([]); // Clear highlighted nodes\n    } else {\n      setError(\"\");\n      setShortestPathResult(path.join(\" → \"));\n      setHighlightedNodes(path); // Set highlighted nodes for the shortest path\n\n      // Highlight the nodes in the shortest path\n      path.forEach(nodeId => {\n        d3.select(`.node-${nodeId}`).classed(\"highlighted\", true);\n      });\n\n      // Optionally, add a delay to remove the highlight after a certain time\n      setTimeout(() => {\n        path.forEach(nodeId => {\n          d3.select(`.node-${nodeId}`).classed(\"highlighted\", false);\n        });\n      }, 2000); // Highlight for 2 seconds\n    }\n    setShowShortestPathInputs(false);\n  };\n  const handleMST = () => {\n    if (edges.length === 0 || nodes.length === 0) {\n      setError(\"Graph must have nodes and edges to compute MST.\");\n      return;\n    }\n\n    // Step 1: Sort edges by weight\n    const sortedEdges = [...edges].sort((a, b) => (a.weight || 0) - (b.weight || 0));\n\n    // Step 2: Initialize disjoint sets for union-find\n    const parent = {};\n    const rank = {};\n    nodes.forEach(({\n      id\n    }) => {\n      parent[id] = id;\n      rank[id] = 0;\n    });\n    const find = node => {\n      if (parent[node] !== node) {\n        parent[node] = find(parent[node]);\n      }\n      return parent[node];\n    };\n    const union = (node1, node2) => {\n      const root1 = find(node1);\n      const root2 = find(node2);\n      if (root1 !== root2) {\n        if (rank[root1] > rank[root2]) {\n          parent[root2] = root1;\n        } else if (rank[root1] < rank[root2]) {\n          parent[root1] = root2;\n        } else {\n          parent[root2] = root1;\n          rank[root1] += 1;\n        }\n      }\n    };\n\n    // Step 3: Construct MST\n    const mstEdges = [];\n    sortedEdges.forEach(edge => {\n      if (find(edge.source.id) !== find(edge.target.id)) {\n        mstEdges.push(edge);\n        union(edge.source.id, edge.target.id);\n      }\n    });\n\n    // Highlight MST edges\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\".mst-highlight\").classed(\"mst-highlight\", false); // Reset previous highlights\n\n    mstEdges.forEach(edge => {\n      svg.selectAll(\"line\").filter(d => d.source.id === edge.source.id && d.target.id === edge.target.id).classed(\"mst-highlight\", true);\n    });\n    setError(\"\"); // Clear any previous error\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(true);\n          validateInput(input);\n        },\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${!isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(false);\n          validateInput(input);\n        },\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-download-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: `Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`,\n        onChange: handleInputChange,\n        className: \"input-container\",\n        value: input,\n        rows: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"download-button\",\n          onClick: downloadGraph,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: db,\n            alt: \"Download\",\n            className: \"download-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 728,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"download-txt\",\n          children: \"Download Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphdislpay-button-wraper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"operation-button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleDFS,\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleBFS,\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleTopoSort,\n          children: \"Topo Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"operation_button\",\n            onClick: handleGetPath,\n            children: \"Shortest Path\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 7\n          }, this), showShortestPathInputs && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"shortestpathop\",\n              type: \"text\",\n              placeholder: \"Start Node\",\n              onChange: e => setShortestPathInput({\n                ...shortestPathInput,\n                startNode: e.target.value\n              }),\n              style: {\n                marginLeft: \"10px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"shortestpathop\",\n              type: \"text\",\n              placeholder: \"End Node\",\n              onChange: e => setShortestPathInput({\n                ...shortestPathInput,\n                endNode: e.target.value\n              }),\n              style: {\n                marginLeft: \"10px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 763,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: findShortestPath,\n              children: \"Get Path\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleMST,\n          children: \"MST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-display\",\n        ref: graphContainerRef,\n        style: {\n          alignItems: \"flex-end\",\n          overflow: \"auto\",\n          maxWidth: \"69%\",\n          height: \"450px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          ref: svgRef,\n          width: \"1000\",\n          height: \"450\",\n          style: {\n            border: \"1px solid black\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 7\n    }, this), topoSortResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"operation-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Topological Sort:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: topoSortResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 796,\n      columnNumber: 9\n    }, this), shortestPathResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"operation-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Shortest Path:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: shortestPathResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 690,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"UuhBAfIt9IB5nAZow9xS9XhNZwc=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","Fragment","_Fragment","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","Set","topoSortResult","setTopoSortResult","shortestPathResult","setShortestPathResult","showShortestPathInputs","setShowShortestPathInputs","shortestPathInput","setShortestPathInput","startNode","endNode","highlightedNodes","setHighlightedNodes","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","uniqueEdges","filter","edge","index","self","findIndex","message","downloadGraph","current","then","dataUrl","link","document","createElement","download","href","click","catch","err","console","svg","select","selectAll","remove","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","forceX","forceY","on","ticked","constrainBounds","x","MuseEffect","calculateEdgeDensity","gridSize","density","Array","fill","x1","Math","floor","y1","y","x2","y2","avoidDenseEdges","alpha","gridX","gridY","vx","vy","max","min","append","attr","data","enter","call","drag","dragStarted","dragged","dragEnded","label","text","each","event","active","alphaTarget","restart","fx","fy","stop","th","edgeLabels","style","handleBFS","queue","visited","add","bfsTraversal","prevNode","classed","currentNode","shift","prevQueueState","prevVisitedNodes","neighbors","map","neighbor","has","setTimeout","handleDFS","dfsTraversal","handleTopoSort","inDegree","topologicalOrder","visitedCount","join","handleGetPath","findShortestPath","graph","Map","set","get","distances","previousNodes","pq","Infinity","size","reduce","a","b","delete","alt","path","unshift","nodeId","handleMST","sortedEdges","sort","parent","rank","find","union","node1","node2","root1","root2","mstEdges","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","rows","src","type","marginLeft","ref","alignItems","overflow","maxWidth","border","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\r\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\r\n  const [topoSortResult, setTopoSortResult] = useState(\"\");\r\n  const [shortestPathResult, setShortestPathResult] = useState(\"\");\r\n  const [showShortestPathInputs, setShowShortestPathInputs] = useState(false);\r\n  const [shortestPathInput, setShortestPathInput] = useState({\r\n    startNode: \"\",\r\n    endNode: \"\",\r\n  });\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n\r\n\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef(); // Ref for the graph container\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n  \r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\r\n        }\r\n  \r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n  \r\n        // Handle optional weight\r\n        const edgeWeight = weight ? parseInt(weight) : null;  // Set to null if no weight provided\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n  \r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n  \r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (e) =>\r\n              (e.source === edge.source && e.target === edge.target) ||\r\n              (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n  \r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  \r\n\r\n  const downloadGraph = () => {\r\n    if (graphContainerRef.current) {\r\n      toPng(graphContainerRef.current)\r\n        .then((dataUrl) => {\r\n          const link = document.createElement(\"a\");\r\n          link.download = \"graph_visualization.png\";\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to download graph as PNG:\", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n  \r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n  \r\n    const width = 800;\r\n    const height = 400;\r\n  \r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(200)) // Increased edge distance\r\n      .force(\"charge\", d3.forceManyBody().strength(-500)) // Increased repulsion strength\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .force(\"x\", d3.forceX(width / 2).strength(0.2)) // Adjusted strength for centering\r\n      .force(\"y\", d3.forceY(height / 2).strength(0.2)) // Adjusted strength for centering\r\n      .on(\"tick\", ticked);\r\n  \r\n    function constrainBounds(d) {\r\n      d.x = MuseEffect(() => {\r\n        const svg = d3.select(svgRef.current);\r\n        svg.selectAll(\"*\").remove();\r\n      \r\n        if (nodes.length === 0 || edges.length === 0) return;\r\n      \r\n        const width = 800;\r\n        const height = 400;\r\n      \r\n        // Function to calculate edge density\r\n        function calculateEdgeDensity(edges, gridSize) {\r\n          const density = Array.from({ length: gridSize }, () =>\r\n            Array(gridSize).fill(0)\r\n          );\r\n      \r\n          edges.forEach((edge) => {\r\n            const x1 = Math.floor((edge.source.x / width) * gridSize);\r\n            const y1 = Math.floor((edge.source.y / height) * gridSize);\r\n            const x2 = Math.floor((edge.target.x / width) * gridSize);\r\n            const y2 = Math.floor((edge.target.y / height) * gridSize);\r\n      \r\n            if (x1 >= 0 && x1 < gridSize && y1 >= 0 && y1 < gridSize) {\r\n              density[x1][y1]++;\r\n            }\r\n            if (x2 >= 0 && x2 < gridSize && y2 >= 0 && y2 < gridSize) {\r\n              density[x2][y2]++;\r\n            }\r\n          });\r\n      \r\n          return density;\r\n        }\r\n      \r\n        // Custom force function\r\n        function avoidDenseEdges(alpha) {\r\n          const gridSize = 10; // Divide the graph into a grid\r\n          const density = calculateEdgeDensity(edges, gridSize);\r\n      \r\n          nodes.forEach((node) => {\r\n            const gridX = Math.floor((node.x / width) * gridSize);\r\n            const gridY = Math.floor((node.y / height) * gridSize);\r\n      \r\n            if (\r\n              gridX >= 0 &&\r\n              gridX < gridSize &&\r\n              gridY >= 0 &&\r\n              gridY < gridSize &&\r\n              density[gridX][gridY] > 5 // Arbitrary threshold for density\r\n            ) {\r\n              node.vx -= (node.x - width / 2) * alpha * 0.1;\r\n              node.vy -= (node.y - height / 2) * alpha * 0.1;\r\n            }\r\n          });\r\n        }\r\n      \r\n        const simulation = d3\r\n          .forceSimulation(nodes)\r\n          .force(\r\n            \"link\",\r\n            d3\r\n              .forceLink(edges)\r\n              .id((d) => d.id)\r\n              .distance(200)\r\n          )\r\n          .force(\"charge\", d3.forceManyBody().strength(-500))\r\n          .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n          .force(\"x\", d3.forceX(width / 2).strength(0.2))\r\n          .force(\"y\", d3.forceY(height / 2).strength(0.2))\r\n          .force(\"avoidDenseEdges\", (alpha) => avoidDenseEdges(alpha)) // Add custom force\r\n          .on(\"tick\", ticked);\r\n      \r\n        function constrainBounds(d) {\r\n          d.x = Math.max(20, Math.min(width - 20, d.x));\r\n          d.y = Math.max(20, Math.min(height - 20, d.y));\r\n        }\r\n      \r\n        svg\r\n          .append(\"defs\")\r\n          .append(\"marker\")\r\n          .attr(\"id\", \"arrowhead\")\r\n          .attr(\"viewBox\", \"0 -5 10 10\")\r\n          .attr(\"refX\", 28)\r\n          .attr(\"refY\", 0)\r\n          .attr(\"orient\", \"auto\")\r\n          .attr(\"markerWidth\", 6)\r\n          .attr(\"markerHeight\", 6)\r\n          .append(\"path\")\r\n          .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n          .attr(\"fill\", \"#333536\");\r\n      \r\n        const link = svg\r\n          .append(\"g\")\r\n          .attr(\"class\", \"links\")\r\n          .selectAll(\"line\")\r\n          .data(edges)\r\n          .enter()\r\n          .append(\"line\")\r\n          .attr(\"stroke\", \"#333\")\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n      \r\n        const node = svg\r\n          .append(\"g\")\r\n          .attr(\"class\", \"nodes\")\r\n          .selectAll(\"circle\")\r\n          .data(nodes)\r\n          .enter()\r\n          .append(\"circle\")\r\n          .attr(\"r\", 22)\r\n          .attr(\"stroke\", \"black\")\r\n          .attr(\"stroke-width\", 2)\r\n          .attr(\"class\", (d) => `node node-${d.id}`)\r\n          .call(\r\n            d3\r\n              .drag()\r\n              .on(\"start\", dragStarted)\r\n              .on(\"drag\", dragged)\r\n              .on(\"end\", dragEnded)\r\n          );\r\n      \r\n        const label = svg\r\n          .append(\"g\")\r\n          .attr(\"class\", \"labels\")\r\n          .selectAll(\"text\")\r\n          .data(nodes)\r\n          .enter()\r\n          .append(\"text\")\r\n          .text((d) => d.id)\r\n          .attr(\"font-size\", \"12px\")\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .attr(\"dy\", \".35em\")\r\n          .attr(\"fill\", \"white\");\r\n      \r\n        function ticked() {\r\n          link\r\n            .attr(\"x1\", (d) => d.source.x)\r\n            .attr(\"y1\", (d) => d.source.y)\r\n            .attr(\"x2\", (d) => d.target.x)\r\n            .attr(\"y2\", (d) => d.target.y);\r\n      \r\n          node.each(constrainBounds).attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n      \r\n          label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n        }\r\n      \r\n        function dragStarted(event, d) {\r\n          if (!event.active) simulation.alphaTarget(0.3).restart();\r\n          d.fx = d.x;\r\n          d.fy = d.y;\r\n        }\r\n      \r\n        function dragged(event, d) {\r\n          d.fx = event.x;\r\n          d.fy = event.y;\r\n        }\r\n      \r\n        function dragEnded(event, d) {\r\n          if (!event.active) simulation.alphaTarget(0);\r\n          d.fx = null;\r\n          d.fy = null;\r\n        }\r\n      \r\n        return () => simulation.stop();\r\n      }, [nodes, edges, isDirected]);\r\n      th.max(20, Math.min(width - 20, d.x));\r\n      d.y = Math.max(20, Math.min(height - 20, d.y));\r\n    }\r\n  \r\n    svg\r\n      .append(\"defs\")\r\n      .append(\"marker\")\r\n      .attr(\"id\", \"arrowhead\")\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 28)\r\n      .attr(\"refY\", 0)\r\n      .attr(\"orient\", \"auto\")\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#333536\");\r\n  \r\n    const link = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"links\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n  \r\n    const node = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"nodes\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 22)\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"class\", (d) => `node node-${d.id}`)\r\n      .call(\r\n        d3\r\n          .drag()\r\n          .on(\"start\", dragStarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragEnded)\r\n      );\r\n  \r\n    const label = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"labels\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d.id)\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \".35em\")\r\n      .attr(\"fill\", \"white\");\r\n  \r\n    const edgeLabels = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"edge-labels\")\r\n      .selectAll(\"text\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => (d.weight !== null ? d.weight : \"\"))\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"-10px\")\r\n      .attr(\"fill\", \"black\")\r\n      .style(\"fill\", \"black\");\r\n  \r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n  \r\n      node.each(constrainBounds).attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n  \r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n      edgeLabels\r\n        .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n        .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n    }\r\n  \r\n    function dragStarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n  \r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n  \r\n    function dragEnded(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n  \r\n    return () => simulation.stop();\r\n  }, [nodes, edges, isDirected]);\r\n  \r\n\r\n  const handleBFS = () => {\r\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\r\n    const queue = [startNode];\r\n    const visited = new Set();\r\n    visited.add(startNode);\r\n  \r\n    const bfsTraversal = (prevNode = null) => {\r\n      if (queue.length === 0) {\r\n        // Remove highlight for the last processed node\r\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n        return;\r\n      }\r\n  \r\n      const currentNode = queue.shift(); // Dequeue node\r\n      setQueueState((prevQueueState) => [...prevQueueState, currentNode]);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n  \r\n      // Remove highlight for the previously processed node\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n  \r\n      // Highlight the current node\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n  \r\n      // Find neighbors by comparing ids, as edges have source/target as objects\r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n  \r\n      neighbors.forEach((neighbor) => {\r\n        if (!visited.has(neighbor)) {\r\n          visited.add(neighbor);\r\n          queue.push(neighbor);\r\n        }\r\n      });\r\n  \r\n      setTimeout(() => bfsTraversal(currentNode), 500); // Delay for visualization\r\n    };\r\n  \r\n    bfsTraversal(); // Start the BFS traversal\r\n    setShowShortestPathInputs(false);\r\n  };\r\n  const handleDFS = () => {\r\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\r\n    const visited = new Set();\r\n  \r\n    const dfsTraversal = (currentNode, prevNode = null) => {\r\n      if (visited.has(currentNode)) return;\r\n  \r\n      visited.add(currentNode);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n  \r\n      // Remove highlight for the previously processed node\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n  \r\n      // Highlight the current node\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n  \r\n      // Find neighbors\r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n  \r\n      // Delay for visualization and recursively explore neighbors\r\n      setTimeout(() => {\r\n        neighbors.forEach((neighbor) => {\r\n          if (!visited.has(neighbor)) {\r\n            dfsTraversal(neighbor, currentNode);\r\n          }\r\n        });\r\n  \r\n        // After exploring all neighbors, remove highlight from the current node\r\n        if (!neighbors.length && prevNode !== null) {\r\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\r\n        }\r\n      }, 500);\r\n    };\r\n  \r\n    dfsTraversal(startNode); // Start DFS traversal\r\n    setShowShortestPathInputs(false);\r\n  };\r\n  const handleTopoSort = () => {\r\n    // Step 1: Calculate in-degrees for each node\r\n    const inDegree = {};\r\n    nodes.forEach(node => {\r\n      inDegree[node.id] = 0;\r\n    });\r\n  \r\n    edges.forEach(edge => {\r\n      inDegree[edge.target.id] = (inDegree[edge.target.id] || 0) + 1;\r\n    });\r\n  \r\n    // Step 2: Initialize the queue with nodes having in-degree of 0\r\n    const queue = [];\r\n    nodes.forEach(node => {\r\n      if (inDegree[node.id] === 0) {\r\n        queue.push(node.id);\r\n      }\r\n    });\r\n  \r\n    let topologicalOrder = [];\r\n    let visitedCount = 0;\r\n  \r\n    // Step 3: Process nodes in the queue\r\n    while (queue.length > 0) {\r\n      const currentNode = queue.shift(); // Dequeue node\r\n  \r\n      topologicalOrder.push(currentNode); // Add it to topological order\r\n      visitedCount++;\r\n  \r\n      // Find all neighbors (edges) of the current node and decrease their in-degree\r\n      edges.forEach(edge => {\r\n        if (edge.source.id === currentNode) {\r\n          const neighbor = edge.target.id;\r\n          inDegree[neighbor]--;\r\n  \r\n          // If in-degree of neighbor becomes 0, add it to the queue\r\n          if (inDegree[neighbor] === 0) {\r\n            queue.push(neighbor);\r\n          }\r\n        }\r\n      });\r\n      setShowShortestPathInputs(false);\r\n    }\r\n  \r\n    // Step 4: Check if there was a cycle (graph is not a DAG)\r\n    if (visitedCount !== nodes.length) {\r\n      setError(\"The graph is not a Directed Acyclic Graph (DAG). Topological Sort not possible.\");\r\n      return;\r\n    }\r\n  \r\n    // Step 5: Display the topological order\r\n    setError(\"\"); // Clear previous errors\r\n    setTopoSortResult(topologicalOrder.join(\" → \"));\r\n  };\r\n  \r\n  const handleGetPath = () => {\r\n    setShowShortestPathInputs(true); // Show the input fields\r\n  };\r\n  const findShortestPath = () => {\r\n    const { startNode, endNode } = shortestPathInput;\r\n  \r\n    // Validate input\r\n    if (!startNode || !endNode) {\r\n      setError(\"Please provide both start and end nodes.\");\r\n      setShortestPathResult(\"\");\r\n      setHighlightedNodes([]); // Clear highlighted nodes\r\n      return;\r\n    }\r\n  \r\n    // Build graph adjacency list with weights\r\n    const graph = new Map();\r\n    edges.forEach(({ source, target, weight }) => {\r\n      if (!graph.has(source.id)) graph.set(source.id, []);\r\n      graph.get(source.id).push({ node: target.id, weight });\r\n      if (!isDirected) {\r\n        if (!graph.has(target.id)) graph.set(target.id, []);\r\n        graph.get(target.id).push({ node: source.id, weight });\r\n      }\r\n    });\r\n  \r\n    // Initialize Dijkstra's algorithm data structures\r\n    const distances = {};\r\n    const previousNodes = {};\r\n    const pq = new Set(nodes.map((node) => node.id)); // Priority Queue\r\n  \r\n    nodes.forEach(({ id }) => {\r\n      distances[id] = id === startNode ? 0 : Infinity;\r\n      previousNodes[id] = null;\r\n    });\r\n  \r\n    // Dijkstra's Algorithm\r\n    while (pq.size) {\r\n      // Find the node with the smallest distance\r\n      const current = [...pq].reduce((a, b) => distances[a] < distances[b] ? a : b);\r\n      pq.delete(current);\r\n  \r\n      // If we've reached the end node, stop processing\r\n      if (current === endNode) break;\r\n  \r\n      // Process neighbors\r\n      const neighbors = graph.get(current) || [];\r\n      neighbors.forEach(({ node: neighbor, weight }) => {\r\n        const alt = distances[current] + weight;\r\n        if (alt < distances[neighbor]) {\r\n          distances[neighbor] = alt;\r\n          previousNodes[neighbor] = current;\r\n        }\r\n      });\r\n    }\r\n  \r\n    // Reconstruct the shortest path\r\n    let path = [];\r\n    let currentNode = endNode;\r\n    while (currentNode) {\r\n      path.unshift(currentNode);\r\n      currentNode = previousNodes[currentNode];\r\n    }\r\n  \r\n    // Validate and display the result\r\n    if (path[0] !== startNode) {\r\n      setError(`No path exists between ${startNode} and ${endNode}.`);\r\n      setShortestPathResult(\"\");\r\n      setHighlightedNodes([]); // Clear highlighted nodes\r\n    } else {\r\n      setError(\"\");\r\n      setShortestPathResult(path.join(\" → \"));\r\n      setHighlightedNodes(path); // Set highlighted nodes for the shortest path\r\n  \r\n      // Highlight the nodes in the shortest path\r\n      path.forEach((nodeId) => {\r\n        d3.select(`.node-${nodeId}`).classed(\"highlighted\", true);\r\n      });\r\n  \r\n      // Optionally, add a delay to remove the highlight after a certain time\r\n      setTimeout(() => {\r\n        path.forEach((nodeId) => {\r\n          d3.select(`.node-${nodeId}`).classed(\"highlighted\", false);\r\n        });\r\n      }, 2000); // Highlight for 2 seconds\r\n    }\r\n    setShowShortestPathInputs(false);\r\n  };\r\n  \r\n  const handleMST = () => {\r\n    if (edges.length === 0 || nodes.length === 0) {\r\n      setError(\"Graph must have nodes and edges to compute MST.\");\r\n      return;\r\n    }\r\n  \r\n    // Step 1: Sort edges by weight\r\n    const sortedEdges = [...edges].sort((a, b) => (a.weight || 0) - (b.weight || 0));\r\n  \r\n    // Step 2: Initialize disjoint sets for union-find\r\n    const parent = {};\r\n    const rank = {};\r\n  \r\n    nodes.forEach(({ id }) => {\r\n      parent[id] = id;\r\n      rank[id] = 0;\r\n    });\r\n  \r\n    const find = (node) => {\r\n      if (parent[node] !== node) {\r\n        parent[node] = find(parent[node]);\r\n      }\r\n      return parent[node];\r\n    };\r\n  \r\n    const union = (node1, node2) => {\r\n      const root1 = find(node1);\r\n      const root2 = find(node2);\r\n  \r\n      if (root1 !== root2) {\r\n        if (rank[root1] > rank[root2]) {\r\n          parent[root2] = root1;\r\n        } else if (rank[root1] < rank[root2]) {\r\n          parent[root1] = root2;\r\n        } else {\r\n          parent[root2] = root1;\r\n          rank[root1] += 1;\r\n        }\r\n      }\r\n    };\r\n  \r\n    // Step 3: Construct MST\r\n    const mstEdges = [];\r\n    sortedEdges.forEach((edge) => {\r\n      if (find(edge.source.id) !== find(edge.target.id)) {\r\n        mstEdges.push(edge);\r\n        union(edge.source.id, edge.target.id);\r\n      }\r\n    });\r\n  \r\n    // Highlight MST edges\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\".mst-highlight\").classed(\"mst-highlight\", false); // Reset previous highlights\r\n  \r\n    mstEdges.forEach((edge) => {\r\n      svg\r\n        .selectAll(\"line\")\r\n        .filter((d) => d.source.id === edge.source.id && d.target.id === edge.target.id)\r\n        .classed(\"mst-highlight\", true);\r\n    });\r\n  \r\n    setError(\"\"); // Clear any previous error\r\n  };\r\n  \r\n  \r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      {/* Title */}\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n  \r\n      {/* Toggle Buttons for Directed/Undirected */}\r\n      <div className=\"button-container\">\r\n        <button\r\n          className={`toggle-button ${isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(true);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Directed\r\n        </button>\r\n        <button\r\n          className={`toggle-button ${!isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(false);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Undirected\r\n        </button>\r\n      </div>\r\n  \r\n      {/* Input and Download Section */}\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          placeholder={`Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`}\r\n          onChange={handleInputChange}\r\n          className=\"input-container\"\r\n          value={input}\r\n          rows=\"5\"\r\n        ></textarea>\r\n  \r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={downloadGraph}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-txt\">Download Graph</p>\r\n        </div>\r\n      </div>\r\n  \r\n      {/* Error Message */}\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n  \r\n      {/* Operations Section */}\r\n      <div className=\"graphdislpay-button-wraper\">\r\n        <div className=\"operation-button-container\">\r\n        <button className=\"operation_button\" onClick={handleDFS}>BFS</button>\r\n          <button className=\"operation_button\" onClick={handleBFS}>DFS</button>\r\n          \r\n          <button className=\"operation_button\" onClick={handleTopoSort}>Topo Sort</button>\r\n          \r\n          {/* Shortest Path Button with Input */}\r\n      <div>\r\n      <button className=\"operation_button\" onClick={handleGetPath}>\r\n        Shortest Path\r\n      </button>\r\n\r\n      {/* Conditionally render the input fields */}\r\n      {showShortestPathInputs && (\r\n        <>\r\n          <input\r\n            className=\"shortestpathop\"\r\n            type=\"text\"\r\n            placeholder=\"Start Node\"\r\n            onChange={(e) =>\r\n              setShortestPathInput({ ...shortestPathInput, startNode: e.target.value })\r\n            }\r\n            style={{ marginLeft: \"10px\" }}\r\n          />\r\n          <input\r\n            className=\"shortestpathop\"\r\n            type=\"text\"\r\n            placeholder=\"End Node\"\r\n            onChange={(e) =>\r\n              setShortestPathInput({ ...shortestPathInput, endNode: e.target.value })\r\n            }\r\n            style={{ marginLeft: \"10px\" }}\r\n          />\r\n          <button onClick={findShortestPath}>Get Path</button>\r\n        </>\r\n      )}\r\n    </div>\r\n          <button className=\"operation_button\" onClick={handleMST}>MST</button>\r\n        </div>\r\n  \r\n        {/* Graph Display */}\r\n        <div\r\n          className=\"graph-display\"\r\n          ref={graphContainerRef}\r\n          style={{\r\n            alignItems: \"flex-end\",\r\n            overflow: \"auto\",\r\n            maxWidth: \"69%\",\r\n            height: \"450px\"\r\n          }}\r\n        >\r\n          <svg ref={svgRef} width=\"1000\" height=\"450\" style={{ border: \"1px solid black\" }}></svg>\r\n        </div>\r\n      </div>\r\n  \r\n      {/* Results Section */}\r\n      {topoSortResult && (\r\n        <div className=\"operation-result\">\r\n          <h3>Topological Sort:</h3>\r\n          <p>{topoSortResult}</p>\r\n        </div>\r\n      )}\r\n  \r\n      {shortestPathResult && (\r\n        <div className=\"operation-result\">\r\n          <h3>Shortest Path:</h3>\r\n          <p>{shortestPathResult}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}