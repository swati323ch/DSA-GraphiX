{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, null, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, null, 24, 25]');\n  const [treeData, setTreeData] = useState(null);\n\n  // Function to build the tree from a level-order array\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n\n  // Calculate horizontal positions dynamically based on subtree width\n  const calculateNodePositions = (node, depth = 0, x = 0, positions = {}, verticalSpacing = 120) => {\n    if (!node) return 0;\n    const spacing = 80; // Base horizontal spacing between nodes\n\n    // Recursively calculate the width for the left and right subtrees\n    const leftWidth = calculateNodePositions(node.left, depth + 1, x, positions, verticalSpacing);\n    const rightWidth = calculateNodePositions(node.right, depth + 1, x + leftWidth + spacing, positions, verticalSpacing);\n\n    // Calculate the total width of the current node and its subtrees\n    const totalWidth = leftWidth + rightWidth + spacing;\n    // Position the current node at the center between left and right subtrees\n    const currentX = x + leftWidth + spacing / 2;\n\n    // Save the position for the current node\n    positions[node.value] = {\n      x: currentX,\n      y: depth * verticalSpacing\n    };\n    return totalWidth;\n  };\n\n  // Render the tree with dynamically calculated positions\n  const renderTree = (node, positions, parentX = null, parentY = null) => {\n    if (!node) return null;\n\n    // Get node's position\n    const {\n      x,\n      y\n    } = positions[node.value];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && parentY !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY + 20,\n        x2: x,\n        y2: y - 20,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"circle-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: \"30\",\n          className: \"tree-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          textAnchor: \"middle\",\n          dy: \"5\",\n          fill: \"white\",\n          fontWeight: \"bold\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), renderTree(node.left, positions, x, y), renderTree(node.right, positions, x, y)]\n    }, void 0, true);\n  };\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n\n  // Generate positions for the nodes\n  const positions = {};\n  let maxWidth = 0;\n  let maxHeight = 0;\n  if (treeData) {\n    maxWidth = calculateNodePositions(treeData, 0, 500, positions);\n    maxHeight = Math.max(...Object.values(positions).map(pos => pos.y)) + 120; // Add padding for last level\n  }\n\n  // Add padding and adjust SVG dimensions dynamically\n  const padding = 100;\n  const svgWidth = maxWidth + padding * 2; // Width includes padding\n  const svgHeight = maxHeight + padding * 2; // Height includes padding\n\n  // Adjust viewBox to center the tree\n  const viewBoxX = -padding;\n  const viewBoxY = -padding;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input-box\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleDownload,\n        children: \"Download Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: `${viewBoxX} ${viewBoxY} ${svgWidth} ${svgHeight}`,\n        width: svgWidth // Set width to SVG's full calculated width\n        ,\n        height: svgHeight // Set height to SVG's full calculated height\n        ,\n        children: treeData && renderTree(treeData, positions)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"68pEHzKzgPkp0O5XmwNqiKKWerE=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","buildTree","arr","length","nodes","map","value","left","right","i","j","handleVisualize","parsedArray","JSON","parse","error","alert","calculateNodePositions","node","depth","x","positions","verticalSpacing","spacing","leftWidth","rightWidth","totalWidth","currentX","y","renderTree","parentX","parentY","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","cx","cy","r","textAnchor","dy","fill","fontWeight","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","maxWidth","maxHeight","Math","max","Object","values","pos","padding","svgWidth","svgHeight","viewBoxX","viewBoxY","onChange","e","target","placeholder","onClick","id","viewBox","width","height","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, null, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, null, 24, 25]');\r\n  const [treeData, setTreeData] = useState(null);\r\n\r\n  // Function to build the tree from a level-order array\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n\r\n    const nodes = arr.map((value) => (value !== null ? { value, left: null, right: null } : null));\r\n\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n\r\n    return nodes[0];\r\n  };\r\n\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  // Calculate horizontal positions dynamically based on subtree width\r\n  const calculateNodePositions = (node, depth = 0, x = 0, positions = {}, verticalSpacing = 120) => {\r\n    if (!node) return 0;\r\n\r\n    const spacing = 80; // Base horizontal spacing between nodes\r\n\r\n    // Recursively calculate the width for the left and right subtrees\r\n    const leftWidth = calculateNodePositions(node.left, depth + 1, x, positions, verticalSpacing);\r\n    const rightWidth = calculateNodePositions(node.right, depth + 1, x + leftWidth + spacing, positions, verticalSpacing);\r\n\r\n    // Calculate the total width of the current node and its subtrees\r\n    const totalWidth = leftWidth + rightWidth + spacing;\r\n    // Position the current node at the center between left and right subtrees\r\n    const currentX = x + leftWidth + spacing / 2;\r\n\r\n    // Save the position for the current node\r\n    positions[node.value] = { x: currentX, y: depth * verticalSpacing };\r\n\r\n    return totalWidth;\r\n  };\r\n\r\n  // Render the tree with dynamically calculated positions\r\n  const renderTree = (node, positions, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    // Get node's position\r\n    const { x, y } = positions[node.value];\r\n\r\n    return (\r\n      <>\r\n        {/* Draw line to parent node */}\r\n        {parentX !== null && parentY !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY + 20}\r\n            x2={x}\r\n            y2={y - 20}\r\n            stroke=\"black\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        )}\r\n        {/* Draw node */}\r\n        <g className=\"circle-group\">\r\n          <circle cx={x} cy={y} r=\"30\" className=\"tree-circle\" />\r\n          <text x={x} y={y} textAnchor=\"middle\" dy=\"5\" fill=\"white\" fontWeight=\"bold\">\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n        {/* Recursive rendering of children */}\r\n        {renderTree(node.left, positions, x, y)}\r\n        {renderTree(node.right, positions, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  // Generate positions for the nodes\r\n  const positions = {};\r\n  let maxWidth = 0;\r\n  let maxHeight = 0;\r\n  if (treeData) {\r\n    maxWidth = calculateNodePositions(treeData, 0, 500, positions);\r\n    maxHeight = Math.max(...Object.values(positions).map(pos => pos.y)) + 120;  // Add padding for last level\r\n  }\r\n\r\n  // Add padding and adjust SVG dimensions dynamically\r\n  const padding = 100;\r\n  const svgWidth = maxWidth + padding * 2; // Width includes padding\r\n  const svgHeight = maxHeight + padding * 2; // Height includes padding\r\n\r\n  // Adjust viewBox to center the tree\r\n  const viewBoxX = -padding;\r\n  const viewBoxY = -padding;\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n      <textarea\r\n        className=\"input-box\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n      />\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"download-button\" onClick={handleDownload}>\r\n          Download Tree\r\n        </button>\r\n      </div>\r\n      <div className=\"canvas-container\">\r\n        {/* Allow scrolling in both directions */}\r\n        <svg\r\n          id=\"treeCanvas\"\r\n          className=\"tree-canvas\"\r\n          viewBox={`${viewBoxX} ${viewBoxY} ${svgWidth} ${svgHeight}`}\r\n          width={svgWidth}  // Set width to SVG's full calculated width\r\n          height={svgHeight} // Set height to SVG's full calculated height\r\n        >\r\n          {treeData && renderTree(treeData, positions)}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}