{"ast":null,"code":"import _objectSpread from\"C:/Users/hp/Desktop/new/algo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useRef,useState}from\"react\";import*as d3 from\"d3\";import{toPng}from\"html-to-image\";import\"./GraphVisualization.css\";import db from\"./assets/down-arrow_752650.png\";import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const GraphVisualization=()=>{const[nodes,setNodes]=useState([]);const[edges,setEdges]=useState([]);const[input,setInput]=useState(\"\");const[error,setError]=useState(\"\");const[isDirected,setIsDirected]=useState(true);const[queueState,setQueueState]=useState([]);const[visitedNodes,setVisitedNodes]=useState(new Set());const[topoSortResult,setTopoSortResult]=useState(\"\");const[shortestPathResult,setShortestPathResult]=useState(\"\");const[showShortestPathInputs,setShowShortestPathInputs]=useState(false);const[shortestPathInput,setShortestPathInput]=useState({startNode:\"\",endNode:\"\"});const[highlightedNodes,setHighlightedNodes]=useState([]);const svgRef=useRef();const graphContainerRef=useRef();// Ref for the graph container\nconst handleInputChange=e=>{const value=e.target.value;setInput(value);validateInput(value);};const validateInput=input=>{try{const lines=input.trim().split(\"\\n\");const newNodes=[];const newEdges=[];lines.forEach(line=>{const parts=line.trim().split(\" \");if(parts.length<2||isNaN(parts[0])||isNaN(parts[1])){throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");}const[from,to,weight]=parts;if(!newNodes.some(node=>node.id===from))newNodes.push({id:from});if(!newNodes.some(node=>node.id===to))newNodes.push({id:to});// Handle optional weight\nconst edgeWeight=weight?parseInt(weight):null;// Set to null if no weight provided\nnewEdges.push({source:from,target:to,weight:edgeWeight});if(!isDirected){newEdges.push({source:to,target:from,weight:edgeWeight});}});const uniqueEdges=newEdges.filter((edge,index,self)=>index===self.findIndex(e=>e.source===edge.source&&e.target===edge.target||e.source===edge.target&&e.target===edge.source));setNodes(newNodes);setEdges(uniqueEdges);setError(\"\");}catch(error){setError(error.message);}};const downloadGraph=()=>{if(graphContainerRef.current){toPng(graphContainerRef.current).then(dataUrl=>{const link=document.createElement(\"a\");link.download=\"graph_visualization.png\";link.href=dataUrl;link.click();}).catch(err=>{console.error(\"Failed to download graph as PNG:\",err);});}};/*\r\n  useEffect(() => {\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove(); // Clear previous content\r\n\r\n  if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n  const initialWidth = 800;\r\n  const initialHeight = 400;\r\n\r\n  // Expandable boundaries for scrollable graph\r\n  let graphExtent = {\r\n    xMin: 0,\r\n    xMax: initialWidth,\r\n    yMin: 0,\r\n    yMax: initialHeight,\r\n  };\r\n\r\n  // Define simulation with forces\r\n  const simulation = d3\r\n    .forceSimulation(nodes)\r\n    .force(\r\n      \"link\",\r\n      d3\r\n        .forceLink(edges)\r\n        .id((d) => d.id)\r\n        .distance(160)\r\n    )\r\n    .force(\"charge\", d3.forceManyBody().strength(-500))\r\n    .force(\"center\", d3.forceCenter(initialWidth / 2, initialHeight / 2))\r\n    .force(\"collision\", d3.forceCollide().radius(40))\r\n    .on(\"tick\", ticked);\r\n\r\n  // Define arrow markers for directed edges\r\n  svg\r\n    .append(\"defs\")\r\n    .append(\"marker\")\r\n    .attr(\"id\", \"arrowhead\")\r\n    .attr(\"viewBox\", \"0 -5 10 10\")\r\n    .attr(\"refX\", 28)\r\n    .attr(\"refY\", 0)\r\n    .attr(\"orient\", \"auto\")\r\n    .attr(\"markerWidth\", 6)\r\n    .attr(\"markerHeight\", 6)\r\n    .append(\"path\")\r\n    .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n    .attr(\"fill\", \"#555\");\r\n\r\n  // Add edges\r\n  const link = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"links\")\r\n    .selectAll(\"line\")\r\n    .data(edges)\r\n    .enter()\r\n    .append(\"line\")\r\n    .attr(\"stroke\", \"#aaa\")\r\n    .attr(\"stroke-width\", 2)\r\n    .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n\r\n  // Add nodes\r\n  const node = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"nodes\")\r\n    .selectAll(\"circle\")\r\n    .data(nodes)\r\n    .enter()\r\n    .append(\"circle\")\r\n    .attr(\"r\", 24)\r\n    .attr(\"stroke\", \"#333\")\r\n    .attr(\"stroke-width\", 1.5)\r\n    .attr(\"fill\", \"#69b3a2\")\r\n    .call(\r\n      d3\r\n        .drag()\r\n        .on(\"start\", dragStarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragEnded)\r\n    );\r\n\r\n  // Add labels\r\n  const label = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"labels\")\r\n    .selectAll(\"text\")\r\n    .data(nodes)\r\n    .enter()\r\n    .append(\"text\")\r\n    .text((d) => d.id)\r\n    .attr(\"font-size\", \"12px\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dy\", \".35em\")\r\n    .attr(\"fill\", \"#fff\");\r\n\r\n  // Add edge labels\r\n  const edgeLabels = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"edge-labels\")\r\n    .selectAll(\"text\")\r\n    .data(edges)\r\n    .enter()\r\n    .append(\"text\")\r\n    .text((d) => (d.weight !== null ? d.weight : \"\"))\r\n    .attr(\"font-size\", \"12px\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dy\", \"-10px\")\r\n    .attr(\"fill\", \"black\");\r\n\r\n  // Update positions on tick\r\n  function ticked() {\r\n    link\r\n      .attr(\"x1\", (d) => d.source.x)\r\n      .attr(\"y1\", (d) => d.source.y)\r\n      .attr(\"x2\", (d) => d.target.x)\r\n      .attr(\"y2\", (d) => d.target.y);\r\n\r\n    node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n    label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n\r\n    edgeLabels\r\n      .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n      .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n\r\n    // Update graph extent dynamically based on node positions\r\n    nodes.forEach((d) => {\r\n      graphExtent.xMin = Math.min(graphExtent.xMin, d.x);\r\n      graphExtent.xMax = Math.max(graphExtent.xMax, d.x);\r\n      graphExtent.yMin = Math.min(graphExtent.yMin, d.y);\r\n      graphExtent.yMax = Math.max(graphExtent.yMax, d.y);\r\n    });\r\n\r\n    // Add padding around the graph\r\n    const padding = 50;\r\n    const newWidth = graphExtent.xMax - graphExtent.xMin + 2 * padding;\r\n    const newHeight = graphExtent.yMax - graphExtent.yMin + 2 * padding;\r\n\r\n    // Adjust the SVG viewBox dynamically\r\n    svg\r\n      .attr(\r\n        \"viewBox\",\r\n        `${graphExtent.xMin - padding} ${graphExtent.yMin - padding} ${newWidth} ${newHeight}`\r\n      )\r\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\r\n  }\r\n\r\n  // Dragging logic\r\n  function dragStarted(event, d) {\r\n    if (!event.active) simulation.alphaTarget(0.3).restart();\r\n    d.fx = d.x;\r\n    d.fy = d.y;\r\n  }\r\n\r\n  function dragged(event, d) {\r\n    d.fx = event.x;\r\n    d.fy = event.y;\r\n  }\r\n\r\n  function dragEnded(event, d) {\r\n    if (!event.active) simulation.alphaTarget(0);\r\n    d.fx = null;\r\n    d.fy = null;\r\n  }\r\n\r\n  return () => simulation.stop();\r\n}, [nodes, edges, isDirected]);\r\n\r\n*/useEffect(()=>{const svg=d3.select(svgRef.current);svg.selectAll(\"*\").remove();// Clear previous content\nif(nodes.length===0||edges.length===0)return;const initialWidth=800;const initialHeight=400;// Expandable boundaries for scrollable graph\nlet graphExtent={xMin:0,xMax:initialWidth,yMin:0,yMax:initialHeight};// Define simulation with forces\nconst simulation=d3.forceSimulation(nodes).force(\"link\",d3.forceLink(edges).id(d=>d.id).distance(160)).force(\"charge\",d3.forceManyBody().strength(-500)).force(\"center\",d3.forceCenter(initialWidth/2,initialHeight/2)).force(\"collision\",d3.forceCollide().radius(40)).on(\"tick\",ticked);// Define arrow markers for directed edges\nsvg.append(\"defs\").append(\"marker\").attr(\"id\",\"arrowhead\").attr(\"viewBox\",\"0 -5 10 10\").attr(\"refX\",28).attr(\"refY\",0).attr(\"orient\",\"auto\").attr(\"markerWidth\",6).attr(\"markerHeight\",6).append(\"path\").attr(\"d\",\"M0,-5L10,0L0,5\").attr(\"fill\",\"#555\");// Add edges\nconst link=svg.append(\"g\").attr(\"class\",\"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\",\"#aaa\").attr(\"stroke-width\",2).attr(\"marker-end\",isDirected?\"url(#arrowhead)\":null);// Add nodes\nconst node=svg.append(\"g\").attr(\"class\",\"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\",24).attr(\"stroke\",\"#333\").attr(\"stroke-width\",1.5).attr(\"fill\",\"#69b3a2\").attr(\"class\",d=>\"node node-\".concat(d.id))// Add unique class\n.call(d3.drag().on(\"start\",dragStarted).on(\"drag\",dragged).on(\"end\",dragEnded));// Add labels\nconst label=svg.append(\"g\").attr(\"class\",\"labels\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d=>d.id).attr(\"font-size\",\"12px\").attr(\"text-anchor\",\"middle\").attr(\"dy\",\".35em\").attr(\"fill\",\"#fff\");// Add edge labels\nconst edgeLabels=svg.append(\"g\").attr(\"class\",\"edge-labels\").selectAll(\"text\").data(edges).enter().append(\"text\").text(d=>d.weight!==null?d.weight:\"\").attr(\"font-size\",\"12px\").attr(\"text-anchor\",\"middle\").attr(\"dy\",\"-10px\").attr(\"fill\",\"black\");// Update positions on tick\nfunction ticked(){link.attr(\"x1\",d=>d.source.x).attr(\"y1\",d=>d.source.y).attr(\"x2\",d=>d.target.x).attr(\"y2\",d=>d.target.y);node.attr(\"cx\",d=>d.x).attr(\"cy\",d=>d.y);label.attr(\"x\",d=>d.x).attr(\"y\",d=>d.y);edgeLabels.attr(\"x\",d=>(d.source.x+d.target.x)/2).attr(\"y\",d=>(d.source.y+d.target.y)/2);// Update graph extent dynamically based on node positions\nnodes.forEach(d=>{graphExtent.xMin=Math.min(graphExtent.xMin,d.x);graphExtent.xMax=Math.max(graphExtent.xMax,d.x);graphExtent.yMin=Math.min(graphExtent.yMin,d.y);graphExtent.yMax=Math.max(graphExtent.yMax,d.y);});// Add padding around the graph\nconst padding=50;const newWidth=graphExtent.xMax-graphExtent.xMin+2*padding;const newHeight=graphExtent.yMax-graphExtent.yMin+2*padding;// Adjust the SVG viewBox dynamically\nsvg.attr(\"viewBox\",\"\".concat(graphExtent.xMin-padding,\" \").concat(graphExtent.yMin-padding,\" \").concat(newWidth,\" \").concat(newHeight)).attr(\"preserveAspectRatio\",\"xMidYMid meet\");}// Dragging logic\nfunction dragStarted(event,d){if(!event.active)simulation.alphaTarget(0.3).restart();d.fx=d.x;d.fy=d.y;}function dragged(event,d){d.fx=event.x;d.fy=event.y;}function dragEnded(event,d){if(!event.active)simulation.alphaTarget(0);d.fx=null;d.fy=null;}return()=>simulation.stop();},[nodes,edges,isDirected]);const handleBFS=()=>{const startNode=nodes[0].id;const queue=[startNode];const visited=new Set();visited.add(startNode);const bfsTraversal=function(){let prevNode=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;if(queue.length===0){// Remove highlight for the last processed node\nif(prevNode)d3.select(\".node-\".concat(prevNode)).classed(\"highlighted\",false);return;}const currentNode=queue.shift();// Dequeue node\nsetQueueState(prevQueueState=>[...prevQueueState,currentNode]);setVisitedNodes(prevVisitedNodes=>new Set(prevVisitedNodes.add(currentNode)));// Remove highlight for the previously processed node\nif(prevNode){d3.select(\".node-\".concat(prevNode)).classed(\"highlighted\",false);}// Highlight the current node\nd3.select(\".node-\".concat(currentNode)).classed(\"highlighted\",true);const neighbors=edges.filter(edge=>edge.source.id===currentNode||edge.target.id===currentNode).map(edge=>edge.source.id===currentNode?edge.target.id:edge.source.id);neighbors.forEach(neighbor=>{if(!visited.has(neighbor)){visited.add(neighbor);queue.push(neighbor);}});setTimeout(()=>bfsTraversal(currentNode),500);};bfsTraversal();setShowShortestPathInputs(false);};const handleDFS=()=>{const startNode=nodes[0].id;const visited=new Set();const dfsTraversal=function(currentNode){let prevNode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(visited.has(currentNode))return;visited.add(currentNode);setVisitedNodes(prevVisitedNodes=>new Set(prevVisitedNodes.add(currentNode)));// Remove highlight for the previously processed node\nif(prevNode){d3.select(\".node-\".concat(prevNode)).classed(\"highlighted\",false);}// Highlight the current node\nd3.select(\".node-\".concat(currentNode)).classed(\"highlighted\",true);const neighbors=edges.filter(edge=>edge.source.id===currentNode||edge.target.id===currentNode).map(edge=>edge.source.id===currentNode?edge.target.id:edge.source.id);setTimeout(()=>{neighbors.forEach(neighbor=>{if(!visited.has(neighbor)){dfsTraversal(neighbor,currentNode);}});if(!neighbors.length&&prevNode!==null){d3.select(\".node-\".concat(currentNode)).classed(\"highlighted\",false);}},500);};dfsTraversal(startNode);setShowShortestPathInputs(false);};const handleTopoSort=()=>{const inDegree={};nodes.forEach(node=>{inDegree[node.id]=0;});edges.forEach(edge=>{inDegree[edge.target.id]=(inDegree[edge.target.id]||0)+1;});const queue=[];nodes.forEach(node=>{if(inDegree[node.id]===0){queue.push(node.id);}});let topologicalOrder=[];let visitedCount=0;while(queue.length>0){const currentNode=queue.shift();// Dequeue node\ntopologicalOrder.push(currentNode);// Add it to topological order\nvisitedCount++;// Find all neighbors (edges) of the current node and decrease their in-degree\nedges.forEach(edge=>{if(edge.source.id===currentNode){const neighbor=edge.target.id;inDegree[neighbor]--;// If in-degree of neighbor becomes 0, add it to the queue\nif(inDegree[neighbor]===0){queue.push(neighbor);}}});setShowShortestPathInputs(false);}// Check if there was a cycle (graph is not a DAG)\nif(visitedCount!==nodes.length){setError(\"The graph is not a Directed Acyclic Graph (DAG). Topological Sort not possible.\");return;}setError(\"\");// Clear previous errors\nsetTopoSortResult(topologicalOrder.join(\" → \"));};const handleGetPath=()=>{setShowShortestPathInputs(true);};const findShortestPath=()=>{const{startNode,endNode}=shortestPathInput;// Validate input\nif(!startNode||!endNode){setError(\"Please provide both start and end nodes.\");setShortestPathResult(\"\");setHighlightedNodes([]);// Clear highlighted nodes\nreturn;}const graph=new Map();edges.forEach(_ref=>{let{source,target,weight}=_ref;if(!graph.has(source.id))graph.set(source.id,[]);graph.get(source.id).push({node:target.id,weight});if(!isDirected){if(!graph.has(target.id))graph.set(target.id,[]);graph.get(target.id).push({node:source.id,weight});}});const distances={};const previousNodes={};const pq=new Set(nodes.map(node=>node.id));// Priority Queue\nnodes.forEach(_ref2=>{let{id}=_ref2;distances[id]=id===startNode?0:Infinity;previousNodes[id]=null;});// Dijkstra's Algorithm\nwhile(pq.size){const current=[...pq].reduce((a,b)=>distances[a]<distances[b]?a:b);pq.delete(current);if(current===endNode)break;// Process neighbors\nconst neighbors=graph.get(current)||[];neighbors.forEach(_ref3=>{let{node:neighbor,weight}=_ref3;const alt=distances[current]+weight;if(alt<distances[neighbor]){distances[neighbor]=alt;previousNodes[neighbor]=current;}});}// Reconstruct the shortest path\nlet path=[];let currentNode=endNode;while(currentNode){path.unshift(currentNode);currentNode=previousNodes[currentNode];}if(path[0]!==startNode){setError(\"No path exists between \".concat(startNode,\" and \").concat(endNode,\".\"));setShortestPathResult(\"\");setHighlightedNodes([]);// Clear highlighted nodes\n}else{setError(\"\");setShortestPathResult(path.join(\" → \"));setHighlightedNodes(path);// Set highlighted nodes for the shortest path\n// To Highlight the nodes in the shortest path\npath.forEach(nodeId=>{d3.select(\".node-\".concat(nodeId)).classed(\"highlighted\",true);});setTimeout(()=>{path.forEach(nodeId=>{d3.select(\".node-\".concat(nodeId)).classed(\"highlighted\",false);});},2000);}setShowShortestPathInputs(false);};const handleMST=()=>{if(edges.length===0||nodes.length===0){setError(\"Graph must have nodes and edges to compute MST.\");return;}const sortedEdges=[...edges].sort((a,b)=>(a.weight||0)-(b.weight||0));const parent={};const rank={};nodes.forEach(_ref4=>{let{id}=_ref4;parent[id]=id;rank[id]=0;});const find=node=>{if(parent[node]!==node){parent[node]=find(parent[node]);}return parent[node];};const union=(node1,node2)=>{const root1=find(node1);const root2=find(node2);if(root1!==root2){if(rank[root1]>rank[root2]){parent[root2]=root1;}else if(rank[root1]<rank[root2]){parent[root1]=root2;}else{parent[root2]=root1;rank[root1]+=1;}}};// Step 3: Construct MST\nconst mstEdges=[];sortedEdges.forEach(edge=>{if(find(edge.source.id)!==find(edge.target.id)){mstEdges.push(edge);union(edge.source.id,edge.target.id);}});// Highlight MST edges\nconst svg=d3.select(svgRef.current);svg.selectAll(\".mst-highlight\").classed(\"mst-highlight\",false);// Reset previous highlights\nmstEdges.forEach(edge=>{svg.selectAll(\"line\").filter(d=>d.source.id===edge.source.id&&d.target.id===edge.target.id).classed(\"mst-highlight\",true);});setError(\"\");// Clear any previous error\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"graph-visualization-container\",children:[/*#__PURE__*/_jsxs(\"h1\",{children:[isDirected?\"Directed\":\"Undirected\",\" Graph Visualization\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsx(\"button\",{className:\"toggle-button \".concat(isDirected?\"active\":\"\"),onClick:()=>{setIsDirected(true);validateInput(input);},children:\"Directed\"}),/*#__PURE__*/_jsx(\"button\",{className:\"toggle-button \".concat(!isDirected?\"active\":\"\"),onClick:()=>{setIsDirected(false);validateInput(input);},children:\"Undirected\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-download-container\",children:[/*#__PURE__*/_jsx(\"textarea\",{placeholder:\"Enter edges (e.g., \\\"1 2 3\\\" for edge with weight 3) one per line\",onChange:handleInputChange,className:\"input-container\",value:input,rows:\"5\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"download-container\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"download-button\",onClick:downloadGraph,children:/*#__PURE__*/_jsx(\"img\",{src:db,alt:\"Download\",className:\"download-icon\"})}),/*#__PURE__*/_jsx(\"p\",{className:\"download-txt\",children:\"Download Graph\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"graphdislpay-button-wraper\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"operation-button-container\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"operation_button\",onClick:handleDFS,children:\"BFS\"}),/*#__PURE__*/_jsx(\"button\",{className:\"operation_button\",onClick:handleBFS,children:\"DFS\"}),/*#__PURE__*/_jsx(\"button\",{className:\"operation_button\",onClick:handleTopoSort,children:\"Topo Sort\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"operation_button\",onClick:handleGetPath,children:\"Shortest Path\"}),showShortestPathInputs&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{className:\"shortestpathop\",type:\"text\",placeholder:\"Start Node\",onChange:e=>setShortestPathInput(_objectSpread(_objectSpread({},shortestPathInput),{},{startNode:e.target.value})),style:{marginLeft:\"10px\"}}),/*#__PURE__*/_jsx(\"input\",{className:\"shortestpathop\",type:\"text\",placeholder:\"End Node\",onChange:e=>setShortestPathInput(_objectSpread(_objectSpread({},shortestPathInput),{},{endNode:e.target.value})),style:{marginLeft:\"10px\"}}),/*#__PURE__*/_jsx(\"button\",{onClick:findShortestPath,children:\"Get Path\"})]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"operation_button\",onClick:handleMST,children:\"MST\"}),topoSortResult&&/*#__PURE__*/_jsxs(\"div\",{className:\"operation-result\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Topological Sort : \"}),/*#__PURE__*/_jsx(\"p\",{children:topoSortResult})]}),shortestPathResult&&/*#__PURE__*/_jsxs(\"div\",{className:\"operation-result\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Shortest Path : \"}),/*#__PURE__*/_jsx(\"p\",{children:shortestPathResult})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"graph-display\",ref:graphContainerRef,style:{alignItems:\"flex-end\",overflow:\"auto\",maxWidth:\"69%\",height:\"450px\"},children:/*#__PURE__*/_jsx(\"svg\",{ref:svgRef,width:\"1000\",height:\"450\",style:{border:\"1px solid black\"}})})]})]});};export default GraphVisualization;","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","GraphVisualization","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","Set","topoSortResult","setTopoSortResult","shortestPathResult","setShortestPathResult","showShortestPathInputs","setShowShortestPathInputs","shortestPathInput","setShortestPathInput","startNode","endNode","highlightedNodes","setHighlightedNodes","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","uniqueEdges","filter","edge","index","self","findIndex","message","downloadGraph","current","then","dataUrl","link","document","createElement","download","href","click","catch","err","console","svg","select","selectAll","remove","initialWidth","initialHeight","graphExtent","xMin","xMax","yMin","yMax","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","forceCollide","radius","on","ticked","append","attr","data","enter","concat","call","drag","dragStarted","dragged","dragEnded","label","text","edgeLabels","x","y","Math","min","max","padding","newWidth","newHeight","event","active","alphaTarget","restart","fx","fy","stop","handleBFS","queue","visited","add","bfsTraversal","prevNode","arguments","undefined","classed","currentNode","shift","prevQueueState","prevVisitedNodes","neighbors","map","neighbor","has","setTimeout","handleDFS","dfsTraversal","handleTopoSort","inDegree","topologicalOrder","visitedCount","join","handleGetPath","findShortestPath","graph","Map","_ref","set","get","distances","previousNodes","pq","_ref2","Infinity","size","reduce","a","b","delete","_ref3","alt","path","unshift","nodeId","handleMST","sortedEdges","sort","parent","rank","_ref4","find","union","node1","node2","root1","root2","mstEdges","className","children","onClick","placeholder","onChange","rows","src","type","_objectSpread","style","marginLeft","ref","alignItems","overflow","maxWidth","height","width","border"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\";\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]);\r\n  const [visitedNodes, setVisitedNodes] = useState(new Set());\r\n  const [topoSortResult, setTopoSortResult] = useState(\"\");\r\n  const [shortestPathResult, setShortestPathResult] = useState(\"\");\r\n  const [showShortestPathInputs, setShowShortestPathInputs] = useState(false);\r\n  const [shortestPathInput, setShortestPathInput] = useState({\r\n    startNode: \"\",\r\n    endNode: \"\",\r\n  });\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n\r\n\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef(); // Ref for the graph container\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n  \r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\r\n        }\r\n  \r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n  \r\n        // Handle optional weight\r\n        const edgeWeight = weight ? parseInt(weight) : null;  // Set to null if no weight provided\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n  \r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n  \r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (e) =>\r\n              (e.source === edge.source && e.target === edge.target) ||\r\n              (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n  \r\n      setNodes(newNodes);\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  \r\n\r\n  const downloadGraph = () => {\r\n    if (graphContainerRef.current) {\r\n      toPng(graphContainerRef.current)\r\n        .then((dataUrl) => {\r\n          const link = document.createElement(\"a\");\r\n          link.download = \"graph_visualization.png\";\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to download graph as PNG:\", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  /*\r\n  useEffect(() => {\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove(); // Clear previous content\r\n\r\n  if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n  const initialWidth = 800;\r\n  const initialHeight = 400;\r\n\r\n  // Expandable boundaries for scrollable graph\r\n  let graphExtent = {\r\n    xMin: 0,\r\n    xMax: initialWidth,\r\n    yMin: 0,\r\n    yMax: initialHeight,\r\n  };\r\n\r\n  // Define simulation with forces\r\n  const simulation = d3\r\n    .forceSimulation(nodes)\r\n    .force(\r\n      \"link\",\r\n      d3\r\n        .forceLink(edges)\r\n        .id((d) => d.id)\r\n        .distance(160)\r\n    )\r\n    .force(\"charge\", d3.forceManyBody().strength(-500))\r\n    .force(\"center\", d3.forceCenter(initialWidth / 2, initialHeight / 2))\r\n    .force(\"collision\", d3.forceCollide().radius(40))\r\n    .on(\"tick\", ticked);\r\n\r\n  // Define arrow markers for directed edges\r\n  svg\r\n    .append(\"defs\")\r\n    .append(\"marker\")\r\n    .attr(\"id\", \"arrowhead\")\r\n    .attr(\"viewBox\", \"0 -5 10 10\")\r\n    .attr(\"refX\", 28)\r\n    .attr(\"refY\", 0)\r\n    .attr(\"orient\", \"auto\")\r\n    .attr(\"markerWidth\", 6)\r\n    .attr(\"markerHeight\", 6)\r\n    .append(\"path\")\r\n    .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n    .attr(\"fill\", \"#555\");\r\n\r\n  // Add edges\r\n  const link = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"links\")\r\n    .selectAll(\"line\")\r\n    .data(edges)\r\n    .enter()\r\n    .append(\"line\")\r\n    .attr(\"stroke\", \"#aaa\")\r\n    .attr(\"stroke-width\", 2)\r\n    .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n\r\n  // Add nodes\r\n  const node = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"nodes\")\r\n    .selectAll(\"circle\")\r\n    .data(nodes)\r\n    .enter()\r\n    .append(\"circle\")\r\n    .attr(\"r\", 24)\r\n    .attr(\"stroke\", \"#333\")\r\n    .attr(\"stroke-width\", 1.5)\r\n    .attr(\"fill\", \"#69b3a2\")\r\n    .call(\r\n      d3\r\n        .drag()\r\n        .on(\"start\", dragStarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragEnded)\r\n    );\r\n\r\n  // Add labels\r\n  const label = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"labels\")\r\n    .selectAll(\"text\")\r\n    .data(nodes)\r\n    .enter()\r\n    .append(\"text\")\r\n    .text((d) => d.id)\r\n    .attr(\"font-size\", \"12px\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dy\", \".35em\")\r\n    .attr(\"fill\", \"#fff\");\r\n\r\n  // Add edge labels\r\n  const edgeLabels = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"edge-labels\")\r\n    .selectAll(\"text\")\r\n    .data(edges)\r\n    .enter()\r\n    .append(\"text\")\r\n    .text((d) => (d.weight !== null ? d.weight : \"\"))\r\n    .attr(\"font-size\", \"12px\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dy\", \"-10px\")\r\n    .attr(\"fill\", \"black\");\r\n\r\n  // Update positions on tick\r\n  function ticked() {\r\n    link\r\n      .attr(\"x1\", (d) => d.source.x)\r\n      .attr(\"y1\", (d) => d.source.y)\r\n      .attr(\"x2\", (d) => d.target.x)\r\n      .attr(\"y2\", (d) => d.target.y);\r\n\r\n    node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n    label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n\r\n    edgeLabels\r\n      .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n      .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n\r\n    // Update graph extent dynamically based on node positions\r\n    nodes.forEach((d) => {\r\n      graphExtent.xMin = Math.min(graphExtent.xMin, d.x);\r\n      graphExtent.xMax = Math.max(graphExtent.xMax, d.x);\r\n      graphExtent.yMin = Math.min(graphExtent.yMin, d.y);\r\n      graphExtent.yMax = Math.max(graphExtent.yMax, d.y);\r\n    });\r\n\r\n    // Add padding around the graph\r\n    const padding = 50;\r\n    const newWidth = graphExtent.xMax - graphExtent.xMin + 2 * padding;\r\n    const newHeight = graphExtent.yMax - graphExtent.yMin + 2 * padding;\r\n\r\n    // Adjust the SVG viewBox dynamically\r\n    svg\r\n      .attr(\r\n        \"viewBox\",\r\n        `${graphExtent.xMin - padding} ${graphExtent.yMin - padding} ${newWidth} ${newHeight}`\r\n      )\r\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\r\n  }\r\n\r\n  // Dragging logic\r\n  function dragStarted(event, d) {\r\n    if (!event.active) simulation.alphaTarget(0.3).restart();\r\n    d.fx = d.x;\r\n    d.fy = d.y;\r\n  }\r\n\r\n  function dragged(event, d) {\r\n    d.fx = event.x;\r\n    d.fy = event.y;\r\n  }\r\n\r\n  function dragEnded(event, d) {\r\n    if (!event.active) simulation.alphaTarget(0);\r\n    d.fx = null;\r\n    d.fy = null;\r\n  }\r\n\r\n  return () => simulation.stop();\r\n}, [nodes, edges, isDirected]);\r\n\r\n*/ \r\nuseEffect(() => {\r\n  const svg = d3.select(svgRef.current);\r\n  svg.selectAll(\"*\").remove(); // Clear previous content\r\n\r\n  if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n  const initialWidth = 800;\r\n  const initialHeight = 400;\r\n\r\n  // Expandable boundaries for scrollable graph\r\n  let graphExtent = {\r\n    xMin: 0,\r\n    xMax: initialWidth,\r\n    yMin: 0,\r\n    yMax: initialHeight,\r\n  };\r\n\r\n  // Define simulation with forces\r\n  const simulation = d3\r\n    .forceSimulation(nodes)\r\n    .force(\r\n      \"link\",\r\n      d3\r\n        .forceLink(edges)\r\n        .id((d) => d.id)\r\n        .distance(160)\r\n    )\r\n    .force(\"charge\", d3.forceManyBody().strength(-500))\r\n    .force(\"center\", d3.forceCenter(initialWidth / 2, initialHeight / 2))\r\n    .force(\"collision\", d3.forceCollide().radius(40))\r\n    .on(\"tick\", ticked);\r\n\r\n  // Define arrow markers for directed edges\r\n  svg\r\n    .append(\"defs\")\r\n    .append(\"marker\")\r\n    .attr(\"id\", \"arrowhead\")\r\n    .attr(\"viewBox\", \"0 -5 10 10\")\r\n    .attr(\"refX\", 28)\r\n    .attr(\"refY\", 0)\r\n    .attr(\"orient\", \"auto\")\r\n    .attr(\"markerWidth\", 6)\r\n    .attr(\"markerHeight\", 6)\r\n    .append(\"path\")\r\n    .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n    .attr(\"fill\", \"#555\");\r\n\r\n  // Add edges\r\n  const link = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"links\")\r\n    .selectAll(\"line\")\r\n    .data(edges)\r\n    .enter()\r\n    .append(\"line\")\r\n    .attr(\"stroke\", \"#aaa\")\r\n    .attr(\"stroke-width\", 2)\r\n    .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n\r\n  // Add nodes\r\n  const node = svg\r\n  .append(\"g\")\r\n  .attr(\"class\", \"nodes\")\r\n  .selectAll(\"circle\")\r\n  .data(nodes)\r\n  .enter()\r\n  .append(\"circle\")\r\n  .attr(\"r\", 24)\r\n  .attr(\"stroke\", \"#333\")\r\n  .attr(\"stroke-width\", 1.5)\r\n  .attr(\"fill\", \"#69b3a2\")\r\n  .attr(\"class\", (d) => `node node-${d.id}`) // Add unique class\r\n  .call(\r\n    d3\r\n      .drag()\r\n      .on(\"start\", dragStarted)\r\n      .on(\"drag\", dragged)\r\n      .on(\"end\", dragEnded)\r\n  );\r\n\r\n  // Add labels\r\n  const label = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"labels\")\r\n    .selectAll(\"text\")\r\n    .data(nodes)\r\n    .enter()\r\n    .append(\"text\")\r\n    .text((d) => d.id)\r\n    .attr(\"font-size\", \"12px\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dy\", \".35em\")\r\n    .attr(\"fill\", \"#fff\");\r\n\r\n  // Add edge labels\r\n  const edgeLabels = svg\r\n    .append(\"g\")\r\n    .attr(\"class\", \"edge-labels\")\r\n    .selectAll(\"text\")\r\n    .data(edges)\r\n    .enter()\r\n    .append(\"text\")\r\n    .text((d) => (d.weight !== null ? d.weight : \"\"))\r\n    .attr(\"font-size\", \"12px\")\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"dy\", \"-10px\")\r\n    .attr(\"fill\", \"black\");\r\n\r\n  // Update positions on tick\r\n  function ticked() {\r\n    link\r\n      .attr(\"x1\", (d) => d.source.x)\r\n      .attr(\"y1\", (d) => d.source.y)\r\n      .attr(\"x2\", (d) => d.target.x)\r\n      .attr(\"y2\", (d) => d.target.y);\r\n\r\n    node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n    label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n\r\n    edgeLabels\r\n      .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n      .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n\r\n    // Update graph extent dynamically based on node positions\r\n    nodes.forEach((d) => {\r\n      graphExtent.xMin = Math.min(graphExtent.xMin, d.x);\r\n      graphExtent.xMax = Math.max(graphExtent.xMax, d.x);\r\n      graphExtent.yMin = Math.min(graphExtent.yMin, d.y);\r\n      graphExtent.yMax = Math.max(graphExtent.yMax, d.y);\r\n    });\r\n\r\n    // Add padding around the graph\r\n    const padding = 50;\r\n    const newWidth = graphExtent.xMax - graphExtent.xMin + 2 * padding;\r\n    const newHeight = graphExtent.yMax - graphExtent.yMin + 2 * padding;\r\n\r\n    // Adjust the SVG viewBox dynamically\r\n    svg\r\n      .attr(\r\n        \"viewBox\",\r\n        `${graphExtent.xMin - padding} ${graphExtent.yMin - padding} ${newWidth} ${newHeight}`\r\n      )\r\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\r\n  }\r\n\r\n  // Dragging logic\r\n  function dragStarted(event, d) {\r\n    if (!event.active) simulation.alphaTarget(0.3).restart();\r\n    d.fx = d.x;\r\n    d.fy = d.y;\r\n  }\r\n\r\n  function dragged(event, d) {\r\n    d.fx = event.x;\r\n    d.fy = event.y;\r\n  }\r\n\r\n  function dragEnded(event, d) {\r\n    if (!event.active) simulation.alphaTarget(0);\r\n    d.fx = null;\r\n    d.fy = null;\r\n  }\r\n\r\n  return () => simulation.stop();\r\n}, [nodes, edges, isDirected]);\r\n\r\n\r\n  const handleBFS = () => {\r\n    const startNode = nodes[0].id; \r\n    const queue = [startNode];\r\n    const visited = new Set();\r\n    visited.add(startNode);\r\n  \r\n    const bfsTraversal = (prevNode = null) => {\r\n      if (queue.length === 0) {\r\n        // Remove highlight for the last processed node\r\n        if (prevNode) d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n        return;\r\n      }\r\n  \r\n      const currentNode = queue.shift(); // Dequeue node\r\n      setQueueState((prevQueueState) => [...prevQueueState, currentNode]);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n  \r\n      // Remove highlight for the previously processed node\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n  \r\n      // Highlight the current node\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n  \r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n  \r\n      neighbors.forEach((neighbor) => {\r\n        if (!visited.has(neighbor)) {\r\n          visited.add(neighbor);\r\n          queue.push(neighbor);\r\n        }\r\n      });\r\n  \r\n      setTimeout(() => bfsTraversal(currentNode), 500); \r\n    };\r\n  \r\n    bfsTraversal();\r\n    setShowShortestPathInputs(false);\r\n  };\r\n  const handleDFS = () => {\r\n    const startNode = nodes[0].id; \r\n    const visited = new Set();\r\n  \r\n    const dfsTraversal = (currentNode, prevNode = null) => {\r\n      if (visited.has(currentNode)) return;\r\n  \r\n      visited.add(currentNode);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n  \r\n      // Remove highlight for the previously processed node\r\n      if (prevNode) {\r\n        d3.select(`.node-${prevNode}`).classed(\"highlighted\", false);\r\n      }\r\n  \r\n      // Highlight the current node\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n\r\n      const neighbors = edges\r\n        .filter(\r\n          (edge) =>\r\n            edge.source.id === currentNode || edge.target.id === currentNode\r\n        )\r\n        .map((edge) =>\r\n          edge.source.id === currentNode ? edge.target.id : edge.source.id\r\n        );\r\n  \r\n      setTimeout(() => {\r\n        neighbors.forEach((neighbor) => {\r\n          if (!visited.has(neighbor)) {\r\n            dfsTraversal(neighbor, currentNode);\r\n          }\r\n        });\r\n        if (!neighbors.length && prevNode !== null) {\r\n          d3.select(`.node-${currentNode}`).classed(\"highlighted\", false);\r\n        }\r\n      }, 500);\r\n    };\r\n  \r\n    dfsTraversal(startNode);\r\n    setShowShortestPathInputs(false);\r\n  };\r\n  const handleTopoSort = () => {\r\n    const inDegree = {};\r\n    nodes.forEach(node => {\r\n      inDegree[node.id] = 0;\r\n    });\r\n  \r\n    edges.forEach(edge => {\r\n      inDegree[edge.target.id] = (inDegree[edge.target.id] || 0) + 1;\r\n    });\r\n    const queue = [];\r\n    nodes.forEach(node => {\r\n      if (inDegree[node.id] === 0) {\r\n        queue.push(node.id);\r\n      }\r\n    });\r\n  \r\n    let topologicalOrder = [];\r\n    let visitedCount = 0;\r\n  \r\n    while (queue.length > 0) {\r\n      const currentNode = queue.shift(); // Dequeue node\r\n  \r\n      topologicalOrder.push(currentNode); // Add it to topological order\r\n      visitedCount++;\r\n  \r\n      // Find all neighbors (edges) of the current node and decrease their in-degree\r\n      edges.forEach(edge => {\r\n        if (edge.source.id === currentNode) {\r\n          const neighbor = edge.target.id;\r\n          inDegree[neighbor]--;\r\n  \r\n          // If in-degree of neighbor becomes 0, add it to the queue\r\n          if (inDegree[neighbor] === 0) {\r\n            queue.push(neighbor);\r\n          }\r\n        }\r\n      });\r\n      setShowShortestPathInputs(false);\r\n    }\r\n  \r\n    // Check if there was a cycle (graph is not a DAG)\r\n    if (visitedCount !== nodes.length) {\r\n      setError(\"The graph is not a Directed Acyclic Graph (DAG). Topological Sort not possible.\");\r\n      return;\r\n    }\r\n    setError(\"\"); // Clear previous errors\r\n    setTopoSortResult(topologicalOrder.join(\" → \"));\r\n  };\r\n  \r\n  const handleGetPath = () => {\r\n    setShowShortestPathInputs(true);\r\n  };\r\n  const findShortestPath = () => {\r\n    const { startNode, endNode } = shortestPathInput;\r\n  \r\n    // Validate input\r\n    if (!startNode || !endNode) {\r\n      setError(\"Please provide both start and end nodes.\");\r\n      setShortestPathResult(\"\");\r\n      setHighlightedNodes([]); // Clear highlighted nodes\r\n      return;\r\n    }\r\n    const graph = new Map();\r\n    edges.forEach(({ source, target, weight }) => {\r\n      if (!graph.has(source.id)) graph.set(source.id, []);\r\n      graph.get(source.id).push({ node: target.id, weight });\r\n      if (!isDirected) {\r\n        if (!graph.has(target.id)) graph.set(target.id, []);\r\n        graph.get(target.id).push({ node: source.id, weight });\r\n      }\r\n    });\r\n    const distances = {};\r\n    const previousNodes = {};\r\n    const pq = new Set(nodes.map((node) => node.id)); // Priority Queue\r\n  \r\n    nodes.forEach(({ id }) => {\r\n      distances[id] = id === startNode ? 0 : Infinity;\r\n      previousNodes[id] = null;\r\n    });\r\n  \r\n    // Dijkstra's Algorithm\r\n    while (pq.size) {\r\n      const current = [...pq].reduce((a, b) => distances[a] < distances[b] ? a : b);\r\n      pq.delete(current);\r\n      if (current === endNode) break;\r\n  \r\n      // Process neighbors\r\n      const neighbors = graph.get(current) || [];\r\n      neighbors.forEach(({ node: neighbor, weight }) => {\r\n        const alt = distances[current] + weight;\r\n        if (alt < distances[neighbor]) {\r\n          distances[neighbor] = alt;\r\n          previousNodes[neighbor] = current;\r\n        }\r\n      });\r\n    }\r\n  \r\n    // Reconstruct the shortest path\r\n    let path = [];\r\n    let currentNode = endNode;\r\n    while (currentNode) {\r\n      path.unshift(currentNode);\r\n      currentNode = previousNodes[currentNode];\r\n    }\r\n\r\n    if (path[0] !== startNode) {\r\n      setError(`No path exists between ${startNode} and ${endNode}.`);\r\n      setShortestPathResult(\"\");\r\n      setHighlightedNodes([]); // Clear highlighted nodes\r\n    } else {\r\n      setError(\"\");\r\n      setShortestPathResult(path.join(\" → \"));\r\n      setHighlightedNodes(path); // Set highlighted nodes for the shortest path\r\n  \r\n      // To Highlight the nodes in the shortest path\r\n      path.forEach((nodeId) => {\r\n        d3.select(`.node-${nodeId}`).classed(\"highlighted\", true);\r\n      });\r\n\r\n      setTimeout(() => {\r\n        path.forEach((nodeId) => {\r\n          d3.select(`.node-${nodeId}`).classed(\"highlighted\", false);\r\n        });\r\n      }, 2000); \r\n    }\r\n    setShowShortestPathInputs(false);\r\n  };\r\n  \r\n  const handleMST = () => {\r\n    if (edges.length === 0 || nodes.length === 0) {\r\n      setError(\"Graph must have nodes and edges to compute MST.\");\r\n      return;\r\n    }\r\n  \r\n    const sortedEdges = [...edges].sort((a, b) => (a.weight || 0) - (b.weight || 0));\r\n  \r\n\r\n    const parent = {};\r\n    const rank = {};\r\n  \r\n    nodes.forEach(({ id }) => {\r\n      parent[id] = id;\r\n      rank[id] = 0;\r\n    });\r\n  \r\n    const find = (node) => {\r\n      if (parent[node] !== node) {\r\n        parent[node] = find(parent[node]);\r\n      }\r\n      return parent[node];\r\n    };\r\n  \r\n    const union = (node1, node2) => {\r\n      const root1 = find(node1);\r\n      const root2 = find(node2);\r\n  \r\n      if (root1 !== root2) {\r\n        if (rank[root1] > rank[root2]) {\r\n          parent[root2] = root1;\r\n        } else if (rank[root1] < rank[root2]) {\r\n          parent[root1] = root2;\r\n        } else {\r\n          parent[root2] = root1;\r\n          rank[root1] += 1;\r\n        }\r\n      }\r\n    };\r\n  \r\n    // Step 3: Construct MST\r\n    const mstEdges = [];\r\n    sortedEdges.forEach((edge) => {\r\n      if (find(edge.source.id) !== find(edge.target.id)) {\r\n        mstEdges.push(edge);\r\n        union(edge.source.id, edge.target.id);\r\n      }\r\n    });\r\n  \r\n    // Highlight MST edges\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\".mst-highlight\").classed(\"mst-highlight\", false); // Reset previous highlights\r\n  \r\n    mstEdges.forEach((edge) => {\r\n      svg\r\n        .selectAll(\"line\")\r\n        .filter((d) => d.source.id === edge.source.id && d.target.id === edge.target.id)\r\n        .classed(\"mst-highlight\", true);\r\n    });\r\n  \r\n    setError(\"\"); // Clear any previous error\r\n  };\r\n  \r\n  \r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n  \r\n      {/* Toggle Buttons for Directed/Undirected */}\r\n      <div className=\"button-container\">\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n        <button\r\n          className={`toggle-button ${isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(true);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Directed\r\n        </button>\r\n        <button\r\n          className={`toggle-button ${!isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(false);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Undirected\r\n        </button>\r\n        \r\n      </div>\r\n  \r\n      {/* Input and Download Section */}\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          placeholder={`Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`}\r\n          onChange={handleInputChange}\r\n          className=\"input-container\"\r\n          value={input}\r\n          rows=\"5\"\r\n        ></textarea>\r\n  \r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={downloadGraph}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-txt\">Download Graph</p>\r\n        </div>\r\n       \r\n      </div>\r\n  \r\n      {/* Error Message */}\r\n\r\n  \r\n      {/* Operations Section */}\r\n      <div className=\"graphdislpay-button-wraper\">\r\n        <div className=\"operation-button-container\">\r\n          <button className=\"operation_button\" onClick={handleDFS}>BFS</button>\r\n          <button className=\"operation_button\" onClick={handleBFS}>DFS</button>\r\n          \r\n          <button className=\"operation_button\" onClick={handleTopoSort}>Topo Sort</button>\r\n          \r\n          {/* Shortest Path Button with Input */}\r\n      <div>\r\n      <button className=\"operation_button\" onClick={handleGetPath}>\r\n        Shortest Path\r\n      </button>\r\n\r\n      {/* Conditionally render the input fields */}\r\n      {showShortestPathInputs && (\r\n        <>\r\n          <input\r\n            className=\"shortestpathop\"\r\n            type=\"text\"\r\n            placeholder=\"Start Node\"\r\n            onChange={(e) =>\r\n              setShortestPathInput({ ...shortestPathInput, startNode: e.target.value })\r\n            }\r\n            style={{ marginLeft: \"10px\" }}\r\n          />\r\n          <input\r\n            className=\"shortestpathop\"\r\n            type=\"text\"\r\n            placeholder=\"End Node\"\r\n            onChange={(e) =>\r\n              setShortestPathInput({ ...shortestPathInput, endNode: e.target.value })\r\n            }\r\n            style={{ marginLeft: \"10px\" }}\r\n          />\r\n          <button onClick={findShortestPath}>Get Path</button>\r\n        </>\r\n      )}\r\n    </div>\r\n          <button className=\"operation_button\" onClick={handleMST}>MST</button>\r\n          {topoSortResult && (\r\n        <div className=\"operation-result\">\r\n          <h3>Topological Sort : </h3>\r\n          <p>{topoSortResult}</p>\r\n        </div>\r\n      )}\r\n  \r\n      {shortestPathResult && (\r\n        <div className=\"operation-result\">\r\n          <h3>Shortest Path : </h3>\r\n          <p>{shortestPathResult}</p>\r\n        </div>\r\n      )}\r\n        </div>\r\n  \r\n        {/* Graph Display */}\r\n        <div\r\n          className=\"graph-display\"\r\n          ref={graphContainerRef}\r\n          style={{\r\n            alignItems: \"flex-end\",\r\n            overflow: \"auto\",\r\n            maxWidth: \"69%\",\r\n            height: \"450px\"\r\n          }}\r\n        >\r\n          <svg ref={svgRef} width=\"1000\" height=\"450\" style={{ border: \"1px solid black\" }}></svg>\r\n        </div>\r\n      </div>\r\n  \r\n      {/* Results Section */}\r\n      \r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}