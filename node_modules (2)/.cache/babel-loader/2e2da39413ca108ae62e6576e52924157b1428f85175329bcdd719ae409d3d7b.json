{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\n\n  const svgRef = useRef();\n  const graphContainerRef = useRef(); // Ref for the graph container\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = new Map(); // Use a Map to ensure unique nodes\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.has(from)) newNodes.set(from, {\n          id: from\n        });\n        if (!newNodes.has(to)) newNodes.set(to, {\n          id: to\n        });\n\n        // Handle optional weight\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n\n      // Set unique edges\n      const uniqueEdges = newEdges.filter((edge, index, self) => index === self.findIndex(e => e.source === edge.source && e.target === edge.target || e.source === edge.target && e.target === edge.source));\n      setNodes(Array.from(newNodes.values())); // Convert Map to array\n      setEdges(uniqueEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const downloadGraph = () => {\n    if (graphContainerRef.current) {\n      toPng(graphContainerRef.current).then(dataUrl => {\n        const link = document.createElement(\"a\");\n        link.download = \"graph_visualization.png\";\n        link.href = dataUrl;\n        link.click();\n      }).catch(err => {\n        console.error(\"Failed to download graph as PNG:\", err);\n      });\n    }\n  };\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 700;\n    const height = 350;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(140)) // Increase edge distance here (was 100)\n    .force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).force(\"x\", d3.forceX(width / 2).strength(0.1)).force(\"y\", d3.forceY(height / 2).strength(0.1)).on(\"tick\", ticked);\n    function constrainBounds(d) {\n      d.x = Math.max(20, Math.min(width - 20, d.x));\n      d.y = Math.max(20, Math.min(height - 20, d.y));\n    }\n    svg.append(\"defs\").append(\"marker\").attr(\"id\", \"arrowhead\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 25).attr(\"refY\", 0).attr(\"orient\", \"auto\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 6).append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#42a5f5\");\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2).attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"#4CAF50\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).attr(\"class\", d => `node node-${d.id}`) // Add unique class for each node\n    .call(d3.drag().on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\", dragEnded));\n    const label = svg.append(\"g\").attr(\"class\", \"labels\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \".35em\").attr(\"fill\", \"white\");\n    const edgeLabels = svg.append(\"g\").attr(\"class\", \"edge-labels\").selectAll(\"text\").data(edges).enter().append(\"text\").text(d => d.weight !== null ? d.weight : \"\") // Display weight only if it's not null\n    .attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \"-10px\").attr(\"fill\", \"black\") // Ensure this is explicitly set\n    .style(\"fill\", \"black\"); // Explicitly set fill using style for stronger application\n\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.each(constrainBounds).attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n      edgeLabels.attr(\"x\", d => (d.source.x + d.target.x) / 2).attr(\"y\", d => (d.source.y + d.target.y) / 2);\n    }\n    function dragStarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragEnded(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n    return () => simulation.stop();\n  }, [nodes, edges, isDirected]);\n  const handleBFS = () => {\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\n    const queue = [startNode];\n    const visited = new Set();\n    visited.add(startNode);\n    const bfsTraversal = () => {\n      if (queue.length === 0) return; // Stop when queue is empty\n\n      const currentNode = queue.shift(); // Dequeue node\n      setQueueState(prevQueueState => [...prevQueueState, currentNode]);\n      setVisitedNodes(prevVisitedNodes => new Set(prevVisitedNodes.add(currentNode)));\n\n      // Highlight the current node\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\n      const neighbors = edges.filter(edge => edge.source === currentNode || edge.target === currentNode).map(edge => edge.source === currentNode ? edge.target : edge.source);\n      neighbors.forEach(neighbor => {\n        if (!visited.has(neighbor)) {\n          visited.add(neighbor);\n          queue.push(neighbor);\n        }\n      });\n      setTimeout(() => bfsTraversal(), 500); // Delay for visualization\n    };\n    bfsTraversal(); // Start the BFS traversal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(true);\n          validateInput(input);\n        },\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${!isDirected ? \"active\" : \"\"}`,\n        onClick: () => {\n          setIsDirected(false);\n          validateInput(input);\n        },\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-download-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: `Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`,\n        onChange: handleInputChange,\n        className: \"input-container\",\n        value: input,\n        rows: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"download-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"download-button\",\n          onClick: downloadGraph,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: db,\n            alt: \"Download\",\n            className: \"download-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"download-txt\",\n          children: \"Download Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graphdislpay-button-wraper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"operation-button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          onClick: handleBFS,\n          children: \"BFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          children: \"DFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          children: \"Topo Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          children: \"Shortest Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          children: \"MST\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"operation_button\",\n          children: \"Kruskal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-display\",\n        ref: graphContainerRef,\n        style: {\n          alignItems: \"flex-end\",\n          overflow: \"auto\",\n          maxWidth: \"63%\",\n          height: \"400px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          ref: svgRef,\n          width: \"1000\",\n          height: \"400\",\n          style: {\n            border: \"1px solid black\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"T2FEqXTPoEL5ARbHCLgvrRy4Ea8=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","Set","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","Map","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","has","set","id","edgeWeight","parseInt","push","source","uniqueEdges","filter","edge","index","self","findIndex","Array","values","message","downloadGraph","current","then","dataUrl","link","document","createElement","download","href","click","catch","err","console","svg","select","selectAll","remove","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","forceX","forceY","on","ticked","constrainBounds","x","Math","max","min","y","append","attr","data","enter","node","call","drag","dragStarted","dragged","dragEnded","label","text","edgeLabels","style","each","event","active","alphaTarget","restart","fx","fy","stop","handleBFS","startNode","queue","visited","add","bfsTraversal","currentNode","shift","prevQueueState","prevVisitedNodes","classed","neighbors","map","neighbor","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","onChange","rows","src","alt","ref","alignItems","overflow","maxWidth","border","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\"; // Library for converting HTML to image\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]); // Track BFS queue state\r\n  const [visitedNodes, setVisitedNodes] = useState(new Set()); // Track visited nodes\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef(); // Ref for the graph container\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = new Map(); // Use a Map to ensure unique nodes\r\n      const newEdges = [];\r\n  \r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\r\n            \"Invalid input format! Each line must have two integers, and optionally a weight.\"\r\n          );\r\n        }\r\n  \r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.has(from)) newNodes.set(from, { id: from });\r\n        if (!newNodes.has(to)) newNodes.set(to, { id: to });\r\n  \r\n        // Handle optional weight\r\n        const edgeWeight = weight ? parseInt(weight) : null; // Set to null if no weight provided\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n  \r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n  \r\n      // Set unique edges\r\n      const uniqueEdges = newEdges.filter(\r\n        (edge, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (e) =>\r\n              (e.source === edge.source && e.target === edge.target) ||\r\n              (e.source === edge.target && e.target === edge.source)\r\n          )\r\n      );\r\n  \r\n      setNodes(Array.from(newNodes.values())); // Convert Map to array\r\n      setEdges(uniqueEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  \r\n\r\n  const downloadGraph = () => {\r\n    if (graphContainerRef.current) {\r\n      toPng(graphContainerRef.current)\r\n        .then((dataUrl) => {\r\n          const link = document.createElement(\"a\");\r\n          link.download = \"graph_visualization.png\";\r\n          link.href = dataUrl;\r\n          link.click();\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to download graph as PNG:\", err);\r\n        });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n    const width = 700;\r\n    const height = 350;\r\n\r\n    const simulation = d3\r\n    .forceSimulation(nodes)\r\n    .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(140)) // Increase edge distance here (was 100)\r\n    .force(\"charge\", d3.forceManyBody().strength(-300))\r\n    .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n    .force(\"x\", d3.forceX(width / 2).strength(0.1))\r\n    .force(\"y\", d3.forceY(height / 2).strength(0.1))\r\n    .on(\"tick\", ticked);\r\n  \r\n\r\n    function constrainBounds(d) {\r\n      d.x = Math.max(20, Math.min(width - 20, d.x));\r\n      d.y = Math.max(20, Math.min(height - 20, d.y));\r\n    }\r\n\r\n    svg\r\n      .append(\"defs\")\r\n      .append(\"marker\")\r\n      .attr(\"id\", \"arrowhead\")\r\n      .attr(\"viewBox\", \"0 -5 10 10\")\r\n      .attr(\"refX\", 25)\r\n      .attr(\"refY\", 0)\r\n      .attr(\"orient\", \"auto\")\r\n      .attr(\"markerWidth\", 6)\r\n      .attr(\"markerHeight\", 6)\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n      .attr(\"fill\", \"#42a5f5\");\r\n\r\n    const link = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"links\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n\r\n      const node = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"nodes\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 20)\r\n      .attr(\"fill\", \"#4CAF50\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"class\", (d) => `node node-${d.id}`) // Add unique class for each node\r\n      .call(\r\n        d3\r\n          .drag()\r\n          .on(\"start\", dragStarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragEnded)\r\n      );\r\n    \r\n\r\n    const label = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"labels\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d.id)\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \".35em\")\r\n      .attr(\"fill\", \"white\");\r\n\r\n      const edgeLabels = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"edge-labels\")\r\n      .selectAll(\"text\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => (d.weight !== null ? d.weight : \"\")) // Display weight only if it's not null\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \"-10px\")\r\n      .attr(\"fill\", \"black\")  // Ensure this is explicitly set\r\n      .style(\"fill\", \"black\"); // Explicitly set fill using style for stronger application\r\n    \r\n\r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      node.each(constrainBounds).attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n      edgeLabels\r\n        .attr(\"x\", (d) => (d.source.x + d.target.x) / 2)\r\n        .attr(\"y\", (d) => (d.source.y + d.target.y) / 2);\r\n    }\r\n\r\n    function dragStarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n\r\n    function dragEnded(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n\r\n    return () => simulation.stop();\r\n  }, [nodes, edges, isDirected]);\r\n\r\n  const handleBFS = () => {\r\n    const startNode = nodes[0].id; // Start from the first node (can be customized)\r\n    const queue = [startNode];\r\n    const visited = new Set();\r\n    visited.add(startNode);\r\n  \r\n    const bfsTraversal = () => {\r\n      if (queue.length === 0) return; // Stop when queue is empty\r\n  \r\n      const currentNode = queue.shift(); // Dequeue node\r\n      setQueueState((prevQueueState) => [...prevQueueState, currentNode]);\r\n      setVisitedNodes((prevVisitedNodes) => new Set(prevVisitedNodes.add(currentNode)));\r\n  \r\n      // Highlight the current node\r\n      d3.select(`.node-${currentNode}`).classed(\"highlighted\", true);\r\n  \r\n      const neighbors = edges\r\n        .filter((edge) => edge.source === currentNode || edge.target === currentNode)\r\n        .map((edge) => (edge.source === currentNode ? edge.target : edge.source));\r\n  \r\n      neighbors.forEach((neighbor) => {\r\n        if (!visited.has(neighbor)) {\r\n          visited.add(neighbor);\r\n          queue.push(neighbor);\r\n        }\r\n      });\r\n  \r\n      setTimeout(() => bfsTraversal(), 500); // Delay for visualization\r\n    };\r\n  \r\n    bfsTraversal(); // Start the BFS traversal\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n\r\n      <div className=\"button-container\">\r\n        <button\r\n          className={`toggle-button ${isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(true);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Directed\r\n        </button>\r\n        <button\r\n          className={`toggle-button ${!isDirected ? \"active\" : \"\"}`}\r\n          onClick={() => {\r\n            setIsDirected(false);\r\n            validateInput(input);\r\n          }}\r\n        >\r\n          Undirected\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          placeholder={`Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`}\r\n          onChange={handleInputChange}\r\n          className=\"input-container\"\r\n          value={input}\r\n          rows=\"5\"\r\n        ></textarea>\r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={downloadGraph}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-txt\">Download Graph</p>\r\n        </div>\r\n      </div>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n    <div className = \"graphdislpay-button-wraper\">\r\n      <div className=\"operation-button-container\">\r\n      <button className=\"operation_button\" onClick={handleBFS}>BFS</button>\r\n        <button className=\"operation_button\">DFS</button>\r\n        <button className=\"operation_button\">Topo Sort</button>\r\n        <button className=\"operation_button\">Shortest Path</button>\r\n        <button className=\"operation_button\">MST</button>\r\n        <button className=\"operation_button\">Kruskal</button>\r\n      </div>\r\n      <div\r\n        className=\"graph-display\"\r\n        ref={graphContainerRef}\r\n        style={{ alignItems: \"flex-end\", overflow: \"auto\", maxWidth: \"63%\", height: \"400px\" }}\r\n      >\r\n        <svg ref={svgRef} width=\"1000\" height=\"400\" style={{ border: \"1px solid black\" }}></svg>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}