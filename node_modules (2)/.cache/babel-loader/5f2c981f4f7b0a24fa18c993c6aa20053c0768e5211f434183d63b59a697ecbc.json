{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\InsertionSort.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './InsertionSort.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InsertionSortVisualizer() {\n  _s();\n  const [arr, setArr] = useState([]);\n  const [isPaused, setIsPaused] = useState(false);\n  const [i, setI] = useState(1); // The current index for insertion sort\n  const [j, setJ] = useState(0); // The inner loop index for insertion sort\n  const [currentTimeouts, setCurrentTimeouts] = useState([]);\n  const [status, setStatus] = useState('');\n  const [sorted, setSorted] = useState([]);\n  const [arrayInput, setArrayInput] = useState('');\n\n  // Function to reset the sorting state\n  const resetSortingState = () => {\n    setIsPaused(false);\n    setCurrentTimeouts([]);\n    setSorted([]);\n    setI(1); // Start from the first element\n    setJ(0); // Reset inner loop index\n    setStatus('');\n  };\n\n  // Function to toggle between pause and resume\n  const togglePause = () => {\n    setIsPaused(!isPaused);\n  };\n\n  // Function to continue sorting from where it was paused\n  const continueSorting = () => {\n    step();\n  };\n\n  // Function to start the sorting\n  const startSorting = () => {\n    resetSortingState();\n    const parsedArr = arrayInput.split(' ').map(Number);\n    if (parsedArr.some(isNaN)) {\n      alert('Please enter valid numbers separated by spaces.');\n      return;\n    }\n    setArr(parsedArr);\n    setSorted(new Array(parsedArr.length).fill(false)); // Initialize sorted array\n    step();\n  };\n  const updatePointer = () => {\n    // Pointer update logic based on i (position of pointer will be handled by CSS)\n  };\n  const updateIndexDisplay = () => {\n    return `i = ${i}`;\n  };\n\n  // Sorting steps for the animation\n  const step = () => {\n    if (isPaused) return;\n    if (i >= arr.length) {\n      // Mark all items as sorted\n      setSorted(arr.map(() => true));\n      setStatus('Sorting complete!');\n      return;\n    }\n    let key = arr[i];\n    let newJ = i - 1;\n    const newArr = [...arr];\n    setStatus(`Sorting element ${key}...`);\n    const innerStep = () => {\n      if (isPaused) return;\n      if (newJ >= 0 && newArr[newJ] > key) {\n        newArr[newJ + 1] = newArr[newJ];\n        setArr([...newArr]);\n        newJ--;\n        setJ(newJ);\n\n        // Call innerStep with timeout\n        setCurrentTimeouts(prevTimeouts => [...prevTimeouts, setTimeout(innerStep, 1500)]);\n      } else {\n        newArr[newJ + 1] = key;\n        setArr([...newArr]);\n        setStatus(`Inserted ${key} at position ${newJ + 1}`);\n        setI(prevI => prevI + 1); // Move to the next element\n        setJ(newJ);\n\n        // Call step with timeout\n        setCurrentTimeouts(prevTimeouts => [...prevTimeouts, setTimeout(step, 1500)]);\n      }\n    };\n    innerStep();\n  };\n  useEffect(() => {\n    // Cleanup timeouts when component unmounts\n    return () => {\n      currentTimeouts.forEach(timeout => clearTimeout(timeout));\n    };\n  }, [currentTimeouts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"insertion-sort-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"arrayInput\",\n        value: arrayInput,\n        placeholder: \"Enter numbers separated by spaces\",\n        onChange: e => setArrayInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startSorting,\n        children: \"Start Sorting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"visualization\",\n      children: arr.map((num, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `box ${sorted[index] ? 'sorted' : ''}`,\n        id: `box-${index}`,\n        children: num\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pointer\",\n      children: \"\\u2192\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"index\",\n      children: updateIndexDisplay()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: togglePause,\n      children: isPaused ? 'Resume Animation' : 'Pause Animation'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(InsertionSortVisualizer, \"/X6FZeOPePheqkYiFnS9fKLfMkc=\");\n_c = InsertionSortVisualizer;\nexport default InsertionSortVisualizer;\nvar _c;\n$RefreshReg$(_c, \"InsertionSortVisualizer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","InsertionSortVisualizer","_s","arr","setArr","isPaused","setIsPaused","i","setI","j","setJ","currentTimeouts","setCurrentTimeouts","status","setStatus","sorted","setSorted","arrayInput","setArrayInput","resetSortingState","togglePause","continueSorting","step","startSorting","parsedArr","split","map","Number","some","isNaN","alert","Array","length","fill","updatePointer","updateIndexDisplay","key","newJ","newArr","innerStep","prevTimeouts","setTimeout","prevI","forEach","timeout","clearTimeout","className","children","type","id","value","placeholder","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","num","index","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/InsertionSort.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './InsertionSort.css';\r\n\r\nfunction InsertionSortVisualizer() {\r\n  const [arr, setArr] = useState([]);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [i, setI] = useState(1);  // The current index for insertion sort\r\n  const [j, setJ] = useState(0);  // The inner loop index for insertion sort\r\n  const [currentTimeouts, setCurrentTimeouts] = useState([]);\r\n  const [status, setStatus] = useState('');\r\n  const [sorted, setSorted] = useState([]);\r\n  const [arrayInput, setArrayInput] = useState('');\r\n\r\n  // Function to reset the sorting state\r\n  const resetSortingState = () => {\r\n    setIsPaused(false);\r\n    setCurrentTimeouts([]);\r\n    setSorted([]);\r\n    setI(1);  // Start from the first element\r\n    setJ(0);  // Reset inner loop index\r\n    setStatus('');\r\n  };\r\n\r\n  // Function to toggle between pause and resume\r\n  const togglePause = () => {\r\n    setIsPaused(!isPaused);\r\n  };\r\n\r\n  // Function to continue sorting from where it was paused\r\n  const continueSorting = () => {\r\n    step();\r\n  };\r\n\r\n  // Function to start the sorting\r\n  const startSorting = () => {\r\n    resetSortingState();\r\n    const parsedArr = arrayInput.split(' ').map(Number);\r\n    if (parsedArr.some(isNaN)) {\r\n      alert('Please enter valid numbers separated by spaces.');\r\n      return;\r\n    }\r\n    setArr(parsedArr);\r\n    setSorted(new Array(parsedArr.length).fill(false));  // Initialize sorted array\r\n    step();\r\n  };\r\n\r\n  const updatePointer = () => {\r\n    // Pointer update logic based on i (position of pointer will be handled by CSS)\r\n  };\r\n\r\n  const updateIndexDisplay = () => {\r\n    return `i = ${i}`;\r\n  };\r\n\r\n  // Sorting steps for the animation\r\n  const step = () => {\r\n    if (isPaused) return;\r\n\r\n    if (i >= arr.length) {\r\n      // Mark all items as sorted\r\n      setSorted(arr.map(() => true));\r\n      setStatus('Sorting complete!');\r\n      return;\r\n    }\r\n\r\n    let key = arr[i];\r\n    let newJ = i - 1;\r\n    const newArr = [...arr];\r\n    setStatus(`Sorting element ${key}...`);\r\n\r\n    const innerStep = () => {\r\n      if (isPaused) return;\r\n\r\n      if (newJ >= 0 && newArr[newJ] > key) {\r\n        newArr[newJ + 1] = newArr[newJ];\r\n        setArr([...newArr]);\r\n        newJ--;\r\n        setJ(newJ);\r\n\r\n        // Call innerStep with timeout\r\n        setCurrentTimeouts((prevTimeouts) => [\r\n          ...prevTimeouts,\r\n          setTimeout(innerStep, 1500),\r\n        ]);\r\n      } else {\r\n        newArr[newJ + 1] = key;\r\n        setArr([...newArr]);\r\n        setStatus(`Inserted ${key} at position ${newJ + 1}`);\r\n\r\n        setI((prevI) => prevI + 1);  // Move to the next element\r\n        setJ(newJ);\r\n\r\n        // Call step with timeout\r\n        setCurrentTimeouts((prevTimeouts) => [\r\n          ...prevTimeouts,\r\n          setTimeout(step, 1500),\r\n        ]);\r\n      }\r\n    };\r\n\r\n    innerStep();\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Cleanup timeouts when component unmounts\r\n    return () => {\r\n      currentTimeouts.forEach((timeout) => clearTimeout(timeout));\r\n    };\r\n  }, [currentTimeouts]);\r\n\r\n  return (\r\n    <div className=\"insertion-sort-container\">\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          id=\"arrayInput\"\r\n          value={arrayInput}\r\n          placeholder=\"Enter numbers separated by spaces\"\r\n          onChange={(e) => setArrayInput(e.target.value)}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <button onClick={startSorting}>Start Sorting</button>\r\n      </div>\r\n\r\n      <div id=\"visualization\">\r\n        {arr.map((num, index) => (\r\n          <div\r\n            key={index}\r\n            className={`box ${sorted[index] ? 'sorted' : ''}`}\r\n            id={`box-${index}`}\r\n          >\r\n            {num}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div id=\"status\">{status}</div>\r\n\r\n      <div id=\"pointer\">→</div>\r\n\r\n      <div id=\"index\">{updateIndexDisplay()}</div>\r\n\r\n      <button onClick={togglePause}>\r\n        {isPaused ? 'Resume Animation' : 'Pause Animation'}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InsertionSortVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}