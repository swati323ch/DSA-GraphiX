{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./GraphVisualization.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]); // List of nodes\n  const [edges, setEdges] = useState([]); // List of edges\n  const [input, setInput] = useState(\"\"); // Input state for adjacency list\n  const [error, setError] = useState(\"\"); // Error state for validation\n  const [isDirected, setIsDirected] = useState(false); // State to track directed/undirected graph\n\n  const svgRef = useRef(); // Reference to the SVG element\n\n  // Handle the input change\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n\n  // Toggle graph type (directed or undirected)\n  const handleDirectedClick = () => {\n    setIsDirected(true);\n    validateInput(input); // Re-validate to ensure graph is updated correctly\n  };\n  const handleUndirectedClick = () => {\n    setIsDirected(false);\n    validateInput(input); // Re-validate to ensure graph is updated correctly\n  };\n\n  // Validate and update graph data\n  const validateInput = input => {\n    try {\n      const adjList = input.split(\"\\n\").map(line => line.trim()).filter(Boolean).map(line => {\n        const parts = line.split(\" \");\n        return parts.length === 2 ? [parseInt(parts[0]), parseInt(parts[1])] : null;\n      }).filter(Boolean);\n\n      // Initialize new nodes and edges\n      const newNodes = [];\n      const newEdges = [];\n      adjList.forEach(([from, to]) => {\n        const fromId = from.toString();\n        const toId = to.toString();\n        if (!newNodes.some(node => node.id === fromId)) {\n          newNodes.push({\n            id: fromId\n          });\n        }\n        if (!newNodes.some(node => node.id === toId)) {\n          newNodes.push({\n            id: toId\n          });\n        }\n\n        // If directed, only add directed edges\n        if (isDirected) {\n          newEdges.push({\n            source: fromId,\n            target: toId\n          });\n        } else {\n          // If undirected, add both directions (bidirectional)\n          newEdges.push({\n            source: fromId,\n            target: toId\n          });\n          newEdges.push({\n            source: toId,\n            target: fromId\n          });\n        }\n      });\n      setNodes(newNodes);\n      setEdges(newEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(\"Invalid input! Please provide a valid adjacency list.\");\n    }\n  };\n\n  // Draw the graph using D3\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove(); // Clear previous graph\n\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 600;\n    const height = 400;\n\n    // Create a simulation with forces\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(100)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).on(\"tick\", ticked);\n\n    // Add links (edges)\n    const link = svg.append(\"g\").attr(\"class\", \"links\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"stroke-width\", 2).attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : \"none\");\n\n    // Add nodes\n    const node = svg.append(\"g\").attr(\"class\", \"nodes\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", \"#42a5f5\").attr(\"stroke\", \"black\").attr(\"stroke-width\", 2).call(d3.drag().on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\", dragEnded));\n\n    // Add labels\n    const label = svg.append(\"g\").attr(\"class\", \"labels\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \".35em\").attr(\"fill\", \"white\");\n\n    // Tick handler\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n    }\n\n    // Drag event handlers\n    function dragStarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragEnded(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n    return () => simulation.stop();\n  }, [nodes, edges, isDirected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter adjacency list (e.g., '0 1\\\\n1 2')\",\n      onChange: handleInputChange,\n      className: \"input-container\",\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${isDirected ? \"active\" : \"\"}`,\n        onClick: handleDirectedClick,\n        children: \"Directed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `toggle-button ${!isDirected ? \"active\" : \"\"}`,\n        onClick: handleUndirectedClick,\n        children: \"Undirected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"600\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"defs\", {\n          children: /*#__PURE__*/_jsxDEV(\"marker\", {\n            id: \"arrowhead\",\n            markerWidth: \"10\",\n            markerHeight: \"7\",\n            refX: \"10\",\n            refY: \"3.5\",\n            orient: \"auto\",\n            markerUnits: \"strokeWidth\",\n            children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n              points: \"0 0, 10 3.5, 0 7\",\n              fill: \"#333\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"mugvjp+7rQn9qGtOQQYp57mBjQs=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","svgRef","handleInputChange","e","value","target","validateInput","handleDirectedClick","handleUndirectedClick","adjList","split","map","line","trim","filter","Boolean","parts","length","parseInt","newNodes","newEdges","forEach","from","to","fromId","toString","toId","some","node","id","push","source","svg","select","current","selectAll","remove","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","on","ticked","link","append","attr","data","enter","call","drag","dragStarted","dragged","dragEnded","label","text","x","y","event","active","alphaTarget","restart","fx","fy","stop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","ref","style","border","markerWidth","markerHeight","refX","refY","orient","markerUnits","points","fill","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport \"./GraphVisualization.css\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]); // List of nodes\r\n  const [edges, setEdges] = useState([]); // List of edges\r\n  const [input, setInput] = useState(\"\"); // Input state for adjacency list\r\n  const [error, setError] = useState(\"\"); // Error state for validation\r\n  const [isDirected, setIsDirected] = useState(false); // State to track directed/undirected graph\r\n\r\n  const svgRef = useRef(); // Reference to the SVG element\r\n\r\n  // Handle the input change\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  // Toggle graph type (directed or undirected)\r\n  const handleDirectedClick = () => {\r\n    setIsDirected(true);\r\n    validateInput(input); // Re-validate to ensure graph is updated correctly\r\n  };\r\n\r\n  const handleUndirectedClick = () => {\r\n    setIsDirected(false);\r\n    validateInput(input); // Re-validate to ensure graph is updated correctly\r\n  };\r\n\r\n  // Validate and update graph data\r\n  const validateInput = (input) => {\r\n    try {\r\n      const adjList = input\r\n        .split(\"\\n\")\r\n        .map((line) => line.trim())\r\n        .filter(Boolean)\r\n        .map((line) => {\r\n          const parts = line.split(\" \");\r\n          return parts.length === 2 ? [parseInt(parts[0]), parseInt(parts[1])] : null;\r\n        })\r\n        .filter(Boolean);\r\n\r\n      // Initialize new nodes and edges\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n\r\n      adjList.forEach(([from, to]) => {\r\n        const fromId = from.toString();\r\n        const toId = to.toString();\r\n\r\n        if (!newNodes.some((node) => node.id === fromId)) {\r\n          newNodes.push({ id: fromId });\r\n        }\r\n        if (!newNodes.some((node) => node.id === toId)) {\r\n          newNodes.push({ id: toId });\r\n        }\r\n\r\n        // If directed, only add directed edges\r\n        if (isDirected) {\r\n          newEdges.push({ source: fromId, target: toId });\r\n        } else {\r\n          // If undirected, add both directions (bidirectional)\r\n          newEdges.push({ source: fromId, target: toId });\r\n          newEdges.push({ source: toId, target: fromId });\r\n        }\r\n      });\r\n\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(\"Invalid input! Please provide a valid adjacency list.\");\r\n    }\r\n  };\r\n\r\n  // Draw the graph using D3\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove(); // Clear previous graph\r\n\r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n    const width = 600;\r\n    const height = 400;\r\n\r\n    // Create a simulation with forces\r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(100))\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .on(\"tick\", ticked);\r\n\r\n    // Add links (edges)\r\n    const link = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"links\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"stroke-width\", 2)\r\n      .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : \"none\");\r\n\r\n    // Add nodes\r\n    const node = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"nodes\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 20)\r\n      .attr(\"fill\", \"#42a5f5\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"stroke-width\", 2)\r\n      .call(d3.drag()\r\n        .on(\"start\", dragStarted)\r\n        .on(\"drag\", dragged)\r\n        .on(\"end\", dragEnded)\r\n      );\r\n\r\n    // Add labels\r\n    const label = svg\r\n      .append(\"g\")\r\n      .attr(\"class\", \"labels\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d.id)\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \".35em\")\r\n      .attr(\"fill\", \"white\");\r\n\r\n    // Tick handler\r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n    }\r\n\r\n    // Drag event handlers\r\n    function dragStarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n\r\n    function dragEnded(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n\r\n    return () => simulation.stop();\r\n  }, [nodes, edges, isDirected]);\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter adjacency list (e.g., '0 1\\n1 2')\"\r\n        onChange={handleInputChange}\r\n        className=\"input-container\"\r\n        value={input}\r\n      />\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      <div className=\"button-container\">\r\n        <button className={`toggle-button ${isDirected ? \"active\" : \"\"}`} onClick={handleDirectedClick}>\r\n          Directed\r\n        </button>\r\n        <button className={`toggle-button ${!isDirected ? \"active\" : \"\"}`} onClick={handleUndirectedClick}>\r\n          Undirected\r\n        </button>\r\n      </div>\r\n      <div className=\"graph-display\">\r\n        <svg ref={svgRef} width=\"600\" height=\"400\" style={{ border: \"1px solid black\" }}>\r\n          <defs>\r\n            <marker\r\n              id=\"arrowhead\"\r\n              markerWidth=\"10\"\r\n              markerHeight=\"7\"\r\n              refX=\"10\"\r\n              refY=\"3.5\"\r\n              orient=\"auto\"\r\n              markerUnits=\"strokeWidth\"\r\n            >\r\n              <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#333\" />\r\n            </marker>\r\n          </defs>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}