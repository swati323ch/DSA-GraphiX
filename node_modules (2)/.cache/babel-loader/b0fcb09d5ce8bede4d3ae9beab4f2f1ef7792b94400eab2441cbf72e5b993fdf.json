{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./GraphVisualization.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [positions, setPositions] = useState({}); // Store node positions\n  const [input, setInput] = useState(\"\"); // Input state for adjacency list\n  const [error, setError] = useState(\"\"); // Error state for validation\n\n  // Handle the input change with debouncing\n  const debounce = (func, delay) => {\n    let timeout;\n    return (...args) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func(...args), delay);\n    };\n  };\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n\n  // Validate input after the user finishes typing\n  const validateInput = debounce(input => {\n    try {\n      const adjList = JSON.parse(input);\n\n      // Validate if the input is an array of arrays\n      if (!Array.isArray(adjList) || adjList.some(item => !Array.isArray(item))) {\n        setError(\"Invalid format! Please enter a valid adjacency list.\");\n        return;\n      }\n      const parsedNodes = adjList.map((_, index) => ({\n        id: index.toString() // Node IDs based on index\n      }));\n      const parsedEdges = [];\n      adjList.forEach((neighbors, from) => {\n        neighbors.forEach(to => {\n          parsedEdges.push({\n            from: from.toString(),\n            to: to.toString()\n          });\n        });\n      });\n      setNodes(parsedNodes);\n      setEdges(parsedEdges);\n      setError(\"\"); // Clear error if input is valid\n\n      // Apply force-directed layout after nodes and edges are parsed\n      applyForceLayout(parsedNodes, parsedEdges);\n    } catch (error) {\n      setError(\"Invalid JSON! Please provide a valid adjacency list.\");\n    }\n  }, 1000);\n\n  // Force-directed layout algorithm\n  const applyForceLayout = (nodes, edges) => {\n    const width = 600;\n    const height = 400;\n    const nodeRadius = 30;\n    const forceStrength = 0.05;\n    const distance = 100;\n    const positions = {};\n\n    // Initialize nodes with random positions\n    nodes.forEach(node => {\n      positions[node.id] = {\n        x: Math.random() * width,\n        y: Math.random() * height,\n        vx: 0,\n        vy: 0\n      };\n    });\n\n    // Apply force simulation (basic)\n    let simulationRunning = true;\n    const tick = () => {\n      if (!simulationRunning) return;\n\n      // Apply forces to all edges\n      edges.forEach(edge => {\n        const fromNode = positions[edge.from];\n        const toNode = positions[edge.to];\n\n        // Calculate distance between nodes\n        const dx = toNode.x - fromNode.x;\n        const dy = toNode.y - fromNode.y;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n        const force = (dist - distance) * forceStrength;\n\n        // Apply repulsive force on each node\n        fromNode.vx += force * dx / dist;\n        fromNode.vy += force * dy / dist;\n        toNode.vx -= force * dx / dist;\n        toNode.vy -= force * dy / dist;\n      });\n\n      // Apply basic gravity (pull nodes toward the center)\n      Object.values(positions).forEach(node => {\n        node.vx *= 0.9;\n        node.vy *= 0.9;\n        node.x += node.vx;\n        node.y += node.vy;\n\n        // Constrain nodes to the boundaries\n        if (node.x < nodeRadius) node.x = nodeRadius;\n        if (node.y < nodeRadius) node.y = nodeRadius;\n        if (node.x > width - nodeRadius) node.x = width - nodeRadius;\n        if (node.y > height - nodeRadius) node.y = height - nodeRadius;\n      });\n      setPositions({\n        ...positions\n      });\n\n      // Keep simulating until nodes settle\n      setTimeout(tick, 20);\n    };\n    tick();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Graph Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter adjacency list as JSON (e.g., [[1], [0, 2, 4], [1, 3, 4], [2], [1, 2]])\",\n      onChange: handleInputChange,\n      className: \"input-container\",\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"600\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        },\n        children: [edges.map((edge, index) => {\n          const fromPos = positions[edge.from];\n          const toPos = positions[edge.to];\n          if (!fromPos || !toPos) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromPos.x,\n            y1: fromPos.y,\n            x2: toPos.x,\n            y2: toPos.y,\n            stroke: \"#333\",\n            strokeWidth: 2\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this);\n        }), nodes.map(node => {\n          const pos = positions[node.id];\n          if (!pos) return null;\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n              cx: pos.x,\n              cy: pos.y,\n              r: 30,\n              fill: \"#4CAF50\",\n              stroke: \"black\",\n              strokeWidth: 3,\n              children: /*#__PURE__*/_jsxDEV(\"title\", {\n                children: node.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: pos.x,\n              y: pos.y,\n              fontSize: \"16\",\n              fontWeight: \"bold\",\n              textAnchor: \"middle\",\n              fill: \"white\",\n              dy: \".3em\" // Vertically center the text\n              ,\n              children: node.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)]\n          }, node.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"IKUsu0TLRdxcYH2pMME+NuUjZts=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","positions","setPositions","input","setInput","error","setError","debounce","func","delay","timeout","args","clearTimeout","setTimeout","handleInputChange","e","value","target","validateInput","adjList","JSON","parse","Array","isArray","some","item","parsedNodes","map","_","index","id","toString","parsedEdges","forEach","neighbors","from","to","push","applyForceLayout","width","height","nodeRadius","forceStrength","distance","node","x","Math","random","y","vx","vy","simulationRunning","tick","edge","fromNode","toNode","dx","dy","dist","sqrt","force","Object","values","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","style","border","fromPos","toPos","x1","y1","x2","y2","stroke","strokeWidth","pos","cx","cy","r","fill","fontSize","fontWeight","textAnchor","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./GraphVisualization.css\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [positions, setPositions] = useState({}); // Store node positions\r\n  const [input, setInput] = useState(\"\"); // Input state for adjacency list\r\n  const [error, setError] = useState(\"\"); // Error state for validation\r\n\r\n  // Handle the input change with debouncing\r\n  const debounce = (func, delay) => {\r\n    let timeout;\r\n    return (...args) => {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => func(...args), delay);\r\n    };\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  // Validate input after the user finishes typing\r\n  const validateInput = debounce((input) => {\r\n    try {\r\n      const adjList = JSON.parse(input);\r\n\r\n      // Validate if the input is an array of arrays\r\n      if (!Array.isArray(adjList) || adjList.some(item => !Array.isArray(item))) {\r\n        setError(\"Invalid format! Please enter a valid adjacency list.\");\r\n        return;\r\n      }\r\n\r\n      const parsedNodes = adjList.map((_, index) => ({\r\n        id: index.toString(), // Node IDs based on index\r\n      }));\r\n      const parsedEdges = [];\r\n      adjList.forEach((neighbors, from) => {\r\n        neighbors.forEach((to) => {\r\n          parsedEdges.push({\r\n            from: from.toString(),\r\n            to: to.toString(),\r\n          });\r\n        });\r\n      });\r\n\r\n      setNodes(parsedNodes);\r\n      setEdges(parsedEdges);\r\n      setError(\"\"); // Clear error if input is valid\r\n\r\n      // Apply force-directed layout after nodes and edges are parsed\r\n      applyForceLayout(parsedNodes, parsedEdges);\r\n\r\n    } catch (error) {\r\n      setError(\"Invalid JSON! Please provide a valid adjacency list.\");\r\n    }\r\n  }, 1000);\r\n\r\n  // Force-directed layout algorithm\r\n  const applyForceLayout = (nodes, edges) => {\r\n    const width = 600;\r\n    const height = 400;\r\n    const nodeRadius = 30;\r\n    const forceStrength = 0.05;\r\n    const distance = 100;\r\n\r\n    const positions = {};\r\n\r\n    // Initialize nodes with random positions\r\n    nodes.forEach((node) => {\r\n      positions[node.id] = {\r\n        x: Math.random() * width,\r\n        y: Math.random() * height,\r\n        vx: 0,\r\n        vy: 0,\r\n      };\r\n    });\r\n\r\n    // Apply force simulation (basic)\r\n    let simulationRunning = true;\r\n\r\n    const tick = () => {\r\n      if (!simulationRunning) return;\r\n\r\n      // Apply forces to all edges\r\n      edges.forEach((edge) => {\r\n        const fromNode = positions[edge.from];\r\n        const toNode = positions[edge.to];\r\n\r\n        // Calculate distance between nodes\r\n        const dx = toNode.x - fromNode.x;\r\n        const dy = toNode.y - fromNode.y;\r\n        const dist = Math.sqrt(dx * dx + dy * dy);\r\n        const force = (dist - distance) * forceStrength;\r\n\r\n        // Apply repulsive force on each node\r\n        fromNode.vx += force * dx / dist;\r\n        fromNode.vy += force * dy / dist;\r\n        toNode.vx -= force * dx / dist;\r\n        toNode.vy -= force * dy / dist;\r\n      });\r\n\r\n      // Apply basic gravity (pull nodes toward the center)\r\n      Object.values(positions).forEach((node) => {\r\n        node.vx *= 0.9;\r\n        node.vy *= 0.9;\r\n        node.x += node.vx;\r\n        node.y += node.vy;\r\n\r\n        // Constrain nodes to the boundaries\r\n        if (node.x < nodeRadius) node.x = nodeRadius;\r\n        if (node.y < nodeRadius) node.y = nodeRadius;\r\n        if (node.x > width - nodeRadius) node.x = width - nodeRadius;\r\n        if (node.y > height - nodeRadius) node.y = height - nodeRadius;\r\n      });\r\n\r\n      setPositions({ ...positions });\r\n\r\n      // Keep simulating until nodes settle\r\n      setTimeout(tick, 20);\r\n    };\r\n\r\n    tick();\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>Graph Visualization</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder='Enter adjacency list as JSON (e.g., [[1], [0, 2, 4], [1, 3, 4], [2], [1, 2]])'\r\n        onChange={handleInputChange}\r\n        className=\"input-container\"\r\n        value={input}\r\n      />\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>} {/* Display error message if any */}\r\n\r\n      <div className=\"graph-display\">\r\n        <svg width=\"600\" height=\"400\" style={{ border: \"1px solid black\" }}>\r\n          {/* Render edges */}\r\n          {edges.map((edge, index) => {\r\n            const fromPos = positions[edge.from];\r\n            const toPos = positions[edge.to];\r\n\r\n            if (!fromPos || !toPos) return null;\r\n\r\n            return (\r\n              <line\r\n                key={index}\r\n                x1={fromPos.x}\r\n                y1={fromPos.y}\r\n                x2={toPos.x}\r\n                y2={toPos.y}\r\n                stroke=\"#333\"\r\n                strokeWidth={2}\r\n              />\r\n            );\r\n          })}\r\n\r\n          {/* Render nodes */}\r\n          {nodes.map((node) => {\r\n            const pos = positions[node.id];\r\n            if (!pos) return null;\r\n\r\n            return (\r\n              <g key={node.id}>\r\n                <circle\r\n                  cx={pos.x}\r\n                  cy={pos.y}\r\n                  r={30}\r\n                  fill=\"#4CAF50\"\r\n                  stroke=\"black\"\r\n                  strokeWidth={3}\r\n                >\r\n                  <title>{node.id}</title>\r\n                </circle>\r\n                {/* Render the node's name inside the circle */}\r\n                <text\r\n                  x={pos.x}\r\n                  y={pos.y}\r\n                  fontSize=\"16\"\r\n                  fontWeight=\"bold\"\r\n                  textAnchor=\"middle\"\r\n                  fill=\"white\"\r\n                  dy=\".3em\"  // Vertically center the text\r\n                >\r\n                  {node.id}\r\n                </text>\r\n              </g>\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}