{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\InsertionSort.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./InsertionSort.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InsertionSort = () => {\n  _s();\n  const [array, setArray] = useState([]); // The array being sorted\n  const [i, setI] = useState(1); // Tracks outer loop index\n  const [j, setJ] = useState(null); // Tracks inner loop index\n  const [isPaused, setIsPaused] = useState(false); // Pause state\n  const [status, setStatus] = useState(\"\"); // Status message\n  const timeouts = useRef([]); // Store active timeouts\n\n  useEffect(() => {\n    // Cleanup timeouts when the component unmounts\n    return () => {\n      timeouts.current.forEach(timeout => clearTimeout(timeout));\n    };\n  }, []);\n  const resetSortingState = () => {\n    setIsPaused(false);\n    timeouts.current.forEach(timeout => clearTimeout(timeout));\n    timeouts.current = [];\n    setArray([]);\n    setI(1);\n    setJ(null);\n    setStatus(\"\");\n  };\n  const togglePause = () => {\n    setIsPaused(prev => {\n      if (!prev) {\n        // Pause sorting\n        timeouts.current.forEach(timeout => clearTimeout(timeout));\n        timeouts.current = [];\n      } else {\n        // Resume sorting\n        if (j !== null) {\n          innerStep([...array], i, j);\n        } else {\n          step([...array], i);\n        }\n      }\n      return !prev;\n    });\n  };\n  const startSorting = inputArray => {\n    resetSortingState();\n    const parsedArray = inputArray.split(\" \").map(Number);\n    if (parsedArray.some(isNaN)) {\n      alert(\"Please enter valid numbers separated by spaces.\");\n      return;\n    }\n    setArray(parsedArray);\n    setStatus(\"\");\n    setI(1);\n    setJ(null);\n    step(parsedArray, 1);\n  };\n  const step = (currentArr, currentI) => {\n    if (isPaused || currentI >= currentArr.length) {\n      if (currentI >= currentArr.length) {\n        setStatus(\"Sorting complete!\");\n      }\n      return;\n    }\n    const key = currentArr[currentI];\n    setStatus(`Sorting element ${key}...`);\n    setI(currentI);\n    setJ(currentI - 1);\n    innerStep([...currentArr], currentI, currentI - 1);\n  };\n  const innerStep = (currentArr, currentI, currentJ) => {\n    if (isPaused) return;\n    const key = currentArr[currentI];\n    if (currentJ >= 0 && currentArr[currentJ] > key) {\n      currentArr[currentJ + 1] = currentArr[currentJ]; // Shift element\n      setArray([...currentArr]); // Update array state for visualization\n      setJ(currentJ - 1);\n      timeouts.current.push(setTimeout(() => innerStep(currentArr, currentI, currentJ - 1), 500));\n    } else {\n      currentArr[currentJ + 1] = key; // Insert key in the correct position\n      setArray([...currentArr]);\n      setStatus(`Inserted ${key} at position ${currentJ + 1}`);\n      setJ(null);\n      timeouts.current.push(setTimeout(() => step(currentArr, currentI + 1), 500));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"insertion-sort-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Insertion Sort Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"arrayInput\",\n      type: \"text\",\n      placeholder: \"Enter numbers separated by spaces\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"sortButton\",\n      onClick: () => startSorting(document.getElementById(\"arrayInput\").value),\n      children: \"Start Sorting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"pauseButton\",\n      onClick: togglePause,\n      children: isPaused ? \"Resume Animation\" : \"Pause Animation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"visualization\",\n      className: \"visualization\",\n      children: array.map((num, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `box ${index < i ? \"sorted\" : index === i ? \"highlight\" : \"\"}`,\n        children: num\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"status\",\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(InsertionSort, \"TB+EGWu4j2gIGvzsVu3HK4HqI7c=\");\n_c = InsertionSort;\nexport default InsertionSort;\nvar _c;\n$RefreshReg$(_c, \"InsertionSort\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","InsertionSort","_s","array","setArray","i","setI","j","setJ","isPaused","setIsPaused","status","setStatus","timeouts","current","forEach","timeout","clearTimeout","resetSortingState","togglePause","prev","innerStep","step","startSorting","inputArray","parsedArray","split","map","Number","some","isNaN","alert","currentArr","currentI","length","key","currentJ","push","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","type","placeholder","onClick","document","getElementById","value","num","index","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/InsertionSort.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./InsertionSort.css\";\r\n\r\nconst InsertionSort = () => {\r\n  const [array, setArray] = useState([]); // The array being sorted\r\n  const [i, setI] = useState(1); // Tracks outer loop index\r\n  const [j, setJ] = useState(null); // Tracks inner loop index\r\n  const [isPaused, setIsPaused] = useState(false); // Pause state\r\n  const [status, setStatus] = useState(\"\"); // Status message\r\n  const timeouts = useRef([]); // Store active timeouts\r\n\r\n  useEffect(() => {\r\n    // Cleanup timeouts when the component unmounts\r\n    return () => {\r\n      timeouts.current.forEach((timeout) => clearTimeout(timeout));\r\n    };\r\n  }, []);\r\n\r\n  const resetSortingState = () => {\r\n    setIsPaused(false);\r\n    timeouts.current.forEach((timeout) => clearTimeout(timeout));\r\n    timeouts.current = [];\r\n    setArray([]);\r\n    setI(1);\r\n    setJ(null);\r\n    setStatus(\"\");\r\n  };\r\n\r\n  const togglePause = () => {\r\n    setIsPaused((prev) => {\r\n      if (!prev) {\r\n        // Pause sorting\r\n        timeouts.current.forEach((timeout) => clearTimeout(timeout));\r\n        timeouts.current = [];\r\n      } else {\r\n        // Resume sorting\r\n        if (j !== null) {\r\n          innerStep([...array], i, j);\r\n        } else {\r\n          step([...array], i);\r\n        }\r\n      }\r\n      return !prev;\r\n    });\r\n  };\r\n\r\n  const startSorting = (inputArray) => {\r\n    resetSortingState();\r\n    const parsedArray = inputArray.split(\" \").map(Number);\r\n\r\n    if (parsedArray.some(isNaN)) {\r\n      alert(\"Please enter valid numbers separated by spaces.\");\r\n      return;\r\n    }\r\n\r\n    setArray(parsedArray);\r\n    setStatus(\"\");\r\n    setI(1);\r\n    setJ(null);\r\n    step(parsedArray, 1);\r\n  };\r\n\r\n  const step = (currentArr, currentI) => {\r\n    if (isPaused || currentI >= currentArr.length) {\r\n      if (currentI >= currentArr.length) {\r\n        setStatus(\"Sorting complete!\");\r\n      }\r\n      return;\r\n    }\r\n\r\n    const key = currentArr[currentI];\r\n    setStatus(`Sorting element ${key}...`);\r\n    setI(currentI);\r\n    setJ(currentI - 1);\r\n\r\n    innerStep([...currentArr], currentI, currentI - 1);\r\n  };\r\n\r\n  const innerStep = (currentArr, currentI, currentJ) => {\r\n    if (isPaused) return;\r\n\r\n    const key = currentArr[currentI];\r\n    if (currentJ >= 0 && currentArr[currentJ] > key) {\r\n      currentArr[currentJ + 1] = currentArr[currentJ]; // Shift element\r\n      setArray([...currentArr]); // Update array state for visualization\r\n      setJ(currentJ - 1);\r\n\r\n      timeouts.current.push(\r\n        setTimeout(() => innerStep(currentArr, currentI, currentJ - 1), 500)\r\n      );\r\n    } else {\r\n      currentArr[currentJ + 1] = key; // Insert key in the correct position\r\n      setArray([...currentArr]);\r\n      setStatus(`Inserted ${key} at position ${currentJ + 1}`);\r\n      setJ(null);\r\n\r\n      timeouts.current.push(setTimeout(() => step(currentArr, currentI + 1), 500));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"insertion-sort-container\">\r\n      <h1>Insertion Sort Visualization</h1>\r\n      <input\r\n        id=\"arrayInput\"\r\n        type=\"text\"\r\n        placeholder=\"Enter numbers separated by spaces\"\r\n      />\r\n      <button\r\n        id=\"sortButton\"\r\n        onClick={() =>\r\n          startSorting(document.getElementById(\"arrayInput\").value)\r\n        }\r\n      >\r\n        Start Sorting\r\n      </button>\r\n      <button id=\"pauseButton\" onClick={togglePause}>\r\n        {isPaused ? \"Resume Animation\" : \"Pause Animation\"}\r\n      </button>\r\n      <div id=\"visualization\" className=\"visualization\">\r\n        {array.map((num, index) => (\r\n          <div\r\n            key={index}\r\n            className={`box ${\r\n              index < i ? \"sorted\" : index === i ? \"highlight\" : \"\"\r\n            }`}\r\n          >\r\n            {num}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div id=\"status\" className=\"status\">\r\n        {status}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InsertionSort;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}