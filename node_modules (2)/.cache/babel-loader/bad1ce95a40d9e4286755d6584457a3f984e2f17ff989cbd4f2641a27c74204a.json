{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\n  const [treeData, setTreeData] = useState(null);\n\n  // Build the tree from a level-order array\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      setTreeData(buildTree(parsedArray));\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n\n  // Calculate horizontal positions dynamically based on subtree width\n  const calculateNodePositions = (node, depth = 0, x = 0, positions = {}) => {\n    if (!node) return 0;\n    const spacing = 100; // Base spacing between nodes\n    const leftWidth = calculateNodePositions(node.left, depth + 1, x, positions);\n    const rightWidth = calculateNodePositions(node.right, depth + 1, x + leftWidth + spacing, positions);\n\n    // Position current node in center of left and right subtree\n    const totalWidth = leftWidth + rightWidth + spacing;\n    const currentX = x + leftWidth + spacing / 2;\n    positions[node.value] = {\n      x: currentX,\n      y: depth * 120 + 50\n    };\n    return totalWidth;\n  };\n\n  // Render the tree with dynamically calculated positions\n  const renderTree = (node, positions, parentX = null, parentY = null) => {\n    if (!node) return null;\n    const {\n      x,\n      y\n    } = positions[node.value];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [parentX !== null && parentY !== null && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: parentX,\n        y1: parentY,\n        x2: x,\n        y2: y,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"circle-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: x,\n          cy: y,\n          r: 40,\n          fill: \"green\",\n          stroke: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: x,\n          y: y,\n          textAnchor: \"middle\",\n          dy: \"5\",\n          fill: \"white\",\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), renderTree(node.left, positions, x, y), renderTree(node.right, positions, x, y)]\n    }, void 0, true);\n  };\n  const handleDownload = () => {\n    const svgElement = document.getElementById(\"treeCanvas\");\n    const svgData = new XMLSerializer().serializeToString(svgElement);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"tree.svg\";\n    a.click();\n  };\n\n  // Generate positions for the nodes\n  const positions = {};\n  let maxWidth = 0;\n  let maxHeight = 0;\n  if (treeData) {\n    maxWidth = calculateNodePositions(treeData, 0, 500, positions); // Start at x=500\n    maxHeight = Object.values(positions).reduce((max, {\n      y\n    }) => Math.max(max, y), 0);\n  }\n\n  // Calculate the offset to center the tree\n  const offsetX = (1200 - maxWidth) / 2;\n  const offsetY = (800 - maxHeight) / 2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input-box\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"download-button\",\n        onClick: handleDownload,\n        children: \"Download Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: `0 0 1200 800` // Fixed width and height of SVG container\n        ,\n        width: \"100%\",\n        height: \"100%\",\n        children: treeData && renderTree(treeData, positions, offsetX, offsetY)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"JCi5CyM2mjadiQNJ69F/xKnB+Vc=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TreeVisualizer","_s","input","setInput","treeData","setTreeData","buildTree","arr","length","nodes","map","value","left","right","i","j","handleVisualize","parsedArray","JSON","parse","error","alert","calculateNodePositions","node","depth","x","positions","spacing","leftWidth","rightWidth","totalWidth","currentX","y","renderTree","parentX","parentY","children","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","cx","cy","r","fill","textAnchor","dy","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","maxWidth","maxHeight","Object","values","reduce","max","Math","offsetX","offsetY","onChange","e","target","placeholder","onClick","id","viewBox","width","height","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n\r\n  // Build the tree from a level-order array\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n\r\n    const nodes = arr.map((value) =>\r\n      value !== null ? { value, left: null, right: null } : null\r\n    );\r\n\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n\r\n    return nodes[0];\r\n  };\r\n\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  // Calculate horizontal positions dynamically based on subtree width\r\n  const calculateNodePositions = (node, depth = 0, x = 0, positions = {}) => {\r\n    if (!node) return 0;\r\n\r\n    const spacing = 100; // Base spacing between nodes\r\n    const leftWidth = calculateNodePositions(node.left, depth + 1, x, positions);\r\n    const rightWidth = calculateNodePositions(\r\n      node.right,\r\n      depth + 1,\r\n      x + leftWidth + spacing,\r\n      positions\r\n    );\r\n\r\n    // Position current node in center of left and right subtree\r\n    const totalWidth = leftWidth + rightWidth + spacing;\r\n    const currentX = x + leftWidth + spacing / 2;\r\n\r\n    positions[node.value] = { x: currentX, y: depth * 120 + 50 };\r\n\r\n    return totalWidth;\r\n  };\r\n\r\n  // Render the tree with dynamically calculated positions\r\n  const renderTree = (node, positions, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    const { x, y } = positions[node.value];\r\n    return (\r\n      <>\r\n        {/* Draw line to parent node */}\r\n        {parentX !== null && parentY !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY}\r\n            x2={x}\r\n            y2={y}\r\n            stroke=\"black\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        )}\r\n        {/* Draw node */}\r\n        <g className=\"circle-group\">\r\n          <circle cx={x} cy={y} r={40} fill=\"green\" stroke=\"black\" />\r\n          <text x={x} y={y} textAnchor=\"middle\" dy=\"5\" fill=\"white\">\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n        {/* Recursive rendering of children */}\r\n        {renderTree(node.left, positions, x, y)}\r\n        {renderTree(node.right, positions, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  // Generate positions for the nodes\r\n  const positions = {};\r\n  let maxWidth = 0;\r\n  let maxHeight = 0;\r\n  if (treeData) {\r\n    maxWidth = calculateNodePositions(treeData, 0, 500, positions); // Start at x=500\r\n    maxHeight = Object.values(positions).reduce((max, { y }) => Math.max(max, y), 0);\r\n  }\r\n\r\n  // Calculate the offset to center the tree\r\n  const offsetX = (1200 - maxWidth) / 2;\r\n  const offsetY = (800 - maxHeight) / 2;\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n      <textarea\r\n        className=\"input-box\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n      />\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"download-button\" onClick={handleDownload}>\r\n          Download Tree\r\n        </button>\r\n      </div>\r\n      <div className=\"canvas-container\">\r\n        <svg\r\n          id=\"treeCanvas\"\r\n          className=\"tree-canvas\"\r\n          viewBox={`0 0 1200 800`} // Fixed width and height of SVG container\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n        >\r\n          {treeData && renderTree(treeData, positions, offsetX, offsetY)}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}