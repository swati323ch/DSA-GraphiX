{"ast":null,"code":"const performBFS = startNodeId => {\n  const visited = new Set();\n  const queue = [startNodeId];\n  const result = [];\n  while (queue.length > 0) {\n    const current = queue.shift();\n    if (!visited.has(current)) {\n      visited.add(current);\n      result.push(current);\n      const neighbors = edges.filter(edge => edge.source.id === current).map(edge => edge.target.id);\n      queue.push(...neighbors.filter(neighbor => !visited.has(neighbor)));\n    }\n  }\n  alert(`BFS Traversal Order: ${result.join(\" -> \")}`);\n};\nconst performDFS = startNodeId => {\n  const visited = new Set();\n  const result = [];\n  const dfs = node => {\n    if (visited.has(node)) return;\n    visited.add(node);\n    result.push(node);\n    const neighbors = edges.filter(edge => edge.source.id === node).map(edge => edge.target.id);\n    neighbors.forEach(dfs);\n  };\n  dfs(startNodeId);\n  alert(`DFS Traversal Order: ${result.join(\" -> \")}`);\n};","map":{"version":3,"names":["performBFS","startNodeId","visited","Set","queue","result","length","current","shift","has","add","push","neighbors","edges","filter","edge","source","id","map","target","neighbor","alert","join","performDFS","dfs","node","forEach"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["const performBFS = (startNodeId) => {\r\n  const visited = new Set();\r\n  const queue = [startNodeId];\r\n  const result = [];\r\n\r\n  while (queue.length > 0) {\r\n    const current = queue.shift();\r\n\r\n    if (!visited.has(current)) {\r\n      visited.add(current);\r\n      result.push(current);\r\n\r\n      const neighbors = edges\r\n        .filter((edge) => edge.source.id === current)\r\n        .map((edge) => edge.target.id);\r\n\r\n      queue.push(...neighbors.filter((neighbor) => !visited.has(neighbor)));\r\n    }\r\n  }\r\n\r\n  alert(`BFS Traversal Order: ${result.join(\" -> \")}`);\r\n};\r\n\r\nconst performDFS = (startNodeId) => {\r\n  const visited = new Set();\r\n  const result = [];\r\n\r\n  const dfs = (node) => {\r\n    if (visited.has(node)) return;\r\n    visited.add(node);\r\n    result.push(node);\r\n\r\n    const neighbors = edges\r\n      .filter((edge) => edge.source.id === node)\r\n      .map((edge) => edge.target.id);\r\n\r\n    neighbors.forEach(dfs);\r\n  };\r\n\r\n  dfs(startNodeId);\r\n  alert(`DFS Traversal Order: ${result.join(\" -> \")}`);\r\n};\r\n"],"mappings":"AAAA,MAAMA,UAAU,GAAIC,WAAW,IAAK;EAClC,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,MAAMC,KAAK,GAAG,CAACH,WAAW,CAAC;EAC3B,MAAMI,MAAM,GAAG,EAAE;EAEjB,OAAOD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IACvB,MAAMC,OAAO,GAAGH,KAAK,CAACI,KAAK,CAAC,CAAC;IAE7B,IAAI,CAACN,OAAO,CAACO,GAAG,CAACF,OAAO,CAAC,EAAE;MACzBL,OAAO,CAACQ,GAAG,CAACH,OAAO,CAAC;MACpBF,MAAM,CAACM,IAAI,CAACJ,OAAO,CAAC;MAEpB,MAAMK,SAAS,GAAGC,KAAK,CACpBC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,MAAM,CAACC,EAAE,KAAKV,OAAO,CAAC,CAC5CW,GAAG,CAAEH,IAAI,IAAKA,IAAI,CAACI,MAAM,CAACF,EAAE,CAAC;MAEhCb,KAAK,CAACO,IAAI,CAAC,GAAGC,SAAS,CAACE,MAAM,CAAEM,QAAQ,IAAK,CAAClB,OAAO,CAACO,GAAG,CAACW,QAAQ,CAAC,CAAC,CAAC;IACvE;EACF;EAEAC,KAAK,CAAC,wBAAwBhB,MAAM,CAACiB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;AACtD,CAAC;AAED,MAAMC,UAAU,GAAItB,WAAW,IAAK;EAClC,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,MAAME,MAAM,GAAG,EAAE;EAEjB,MAAMmB,GAAG,GAAIC,IAAI,IAAK;IACpB,IAAIvB,OAAO,CAACO,GAAG,CAACgB,IAAI,CAAC,EAAE;IACvBvB,OAAO,CAACQ,GAAG,CAACe,IAAI,CAAC;IACjBpB,MAAM,CAACM,IAAI,CAACc,IAAI,CAAC;IAEjB,MAAMb,SAAS,GAAGC,KAAK,CACpBC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,MAAM,CAACC,EAAE,KAAKQ,IAAI,CAAC,CACzCP,GAAG,CAAEH,IAAI,IAAKA,IAAI,CAACI,MAAM,CAACF,EAAE,CAAC;IAEhCL,SAAS,CAACc,OAAO,CAACF,GAAG,CAAC;EACxB,CAAC;EAEDA,GAAG,CAACvB,WAAW,CAAC;EAChBoB,KAAK,CAAC,wBAAwBhB,MAAM,CAACiB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;AACtD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}