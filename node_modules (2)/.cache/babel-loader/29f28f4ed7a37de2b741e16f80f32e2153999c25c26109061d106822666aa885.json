{"ast":null,"code":"let isPaused = false; // Flag to track if animation is paused\nlet currentTimeouts = []; // Store active timeouts\nlet currentArr = []; // The array being sorted\nlet i = 1; // The current index for insertion sort\nlet j = 0; // The inner loop index for insertion sort\n\n// Function to reset the sorting state\nfunction resetSortingState() {\n  isPaused = false;\n  currentTimeouts.forEach(timeout => clearTimeout(timeout)); // Clear all timeouts\n  currentTimeouts = [];\n  currentArr = [];\n  i = 1; // Start from the first element\n  j = 0; // Reset inner loop index\n  updateIndexDisplay(); // Update the index display to reflect the reset value of i\n}\n\n// Function to toggle between pause and resume\nfunction togglePause() {\n  const pauseButton = document.getElementById(\"pauseButton\");\n  isPaused = !isPaused; // Toggle pause state\n\n  if (isPaused) {\n    pauseButton.innerText = \"Resume Animation\"; // Change button text to \"Resume Animation\"\n    currentTimeouts.forEach(timeout => clearTimeout(timeout)); // Stop all active timeouts\n    currentTimeouts = [];\n  } else {\n    pauseButton.innerText = \"Pause Animation\"; // Change button text to \"Pause Animation\"\n    continueSorting(); // Resume sorting from the current state\n  }\n}\n\n// Function to continue sorting from where it was paused\nfunction continueSorting() {\n  step(); // Resume the animation from the current state\n}\n\n// Function to start the sorting\nfunction startSorting() {\n  resetSortingState(); // Reset global state when a new sort starts\n\n  const arrayInput = document.querySelector('.insertion-sort-container #arrayInput').value;\n  const visualizationDiv = document.querySelector('.insertion-sort-container #visualization');\n  const statusDiv = document.querySelector('.insertion-sort-container #status');\n  const pointerDiv = document.querySelector('.insertion-sort-container #pointer');\n\n  // Validate the input\n  currentArr = arrayInput.split(' ').map(Number);\n  if (currentArr.some(isNaN)) {\n    alert('Please enter valid numbers separated by spaces.');\n    return;\n  }\n\n  // Initialize the visualization\n  visualizationDiv.innerHTML = ''; // Clear any previous visualizations\n  pointerDiv.style.display = 'block';\n  statusDiv.innerText = ''; // Clear status\n\n  // Create boxes for visualization\n  currentArr.forEach((num, index) => {\n    const box = document.createElement('div');\n    box.classList.add('box');\n    box.id = `box-${index}`;\n    box.innerText = num;\n    visualizationDiv.appendChild(box);\n  });\n\n  // Start animation\n  step();\n}\n\n// Function to update the pointer position\nfunction updatePointer() {\n  const pointer = document.querySelector('.insertion-sort-container #pointer');\n  const currentBox = document.querySelector(`.insertion-sort-container #box-${i}`);\n  if (currentBox) {\n    const offsetX = currentBox.offsetLeft + currentBox.offsetWidth / 2 - 30;\n    const offsetY = currentBox.offsetTop + currentBox.offsetHeight;\n    pointer.style.left = `${offsetX}px`;\n    pointer.style.top = `${offsetY}px`;\n  }\n}\n\n// Function to update the index display\nfunction updateIndexDisplay() {\n  const indexDiv = document.querySelector('.insertion-sort-container #index');\n  indexDiv.innerText = `i = ${i}`; // Dynamically update the index display with the current value of i\n}\n\n// Sorting steps for the animation\nfunction step() {\n  if (isPaused) return; // Stop execution if paused\n\n  const statusDiv = document.querySelector('.insertion-sort-container #status');\n  if (i >= currentArr.length) {\n    currentArr.forEach((_, idx) => {\n      document.querySelector(`.insertion-sort-container #box-${idx}`).classList.add('sorted');\n    });\n    statusDiv.innerText = 'Sorting complete!';\n    return;\n  }\n  let key = currentArr[i];\n  j = i - 1;\n  const currentBox = document.querySelector(`.insertion-sort-container #box-${i}`);\n  currentBox.classList.add('highlight');\n  statusDiv.innerText = `Sorting element ${key}...`;\n  updatePointer(); // Update the pointer position based on i\n  updateIndexDisplay(); // Update the index display with the current value of i\n\n  function innerStep() {\n    if (isPaused) return; // Stop execution if paused\n\n    if (j >= 0 && currentArr[j] > key) {\n      currentArr[j + 1] = currentArr[j];\n      const box = document.querySelector(`.insertion-sort-container #box-${j + 1}`);\n      box.innerText = currentArr[j];\n      box.classList.add('highlight');\n      const prevBox = document.querySelector(`.insertion-sort-container #box-${j}`);\n      prevBox.classList.remove('highlight');\n      j--;\n      let timeoutId = setTimeout(innerStep, 1500);\n      currentTimeouts.push(timeoutId);\n    } else {\n      currentArr[j + 1] = key;\n      const box = document.querySelector(`.insertion-sort-container #box-${j + 1}`);\n      box.innerText = key;\n      currentBox.classList.remove('highlight');\n      statusDiv.innerText = `Inserted ${key} at position ${j + 1}`;\n      i++; // Move to the next element\n      updatePointer(); // Update the pointer position\n      updateIndexDisplay(); // Update the index display with the new value of i\n      let timeoutId = setTimeout(step, 1500);\n      currentTimeouts.push(timeoutId);\n    }\n  }\n  innerStep();\n}\n\n// Add event listeners dynamically for the injected HTML\ndocument.addEventListener('click', event => {\n  if (event.target.matches('.insertion-sort-container #sortButton')) {\n    startSorting();\n  }\n  if (event.target.matches('.insertion-sort-container #pauseButton')) {\n    togglePause();\n  }\n});","map":{"version":3,"names":["isPaused","currentTimeouts","currentArr","i","j","resetSortingState","forEach","timeout","clearTimeout","updateIndexDisplay","togglePause","pauseButton","document","getElementById","innerText","continueSorting","step","startSorting","arrayInput","querySelector","value","visualizationDiv","statusDiv","pointerDiv","split","map","Number","some","isNaN","alert","innerHTML","style","display","num","index","box","createElement","classList","add","id","appendChild","updatePointer","pointer","currentBox","offsetX","offsetLeft","offsetWidth","offsetY","offsetTop","offsetHeight","left","top","indexDiv","length","_","idx","key","innerStep","prevBox","remove","timeoutId","setTimeout","push","addEventListener","event","target","matches"],"sources":["C:/Users/hp/Desktop/new/algo/src/InsertionSort.js"],"sourcesContent":["let isPaused = false;  // Flag to track if animation is paused\r\nlet currentTimeouts = [];  // Store active timeouts\r\nlet currentArr = [];  // The array being sorted\r\nlet i = 1;  // The current index for insertion sort\r\nlet j = 0;  // The inner loop index for insertion sort\r\n\r\n// Function to reset the sorting state\r\nfunction resetSortingState() {\r\n    isPaused = false;\r\n    currentTimeouts.forEach(timeout => clearTimeout(timeout));  // Clear all timeouts\r\n    currentTimeouts = [];\r\n    currentArr = [];\r\n    i = 1;  // Start from the first element\r\n    j = 0;  // Reset inner loop index\r\n    updateIndexDisplay();  // Update the index display to reflect the reset value of i\r\n}\r\n\r\n// Function to toggle between pause and resume\r\nfunction togglePause() {\r\n    const pauseButton = document.getElementById(\"pauseButton\");\r\n\r\n    isPaused = !isPaused; // Toggle pause state\r\n\r\n    if (isPaused) {\r\n        pauseButton.innerText = \"Resume Animation\"; // Change button text to \"Resume Animation\"\r\n        currentTimeouts.forEach(timeout => clearTimeout(timeout)); // Stop all active timeouts\r\n        currentTimeouts = [];\r\n    } else {\r\n        pauseButton.innerText = \"Pause Animation\"; // Change button text to \"Pause Animation\"\r\n        continueSorting(); // Resume sorting from the current state\r\n    }\r\n}\r\n\r\n// Function to continue sorting from where it was paused\r\nfunction continueSorting() {\r\n    step(); // Resume the animation from the current state\r\n}\r\n\r\n// Function to start the sorting\r\nfunction startSorting() {\r\n    resetSortingState();  // Reset global state when a new sort starts\r\n\r\n    const arrayInput = document.querySelector('.insertion-sort-container #arrayInput').value;\r\n    const visualizationDiv = document.querySelector('.insertion-sort-container #visualization');\r\n    const statusDiv = document.querySelector('.insertion-sort-container #status');\r\n    const pointerDiv = document.querySelector('.insertion-sort-container #pointer');\r\n\r\n    // Validate the input\r\n    currentArr = arrayInput.split(' ').map(Number);\r\n    if (currentArr.some(isNaN)) {\r\n        alert('Please enter valid numbers separated by spaces.');\r\n        return;\r\n    }\r\n\r\n    // Initialize the visualization\r\n    visualizationDiv.innerHTML = '';  // Clear any previous visualizations\r\n    pointerDiv.style.display = 'block';\r\n    statusDiv.innerText = '';  // Clear status\r\n\r\n    // Create boxes for visualization\r\n    currentArr.forEach((num, index) => {\r\n        const box = document.createElement('div');\r\n        box.classList.add('box');\r\n        box.id = `box-${index}`;\r\n        box.innerText = num;\r\n        visualizationDiv.appendChild(box);\r\n    });\r\n\r\n    // Start animation\r\n    step();\r\n}\r\n\r\n// Function to update the pointer position\r\nfunction updatePointer() {\r\n    const pointer = document.querySelector('.insertion-sort-container #pointer');\r\n    const currentBox = document.querySelector(`.insertion-sort-container #box-${i}`);\r\n    if (currentBox) {\r\n        const offsetX = currentBox.offsetLeft + currentBox.offsetWidth / 2 - 30;\r\n        const offsetY = currentBox.offsetTop + currentBox.offsetHeight;\r\n        pointer.style.left = `${offsetX}px`;\r\n        pointer.style.top = `${offsetY}px`;\r\n    }\r\n}\r\n\r\n// Function to update the index display\r\nfunction updateIndexDisplay() {\r\n    const indexDiv = document.querySelector('.insertion-sort-container #index');\r\n    indexDiv.innerText = `i = ${i}`;  // Dynamically update the index display with the current value of i\r\n}\r\n\r\n// Sorting steps for the animation\r\nfunction step() {\r\n    if (isPaused) return;  // Stop execution if paused\r\n\r\n    const statusDiv = document.querySelector('.insertion-sort-container #status');\r\n\r\n    if (i >= currentArr.length) {\r\n        currentArr.forEach((_, idx) => {\r\n            document.querySelector(`.insertion-sort-container #box-${idx}`).classList.add('sorted');\r\n        });\r\n        statusDiv.innerText = 'Sorting complete!';\r\n        return;\r\n    }\r\n\r\n    let key = currentArr[i];\r\n    j = i - 1;\r\n\r\n    const currentBox = document.querySelector(`.insertion-sort-container #box-${i}`);\r\n    currentBox.classList.add('highlight');\r\n    statusDiv.innerText = `Sorting element ${key}...`;\r\n\r\n    updatePointer();  // Update the pointer position based on i\r\n    updateIndexDisplay();  // Update the index display with the current value of i\r\n\r\n    function innerStep() {\r\n        if (isPaused) return;  // Stop execution if paused\r\n\r\n        if (j >= 0 && currentArr[j] > key) {\r\n            currentArr[j + 1] = currentArr[j];\r\n\r\n            const box = document.querySelector(`.insertion-sort-container #box-${j + 1}`);\r\n            box.innerText = currentArr[j];\r\n            box.classList.add('highlight');\r\n\r\n            const prevBox = document.querySelector(`.insertion-sort-container #box-${j}`);\r\n            prevBox.classList.remove('highlight');\r\n\r\n            j--;\r\n            let timeoutId = setTimeout(innerStep, 1500);\r\n            currentTimeouts.push(timeoutId);\r\n        } else {\r\n            currentArr[j + 1] = key;\r\n\r\n            const box = document.querySelector(`.insertion-sort-container #box-${j + 1}`);\r\n            box.innerText = key;\r\n            currentBox.classList.remove('highlight');\r\n\r\n            statusDiv.innerText = `Inserted ${key} at position ${j + 1}`;\r\n            i++;  // Move to the next element\r\n            updatePointer();  // Update the pointer position\r\n            updateIndexDisplay();  // Update the index display with the new value of i\r\n            let timeoutId = setTimeout(step, 1500);\r\n            currentTimeouts.push(timeoutId);\r\n        }\r\n    }\r\n\r\n    innerStep();\r\n}\r\n\r\n// Add event listeners dynamically for the injected HTML\r\ndocument.addEventListener('click', (event) => {\r\n    if (event.target.matches('.insertion-sort-container #sortButton')) {\r\n        startSorting();\r\n    }\r\n\r\n    if (event.target.matches('.insertion-sort-container #pauseButton')) {\r\n        togglePause();\r\n    }\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}