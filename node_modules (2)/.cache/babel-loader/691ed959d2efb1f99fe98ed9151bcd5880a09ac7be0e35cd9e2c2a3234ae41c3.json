{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ReactFlow, { Controls } from \"reactflow\";\nimport \"Gra.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualizer = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [isDirected, setIsDirected] = useState(true); // Default to directed graph\n  const [inputValue, setInputValue] = useState(\"\");\n  const parseInput = () => {\n    const lines = inputValue.trim().split(\"\\n\");\n    const newNodes = [];\n    const newEdges = [];\n    lines.forEach(line => {\n      const parts = line.split(\" \").map(item => item.trim());\n      if (parts.length === 1) {\n        // Node definition\n        newNodes.push({\n          id: parts[0],\n          data: {\n            label: parts[0]\n          },\n          position: {\n            x: Math.random() * 400,\n            y: Math.random() * 400\n          }\n        });\n      } else if (parts.length >= 2) {\n        // Edge definition\n        const source = parts[0];\n        const target = parts[1];\n        const weight = parts[2] ? ` (${parts[2]})` : \"\";\n        newEdges.push({\n          id: `${source}-${target}`,\n          source,\n          target,\n          label: weight,\n          animated: isDirected\n        });\n      }\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  const toggleGraphType = directed => {\n    setIsDirected(directed);\n    // Re-generate edges with updated `animated` property\n    setEdges(prevEdges => prevEdges.map(edge => ({\n      ...edge,\n      animated: directed\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Enter graph input...\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        rows: \"10\",\n        cols: \"30\",\n        style: {\n          marginBottom: \"10px\",\n          resize: \"none\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: parseInput,\n          style: {\n            marginRight: \"10px\"\n          },\n          children: \"Generate Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleGraphType(true),\n          style: {\n            marginRight: \"10px\"\n          },\n          children: \"Directed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleGraphType(false),\n          children: \"Undirected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        fitView: true,\n        children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualizer, \"k2SyDF19IcKbd3EtZMydTpheAUM=\");\n_c = GraphVisualizer;\nexport default GraphVisualizer;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualizer\");","map":{"version":3,"names":["React","useState","ReactFlow","Controls","jsxDEV","_jsxDEV","GraphVisualizer","_s","nodes","setNodes","edges","setEdges","isDirected","setIsDirected","inputValue","setInputValue","parseInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","map","item","length","push","id","data","label","position","x","Math","random","y","source","target","weight","animated","toggleGraphType","directed","prevEdges","edge","style","width","height","display","flexDirection","alignItems","children","marginBottom","placeholder","value","onChange","e","rows","cols","resize","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginRight","fitView","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactFlow, { Controls } from \"reactflow\";\r\nimport \"Gra.css\";\r\n\r\nconst GraphVisualizer = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [isDirected, setIsDirected] = useState(true); // Default to directed graph\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const parseInput = () => {\r\n    const lines = inputValue.trim().split(\"\\n\");\r\n    const newNodes = [];\r\n    const newEdges = [];\r\n\r\n    lines.forEach((line) => {\r\n      const parts = line.split(\" \").map((item) => item.trim());\r\n      if (parts.length === 1) {\r\n        // Node definition\r\n        newNodes.push({ id: parts[0], data: { label: parts[0] }, position: { x: Math.random() * 400, y: Math.random() * 400 } });\r\n      } else if (parts.length >= 2) {\r\n        // Edge definition\r\n        const source = parts[0];\r\n        const target = parts[1];\r\n        const weight = parts[2] ? ` (${parts[2]})` : \"\";\r\n        newEdges.push({ id: `${source}-${target}`, source, target, label: weight, animated: isDirected });\r\n      }\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  const toggleGraphType = (directed) => {\r\n    setIsDirected(directed);\r\n    // Re-generate edges with updated `animated` property\r\n    setEdges((prevEdges) =>\r\n      prevEdges.map((edge) => ({\r\n        ...edge,\r\n        animated: directed,\r\n      }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100vh\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n      <div style={{ marginBottom: \"20px\" }}>\r\n        <textarea\r\n          placeholder=\"Enter graph input...\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          rows=\"10\"\r\n          cols=\"30\"\r\n          style={{ marginBottom: \"10px\", resize: \"none\" }}\r\n        />\r\n        <div>\r\n          <button onClick={parseInput} style={{ marginRight: \"10px\" }}>\r\n            Generate Graph\r\n          </button>\r\n          <button onClick={() => toggleGraphType(true)} style={{ marginRight: \"10px\" }}>\r\n            Directed\r\n          </button>\r\n          <button onClick={() => toggleGraphType(false)}>Undirected</button>\r\n        </div>\r\n      </div>\r\n      <div style={{ width: \"100%\", height: \"100%\" }}>\r\n        <ReactFlow nodes={nodes} edges={edges} fitView>\r\n          <Controls />\r\n        </ReactFlow>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}