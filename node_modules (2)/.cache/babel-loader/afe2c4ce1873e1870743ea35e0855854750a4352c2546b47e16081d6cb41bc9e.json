{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { tree as d3Tree, hierarchy } from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = ({\n  treeData\n}) => {\n  _s();\n  const svgRef = useRef();\n  const [svgWidth, setSvgWidth] = useState(0);\n  const [svgHeight, setSvgHeight] = useState(0);\n  useEffect(() => {\n    if (!treeData) return;\n\n    // Create the hierarchy data for d3\n    const root = hierarchy(treeData);\n    const treeLayout = d3Tree().size([svgWidth, svgHeight]);\n    const treeDataLayout = treeLayout(root);\n\n    // Create the SVG elements for the tree nodes and links\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('*').remove(); // Clear the existing SVG content\n\n    // Create links\n    svg.selectAll('.link').data(treeDataLayout.links()).enter().append('line').attr('class', 'link').attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y).attr('stroke', '#000').attr('stroke-width', 2);\n\n    // Create nodes (circles)\n    const nodeGroup = svg.selectAll('.node').data(treeDataLayout.descendants()).enter().append('g').attr('class', 'node').attr('transform', d => `translate(${d.x}, ${d.y})`);\n    nodeGroup.append('circle').attr('class', 'tree-circle').attr('r', 40) // Fixed radius\n    .style('fill', '#4CAF50').style('stroke', '#2C6B2F').style('stroke-width', '4px');\n    nodeGroup.append('text').attr('dx', 0).attr('dy', 4).style('text-anchor', 'middle').style('font-size', '1.5rem').style('fill', 'white').text(d => d.data);\n  }, [treeData, svgWidth, svgHeight]);\n  useEffect(() => {\n    const handleResize = () => {\n      setSvgWidth(window.innerWidth * 0.8); // Set width to 80% of the window width\n      setSvgHeight(600); // Fixed height\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \"Binary Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: svgWidth,\n        height: svgHeight,\n        viewBox: `-${svgWidth / 2} -100 ${svgWidth} ${svgHeight + 200}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"C3FMiNG45jN6bCrLFNuU+822wXU=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","tree","d3Tree","hierarchy","jsxDEV","_jsxDEV","TreeVisualizer","treeData","_s","svgRef","svgWidth","setSvgWidth","svgHeight","setSvgHeight","root","treeLayout","size","treeDataLayout","svg","d3","select","current","selectAll","remove","data","links","enter","append","attr","d","source","x","y","target","nodeGroup","descendants","style","text","handleResize","window","innerWidth","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","viewBox","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { tree as d3Tree, hierarchy } from 'd3';\r\n\r\nconst TreeVisualizer = ({ treeData }) => {\r\n  const svgRef = useRef();\r\n  const [svgWidth, setSvgWidth] = useState(0);\r\n  const [svgHeight, setSvgHeight] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (!treeData) return;\r\n\r\n    // Create the hierarchy data for d3\r\n    const root = hierarchy(treeData);\r\n    const treeLayout = d3Tree().size([svgWidth, svgHeight]);\r\n    const treeDataLayout = treeLayout(root);\r\n\r\n    // Create the SVG elements for the tree nodes and links\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll('*').remove(); // Clear the existing SVG content\r\n\r\n    // Create links\r\n    svg\r\n      .selectAll('.link')\r\n      .data(treeDataLayout.links())\r\n      .enter()\r\n      .append('line')\r\n      .attr('class', 'link')\r\n      .attr('x1', (d) => d.source.x)\r\n      .attr('y1', (d) => d.source.y)\r\n      .attr('x2', (d) => d.target.x)\r\n      .attr('y2', (d) => d.target.y)\r\n      .attr('stroke', '#000')\r\n      .attr('stroke-width', 2);\r\n\r\n    // Create nodes (circles)\r\n    const nodeGroup = svg\r\n      .selectAll('.node')\r\n      .data(treeDataLayout.descendants())\r\n      .enter()\r\n      .append('g')\r\n      .attr('class', 'node')\r\n      .attr('transform', (d) => `translate(${d.x}, ${d.y})`);\r\n\r\n    nodeGroup\r\n      .append('circle')\r\n      .attr('class', 'tree-circle')\r\n      .attr('r', 40) // Fixed radius\r\n      .style('fill', '#4CAF50')\r\n      .style('stroke', '#2C6B2F')\r\n      .style('stroke-width', '4px');\r\n\r\n    nodeGroup\r\n      .append('text')\r\n      .attr('dx', 0)\r\n      .attr('dy', 4)\r\n      .style('text-anchor', 'middle')\r\n      .style('font-size', '1.5rem')\r\n      .style('fill', 'white')\r\n      .text((d) => d.data);\r\n\r\n  }, [treeData, svgWidth, svgHeight]);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setSvgWidth(window.innerWidth * 0.8);  // Set width to 80% of the window width\r\n      setSvgHeight(600);  // Fixed height\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <div className=\"title\">Binary Tree Visualizer</div>\r\n      <div className=\"canvas-container\">\r\n        <svg\r\n          ref={svgRef}\r\n          width={svgWidth}\r\n          height={svgHeight}\r\n          viewBox={`-${svgWidth / 2} -100 ${svgWidth} ${svgHeight + 200}`}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}