{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./GraphVisualization.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [positions, setPositions] = useState({}); // Store node positions\n  const [input, setInput] = useState(\"\");\n  const handleInputChange = e => {\n    const input = e.target.value;\n    setInput(input);\n    try {\n      const adjList = JSON.parse(input);\n      if (!Array.isArray(adjList) || adjList.some(item => !Array.isArray(item))) {\n        alert(\"Invalid format! Please enter a valid adjacency list.\");\n        return;\n      }\n\n      // Parse nodes and edges\n      const parsedNodes = adjList.map((_, index) => ({\n        id: index.toString()\n      }));\n      const parsedEdges = [];\n      adjList.forEach((neighbors, from) => {\n        neighbors.forEach(to => {\n          parsedEdges.push({\n            from: from.toString(),\n            to: to.toString()\n          });\n        });\n      });\n\n      // Generate random positions for each node\n      const newPositions = {};\n      parsedNodes.forEach(node => {\n        newPositions[node.id] = {\n          x: Math.random() * 500 + 50,\n          y: Math.random() * 300 + 50\n        };\n      });\n      setNodes(parsedNodes);\n      setEdges(parsedEdges);\n      setPositions(newPositions);\n    } catch (error) {\n      alert(\"Invalid input! Please provide a valid JSON object.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Graph Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter adjacency list as JSON (e.g., [[1], [0, 2, 4], [1, 3, 4], [2], [1, 2]])\",\n      onChange: handleInputChange,\n      className: \"input-container\",\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-display\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"600\",\n        height: \"400\",\n        style: {\n          border: \"1px solid black\"\n        },\n        children: [edges.map((edge, index) => {\n          const fromPos = positions[edge.from];\n          const toPos = positions[edge.to];\n          if (!fromPos || !toPos) return null;\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: fromPos.x,\n            y1: fromPos.y,\n            x2: toPos.x,\n            y2: toPos.y,\n            stroke: \"black\",\n            strokeWidth: 2\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this);\n        }), nodes.map(node => {\n          const pos = positions[node.id];\n          if (!pos) return null;\n          return /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: pos.x,\n            cy: pos.y,\n            r: 20,\n            fill: \"skyblue\",\n            stroke: \"black\",\n            strokeWidth: 2,\n            children: /*#__PURE__*/_jsxDEV(\"title\", {\n              children: node.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this)\n          }, node.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"g8623TG4SIsGKGJkJ3x4+GgxtYc=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","positions","setPositions","input","setInput","handleInputChange","e","target","value","adjList","JSON","parse","Array","isArray","some","item","alert","parsedNodes","map","_","index","id","toString","parsedEdges","forEach","neighbors","from","to","push","newPositions","node","x","Math","random","y","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","width","height","style","border","edge","fromPos","toPos","x1","y1","x2","y2","stroke","strokeWidth","pos","cx","cy","r","fill","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./GraphVisualization.css\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [positions, setPositions] = useState({}); // Store node positions\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    const input = e.target.value;\r\n    setInput(input);\r\n\r\n    try {\r\n      const adjList = JSON.parse(input);\r\n\r\n      if (!Array.isArray(adjList) || adjList.some(item => !Array.isArray(item))) {\r\n        alert(\"Invalid format! Please enter a valid adjacency list.\");\r\n        return;\r\n      }\r\n\r\n      // Parse nodes and edges\r\n      const parsedNodes = adjList.map((_, index) => ({ id: index.toString() }));\r\n      const parsedEdges = [];\r\n\r\n      adjList.forEach((neighbors, from) => {\r\n        neighbors.forEach((to) => {\r\n          parsedEdges.push({ from: from.toString(), to: to.toString() });\r\n        });\r\n      });\r\n\r\n      // Generate random positions for each node\r\n      const newPositions = {};\r\n      parsedNodes.forEach((node) => {\r\n        newPositions[node.id] = {\r\n          x: Math.random() * 500 + 50,\r\n          y: Math.random() * 300 + 50,\r\n        };\r\n      });\r\n\r\n      setNodes(parsedNodes);\r\n      setEdges(parsedEdges);\r\n      setPositions(newPositions);\r\n    } catch (error) {\r\n      alert(\"Invalid input! Please provide a valid JSON object.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>Graph Visualization</h1>\r\n      <input\r\n        type=\"text\"\r\n        placeholder='Enter adjacency list as JSON (e.g., [[1], [0, 2, 4], [1, 3, 4], [2], [1, 2]])'\r\n        onChange={handleInputChange}\r\n        className=\"input-container\"\r\n        value={input}\r\n      />\r\n      <div className=\"graph-display\">\r\n        <svg width=\"600\" height=\"400\" style={{ border: \"1px solid black\" }}>\r\n          {/* Render edges */}\r\n          {edges.map((edge, index) => {\r\n            const fromPos = positions[edge.from];\r\n            const toPos = positions[edge.to];\r\n\r\n            if (!fromPos || !toPos) return null;\r\n\r\n            return (\r\n              <line\r\n                key={index}\r\n                x1={fromPos.x}\r\n                y1={fromPos.y}\r\n                x2={toPos.x}\r\n                y2={toPos.y}\r\n                stroke=\"black\"\r\n                strokeWidth={2}\r\n              />\r\n            );\r\n          })}\r\n\r\n          {/* Render nodes */}\r\n          {nodes.map((node) => {\r\n            const pos = positions[node.id];\r\n            if (!pos) return null;\r\n\r\n            return (\r\n              <circle\r\n                key={node.id}\r\n                cx={pos.x}\r\n                cy={pos.y}\r\n                r={20}\r\n                fill=\"skyblue\"\r\n                stroke=\"black\"\r\n                strokeWidth={2}\r\n              >\r\n                <title>{node.id}</title>\r\n              </circle>\r\n            );\r\n          })}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}