{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\TreeVisualisation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./TreeVisualisation.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeVisualizer = () => {\n  _s();\n  const [input, setInput] = useState('[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]');\n  const [treeData, setTreeData] = useState(null);\n  const [maxDepth, setMaxDepth] = useState(0);\n  const [nodePositions, setNodePositions] = useState([]);\n\n  // Function to build the tree from a level-order array\n  const buildTree = arr => {\n    if (!arr.length) return null;\n    const nodes = arr.map(value => value !== null ? {\n      value,\n      left: null,\n      right: null\n    } : null);\n    for (let i = 0, j = 1; j < arr.length; i++) {\n      if (nodes[i] !== null) {\n        if (j < arr.length) nodes[i].left = nodes[j++];\n        if (j < arr.length) nodes[i].right = nodes[j++];\n      }\n    }\n    return nodes[0];\n  };\n\n  // Calculate the maximum depth of the tree\n  const calculateDepth = node => {\n    if (!node) return 0;\n    return 1 + Math.max(calculateDepth(node.left), calculateDepth(node.right));\n  };\n\n  // Calculate horizontal positions of each node to avoid overlaps\n  const calculateNodePositions = (node, x, y, spacing) => {\n    if (!node) return [];\n    const positions = [];\n    const verticalSpacing = 80;\n\n    // Recursively calculate positions for left and right children\n    const leftSubtree = calculateNodePositions(node.left, x - spacing, y + verticalSpacing, spacing / 2);\n    const rightSubtree = calculateNodePositions(node.right, x + spacing, y + verticalSpacing, spacing / 2);\n\n    // Add current node's position\n    positions.push({\n      x,\n      y,\n      value: node.value\n    });\n\n    // Merge child positions\n    return positions.concat(leftSubtree, rightSubtree);\n  };\n\n  // Handle \"Visualize Tree\" button click\n  const handleVisualize = () => {\n    try {\n      const parsedArray = JSON.parse(input);\n      const root = buildTree(parsedArray);\n      setTreeData(root);\n      setMaxDepth(calculateDepth(root));\n\n      // Calculate node positions based on the depth\n      const initialSpacing = 500; // Base spacing for root\n      const positions = calculateNodePositions(root, 500, 50, initialSpacing / 2);\n      setNodePositions(positions);\n    } catch (error) {\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\n    }\n  };\n\n  // Render the tree using calculated positions\n  const renderTree = () => {\n    return nodePositions.map((node, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"circle-group\",\n      children: [index > 0 && /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: nodePositions[Math.floor((index - 1) / 2)].x,\n        y1: nodePositions[Math.floor((index - 1) / 2)].y + 20,\n        x2: node.x,\n        y2: node.y - 20,\n        stroke: \"black\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: node.x,\n        cy: node.y,\n        r: \"20\",\n        className: \"tree-circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: node.x,\n        y: node.y,\n        textAnchor: \"middle\",\n        dy: \"5\",\n        fill: \"white\",\n        fontWeight: \"bold\",\n        children: node.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tree-visualizer-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Tree Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"input-box\",\n      value: input,\n      onChange: e => setInput(e.target.value),\n      placeholder: \"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"visualize-button\",\n        onClick: handleVisualize,\n        children: \"Visualize Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"canvas-container\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        id: \"treeCanvas\",\n        className: \"tree-canvas\",\n        viewBox: `0 0 1000 ${80 * (maxDepth + 1)}`,\n        width: \"100%\",\n        height: \"auto\",\n        children: treeData && renderTree()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeVisualizer, \"rjBIcpUXwYwfRubb7ZzuIKRpr5A=\");\n_c = TreeVisualizer;\nexport default TreeVisualizer;\nvar _c;\n$RefreshReg$(_c, \"TreeVisualizer\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TreeVisualizer","_s","input","setInput","treeData","setTreeData","maxDepth","setMaxDepth","nodePositions","setNodePositions","buildTree","arr","length","nodes","map","value","left","right","i","j","calculateDepth","node","Math","max","calculateNodePositions","x","y","spacing","positions","verticalSpacing","leftSubtree","rightSubtree","push","concat","handleVisualize","parsedArray","JSON","parse","root","initialSpacing","error","alert","renderTree","index","className","children","x1","floor","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","cx","cy","r","textAnchor","dy","fill","fontWeight","onChange","e","target","placeholder","onClick","id","viewBox","width","height","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]');\r\n  const [treeData, setTreeData] = useState(null);\r\n  const [maxDepth, setMaxDepth] = useState(0);\r\n  const [nodePositions, setNodePositions] = useState([]);\r\n\r\n  // Function to build the tree from a level-order array\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n\r\n    const nodes = arr.map((value) => (value !== null ? { value, left: null, right: null } : null));\r\n\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n\r\n    return nodes[0];\r\n  };\r\n\r\n  // Calculate the maximum depth of the tree\r\n  const calculateDepth = (node) => {\r\n    if (!node) return 0;\r\n    return 1 + Math.max(calculateDepth(node.left), calculateDepth(node.right));\r\n  };\r\n\r\n  // Calculate horizontal positions of each node to avoid overlaps\r\n  const calculateNodePositions = (node, x, y, spacing) => {\r\n    if (!node) return [];\r\n\r\n    const positions = [];\r\n    const verticalSpacing = 80;\r\n\r\n    // Recursively calculate positions for left and right children\r\n    const leftSubtree = calculateNodePositions(node.left, x - spacing, y + verticalSpacing, spacing / 2);\r\n    const rightSubtree = calculateNodePositions(node.right, x + spacing, y + verticalSpacing, spacing / 2);\r\n\r\n    // Add current node's position\r\n    positions.push({ x, y, value: node.value });\r\n\r\n    // Merge child positions\r\n    return positions.concat(leftSubtree, rightSubtree);\r\n  };\r\n\r\n  // Handle \"Visualize Tree\" button click\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      const root = buildTree(parsedArray);\r\n      setTreeData(root);\r\n      setMaxDepth(calculateDepth(root));\r\n\r\n      // Calculate node positions based on the depth\r\n      const initialSpacing = 500; // Base spacing for root\r\n      const positions = calculateNodePositions(root, 500, 50, initialSpacing / 2);\r\n      setNodePositions(positions);\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  // Render the tree using calculated positions\r\n  const renderTree = () => {\r\n    return nodePositions.map((node, index) => (\r\n      <g key={index} className=\"circle-group\">\r\n        {/* Draw connecting lines */}\r\n        {index > 0 && (\r\n          <line\r\n            x1={nodePositions[Math.floor((index - 1) / 2)].x}\r\n            y1={nodePositions[Math.floor((index - 1) / 2)].y + 20}\r\n            x2={node.x}\r\n            y2={node.y - 20}\r\n            stroke=\"black\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        )}\r\n        {/* Draw current node */}\r\n        <circle cx={node.x} cy={node.y} r=\"20\" className=\"tree-circle\" />\r\n        <text x={node.x} y={node.y} textAnchor=\"middle\" dy=\"5\" fill=\"white\" fontWeight=\"bold\">\r\n          {node.value}\r\n        </text>\r\n      </g>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n\r\n      {/* Textarea for input */}\r\n      <textarea\r\n        className=\"input-box\"\r\n        value={input}\r\n        onChange={(e) => setInput(e.target.value)}\r\n        placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8,null,null,6,7,9]\"\r\n      />\r\n\r\n      {/* Buttons for actions */}\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n      </div>\r\n\r\n      {/* Canvas for rendering the tree */}\r\n      <div className=\"canvas-container\">\r\n        <svg\r\n          id=\"treeCanvas\"\r\n          className=\"tree-canvas\"\r\n          viewBox={`0 0 1000 ${80 * (maxDepth + 1)}`}\r\n          width=\"100%\"\r\n          height=\"auto\"\r\n        >\r\n          {treeData && renderTree()}\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}