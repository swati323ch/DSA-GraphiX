{"ast":null,"code":"import React,{useState}from\"react\";import\"./TreeVisualisation.css\";import db from\"./assets/Download_button.png\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const TreeVisualizer=()=>{const[input,setInput]=useState('[1,2,3,4,5,null,8,null,null,6,7,9]');const[treeData,setTreeData]=useState(null);const[highlightedNodes,setHighlightedNodes]=useState([]);const[bfsQueue,setBfsQueue]=useState([]);const[inorderResult,setInorderResult]=useState([]);const[preorderResult,setPreorderResult]=useState([]);const[postorderResult,setPostorderResult]=useState([]);const[isBfsRunning,setIsBfsRunning]=useState(false);const[isTraversalRunning,setIsTraversalRunning]=useState(false);const buildTree=arr=>{if(!arr.length)return null;const nodes=arr.map(value=>value!==null?{value,left:null,right:null}:null);for(let i=0,j=1;j<arr.length;i++){if(nodes[i]!==null){if(j<arr.length)nodes[i].left=nodes[j++];if(j<arr.length)nodes[i].right=nodes[j++];}}return nodes[0];};const handleVisualize=()=>{try{const parsedArray=JSON.parse(input);setTreeData(buildTree(parsedArray));}catch(error){alert(\"Invalid input format. Please enter a valid JSON array.\");}};const bfsTraversalWithQueue=node=>{setIsBfsRunning(true);setIsTraversalRunning(false);const queue=[node];const traversal=[];const visualQueue=[];while(queue.length>0){const current=queue.shift();if(current){traversal.push(current.value);visualQueue.push([...queue.map(n=>n.value),current.value]);if(current.left)queue.push(current.left);if(current.right)queue.push(current.right);}}let index=0;const interval=setInterval(()=>{if(index<visualQueue.length){setHighlightedNodes([traversal[index]]);setBfsQueue(visualQueue[index]);index++;}else{clearInterval(interval);setIsBfsRunning(false);setHighlightedNodes([]);setBfsQueue([]);}},1500);};const dfsTraversal=node=>{const result=[];const dfs=current=>{if(!current)return;result.push(current.value);dfs(current.left);dfs(current.right);};dfs(node);return result;};const resetTraversalResults=()=>{setInorderResult([]);setPreorderResult([]);setPostorderResult([]);};const inorderTraversal=node=>{resetTraversalResults();// Reset results before starting\nsetIsTraversalRunning(true);const result=[];const inorder=async current=>{if(!current)return;await inorder(current.left);result.push(current.value);setHighlightedNodes([current.value]);setInorderResult(prev=>[...prev,current.value]);await new Promise(resolve=>setTimeout(resolve,1000));await inorder(current.right);};inorder(node).then(()=>setHighlightedNodes([]));};const preorderTraversal=node=>{resetTraversalResults();// Reset results before starting\nsetIsTraversalRunning(true);const result=[];const preorder=async current=>{if(!current)return;result.push(current.value);setHighlightedNodes([current.value]);setPreorderResult(prev=>[...prev,current.value]);await new Promise(resolve=>setTimeout(resolve,1000));await preorder(current.left);await preorder(current.right);};preorder(node).then(()=>setHighlightedNodes([]));};const postorderTraversal=node=>{resetTraversalResults();// Reset results before starting\nsetIsTraversalRunning(true);const result=[];const postorder=async current=>{if(!current)return;await postorder(current.left);await postorder(current.right);result.push(current.value);setHighlightedNodes([current.value]);setPostorderResult(prev=>[...prev,current.value]);await new Promise(resolve=>setTimeout(resolve,1000));};postorder(node).then(()=>setHighlightedNodes([]));};const visualizeTraversal=traversal=>{setIsBfsRunning(false);setIsTraversalRunning(true);let index=0;const interval=setInterval(()=>{if(index<traversal.length){setHighlightedNodes([traversal[index]]);index++;}else{clearInterval(interval);setHighlightedNodes([]);}},1500);};const handleBFSVisualize=()=>{if(!isBfsRunning&&treeData){bfsTraversalWithQueue(treeData);}else if(isBfsRunning){alert(\"BFS is already running. Please wait for it to finish.\");}else{alert(\"Please visualize the tree first.\");}};const handleDFSVisualize=()=>{const traversal=dfsTraversal(treeData);visualizeTraversal(traversal);};const handleDownload=()=>{const svgElement=document.getElementById(\"treeCanvas\");const svgData=new XMLSerializer().serializeToString(svgElement);const blob=new Blob([svgData],{type:\"image/svg+xml\"});const url=URL.createObjectURL(blob);const a=document.createElement(\"a\");a.href=url;a.download=\"tree.svg\";a.click();};const calculateTreeDepth=node=>{if(!node)return 0;return 1+Math.max(calculateTreeDepth(node.left),calculateTreeDepth(node.right));};const renderTree=function(node,x,y,level){let parentX=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;let parentY=arguments.length>5&&arguments[5]!==undefined?arguments[5]:null;if(!node)return null;const horizontalSpacing=3800/Math.pow(2,level+4);const leftChildX=x-horizontalSpacing;const rightChildX=x+horizontalSpacing;const childY=y+100;return/*#__PURE__*/_jsxs(_Fragment,{children:[parentX!==null&&/*#__PURE__*/_jsx(\"line\",{x1:parentX,y1:parentY+28,x2:x,y2:y,stroke:\"black\",strokeWidth:\"3\"}),/*#__PURE__*/_jsxs(\"g\",{className:\"circle-group\",children:[/*#__PURE__*/_jsx(\"circle\",{cx:x,cy:y,r:\"25\",className:highlightedNodes.includes(node.value)?\"highlighted-circle\":\"tree-circle\"}),/*#__PURE__*/_jsx(\"text\",{x:x,y:y,textAnchor:\"middle\",dy:\"5\",fill:\"white\",fontWeight:\"bold\",children:node.value})]}),node.left&&renderTree(node.left,leftChildX,childY,level+1,x,y),node.right&&renderTree(node.right,rightChildX,childY,level+1,x,y)]});};return/*#__PURE__*/_jsxs(\"div\",{className:\"tree-visualizer-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Tree Visualizer\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-download-container\",children:[/*#__PURE__*/_jsx(\"textarea\",{className:\"input-box\",value:input,onChange:e=>setInput(e.target.value),placeholder:\"Enter a level-order array, e.g., [1,2,3,4,5,null,8]\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"download-container\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"download-button\",onClick:handleDownload,children:/*#__PURE__*/_jsx(\"img\",{src:db,alt:\"Download\",className:\"download-icon\"})}),/*#__PURE__*/_jsx(\"p\",{className:\"download-text\",children:\"Download Tree\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-container\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"visualize-button\",onClick:handleVisualize,children:\"Visualize Tree\"}),/*#__PURE__*/_jsx(\"button\",{className:\"bfs-button\",onClick:handleBFSVisualize,children:\"BFS\"}),/*#__PURE__*/_jsx(\"button\",{className:\"dfs-button\",onClick:handleDFSVisualize,children:\"DFS\"}),/*#__PURE__*/_jsx(\"button\",{className:\"dfs-button\",onClick:()=>inorderTraversal(treeData),children:\"Inorder\"}),/*#__PURE__*/_jsx(\"button\",{className:\"dfs-button\",onClick:()=>preorderTraversal(treeData),children:\"Preorder\"}),/*#__PURE__*/_jsx(\"button\",{className:\"dfs-button\",onClick:()=>postorderTraversal(treeData),children:\"Postorder\"})]}),isBfsRunning&&/*#__PURE__*/_jsx(\"div\",{className:\"queue-container\",children:/*#__PURE__*/_jsxs(\"h3\",{className:\"queue-title\",children:[\"BFS Queue:\",\" \",bfsQueue.map((value,index)=>/*#__PURE__*/_jsx(\"span\",{className:\"queue-inline-item \".concat(highlightedNodes.includes(value)?\"red-queue-item\":\"\"),children:value},index))]})}),/*#__PURE__*/_jsx(\"div\",{className:\"canvas-container\",children:/*#__PURE__*/_jsx(\"svg\",{id:\"treeCanvas\",className:\"tree-canvas\",viewBox:\"0 0 1000 \".concat(Math.max(100,100+calculateTreeDepth(treeData)*100)),children:treeData&&renderTree(treeData,500,calculateTreeDepth(treeData)<=3?150:120,0)})}),isTraversalRunning&&/*#__PURE__*/_jsxs(\"div\",{className:\"traversal-result-container\",children:[inorderResult.length>0&&/*#__PURE__*/_jsxs(\"h3\",{className:\"queue-title\",children:[\"Inorder Traversal: \",inorderResult.join(\", \")]}),preorderResult.length>0&&/*#__PURE__*/_jsxs(\"h3\",{className:\"queue-title\",children:[\"Preorder Traversal: \",preorderResult.join(\", \")]}),postorderResult.length>0&&/*#__PURE__*/_jsxs(\"h3\",{className:\"queue-title\",children:[\"Postorder Traversal: \",postorderResult.join(\", \")]})]})]});};export default TreeVisualizer;","map":{"version":3,"names":["React","useState","db","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TreeVisualizer","input","setInput","treeData","setTreeData","highlightedNodes","setHighlightedNodes","bfsQueue","setBfsQueue","inorderResult","setInorderResult","preorderResult","setPreorderResult","postorderResult","setPostorderResult","isBfsRunning","setIsBfsRunning","isTraversalRunning","setIsTraversalRunning","buildTree","arr","length","nodes","map","value","left","right","i","j","handleVisualize","parsedArray","JSON","parse","error","alert","bfsTraversalWithQueue","node","queue","traversal","visualQueue","current","shift","push","n","index","interval","setInterval","clearInterval","dfsTraversal","result","dfs","resetTraversalResults","inorderTraversal","inorder","prev","Promise","resolve","setTimeout","then","preorderTraversal","preorder","postorderTraversal","postorder","visualizeTraversal","handleBFSVisualize","handleDFSVisualize","handleDownload","svgElement","document","getElementById","svgData","XMLSerializer","serializeToString","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","calculateTreeDepth","Math","max","renderTree","x","y","level","parentX","arguments","undefined","parentY","horizontalSpacing","pow","leftChildX","rightChildX","childY","children","x1","y1","x2","y2","stroke","strokeWidth","className","cx","cy","r","includes","textAnchor","dy","fill","fontWeight","onChange","e","target","placeholder","onClick","src","alt","concat","id","viewBox","join"],"sources":["C:/Users/hp/Desktop/new/algo/src/TreeVisualisation.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TreeVisualisation.css\";\r\nimport db from \"./assets/Download_button.png\";\r\n\r\nconst TreeVisualizer = () => {\r\n  const [input, setInput] = useState('[1,2,3,4,5,null,8,null,null,6,7,9]');\r\n  const [treeData, setTreeData] = useState(null);\r\n  const [highlightedNodes, setHighlightedNodes] = useState([]);\r\n  const [bfsQueue, setBfsQueue] = useState([]);\r\n  const [inorderResult, setInorderResult] = useState([]);\r\n  const [preorderResult, setPreorderResult] = useState([]);\r\n  const [postorderResult, setPostorderResult] = useState([]);\r\n  const [isBfsRunning, setIsBfsRunning] = useState(false);\r\n  const [isTraversalRunning, setIsTraversalRunning] = useState(false);\r\n\r\n  const buildTree = (arr) => {\r\n    if (!arr.length) return null;\r\n    const nodes = arr.map((value) =>\r\n      value !== null ? { value, left: null, right: null } : null\r\n    );\r\n    for (let i = 0, j = 1; j < arr.length; i++) {\r\n      if (nodes[i] !== null) {\r\n        if (j < arr.length) nodes[i].left = nodes[j++];\r\n        if (j < arr.length) nodes[i].right = nodes[j++];\r\n      }\r\n    }\r\n    return nodes[0];\r\n  };\r\n  const handleVisualize = () => {\r\n    try {\r\n      const parsedArray = JSON.parse(input);\r\n      setTreeData(buildTree(parsedArray));\r\n    } catch (error) {\r\n      alert(\"Invalid input format. Please enter a valid JSON array.\");\r\n    }\r\n  };\r\n\r\n  const bfsTraversalWithQueue = (node) => {\r\n    setIsBfsRunning(true);\r\n    setIsTraversalRunning(false);\r\n    const queue = [node];\r\n    const traversal = [];\r\n    const visualQueue = [];\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift();\r\n      if (current) {\r\n        traversal.push(current.value);\r\n        visualQueue.push([...queue.map((n) => n.value), current.value]);\r\n        if (current.left) queue.push(current.left);\r\n        if (current.right) queue.push(current.right);\r\n      }\r\n    }\r\n\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < visualQueue.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n        setBfsQueue(visualQueue[index]);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setIsBfsRunning(false);\r\n        setHighlightedNodes([]);\r\n        setBfsQueue([]);\r\n      }\r\n    }, 1500);\r\n  };\r\n\r\n  const dfsTraversal = (node) => {\r\n    const result = [];\r\n    const dfs = (current) => {\r\n      if (!current) return;\r\n      result.push(current.value);\r\n      dfs(current.left);\r\n      dfs(current.right);\r\n    };\r\n    dfs(node);\r\n    return result;\r\n  };\r\n  const resetTraversalResults = () => {\r\n    setInorderResult([]);\r\n    setPreorderResult([]);\r\n    setPostorderResult([]);\r\n  };\r\n  \r\n  const inorderTraversal = (node) => {\r\n    resetTraversalResults(); // Reset results before starting\r\n    setIsTraversalRunning(true);\r\n    const result = [];\r\n    const inorder = async (current) => {\r\n      if (!current) return;\r\n      await inorder(current.left);\r\n      result.push(current.value);\r\n      setHighlightedNodes([current.value]);\r\n      setInorderResult((prev) => [...prev, current.value]);\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n      await inorder(current.right);\r\n    };\r\n    inorder(node).then(() => setHighlightedNodes([]));\r\n  };\r\n  \r\n  const preorderTraversal = (node) => {\r\n    resetTraversalResults(); // Reset results before starting\r\n    setIsTraversalRunning(true);\r\n    const result = [];\r\n    const preorder = async (current) => {\r\n      if (!current) return;\r\n      result.push(current.value);\r\n      setHighlightedNodes([current.value]);\r\n      setPreorderResult((prev) => [...prev, current.value]);\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n      await preorder(current.left);\r\n      await preorder(current.right);\r\n    };\r\n    preorder(node).then(() => setHighlightedNodes([]));\r\n  };\r\n  \r\n  const postorderTraversal = (node) => {\r\n    resetTraversalResults(); // Reset results before starting\r\n    setIsTraversalRunning(true);\r\n    const result = [];\r\n    const postorder = async (current) => {\r\n      if (!current) return;\r\n      await postorder(current.left);\r\n      await postorder(current.right);\r\n      result.push(current.value);\r\n      setHighlightedNodes([current.value]);\r\n      setPostorderResult((prev) => [...prev, current.value]);\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n    };\r\n    postorder(node).then(() => setHighlightedNodes([]));\r\n  };\r\n  \r\n  const visualizeTraversal = (traversal) => {\r\n    setIsBfsRunning(false);\r\n    setIsTraversalRunning(true);\r\n    let index = 0;\r\n    const interval = setInterval(() => {\r\n      if (index < traversal.length) {\r\n        setHighlightedNodes([traversal[index]]);\r\n        index++;\r\n      } else {\r\n        clearInterval(interval);\r\n        setHighlightedNodes([]);\r\n      }\r\n    }, 1500);\r\n  };\r\n\r\n  const handleBFSVisualize = () => {\r\n    if (!isBfsRunning && treeData) {\r\n      bfsTraversalWithQueue(treeData);\r\n    } else if (isBfsRunning) {\r\n      alert(\"BFS is already running. Please wait for it to finish.\");\r\n    } else {\r\n      alert(\"Please visualize the tree first.\");\r\n    }\r\n  };\r\n\r\n  const handleDFSVisualize = () => {\r\n    const traversal = dfsTraversal(treeData);\r\n    visualizeTraversal(traversal);\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    const svgElement = document.getElementById(\"treeCanvas\");\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"tree.svg\";\r\n    a.click();\r\n  };\r\n\r\n  const calculateTreeDepth = (node) => {\r\n    if (!node) return 0;\r\n    return 1 + Math.max(calculateTreeDepth(node.left), calculateTreeDepth(node.right));\r\n  };\r\n\r\n  const renderTree = (node, x, y, level, parentX = null, parentY = null) => {\r\n    if (!node) return null;\r\n\r\n    const horizontalSpacing = 3800 / Math.pow(2, level + 4);\r\n    const leftChildX = x - horizontalSpacing;\r\n    const rightChildX = x + horizontalSpacing;\r\n    const childY = y + 100;\r\n\r\n    return (\r\n      <>\r\n        {parentX !== null && (\r\n          <line\r\n            x1={parentX}\r\n            y1={parentY + 28}\r\n            x2={x}\r\n            y2={y}\r\n            stroke=\"black\"\r\n            strokeWidth=\"3\"\r\n          />\r\n        )}\r\n        <g className=\"circle-group\">\r\n          <circle\r\n            cx={x}\r\n            cy={y}\r\n            r=\"25\"\r\n            className={\r\n              highlightedNodes.includes(node.value)\r\n                ? \"highlighted-circle\"\r\n                : \"tree-circle\"\r\n            }\r\n          />\r\n          <text\r\n            x={x}\r\n            y={y}\r\n            textAnchor=\"middle\"\r\n            dy=\"5\"\r\n            fill=\"white\"\r\n            fontWeight=\"bold\"\r\n          >\r\n            {node.value}\r\n          </text>\r\n        </g>\r\n        {node.left && renderTree(node.left, leftChildX, childY, level + 1, x, y)}\r\n        {node.right &&\r\n          renderTree(node.right, rightChildX, childY, level + 1, x, y)}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"tree-visualizer-container\">\r\n      <h1 className=\"title\">Tree Visualizer</h1>\r\n\r\n      <div className=\"input-download-container\">\r\n        <textarea\r\n          className=\"input-box\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Enter a level-order array, e.g., [1,2,3,4,5,null,8]\"\r\n        />\r\n        <div className=\"download-container\">\r\n          <button className=\"download-button\" onClick={handleDownload}>\r\n            <img src={db} alt=\"Download\" className=\"download-icon\" />\r\n          </button>\r\n          <p className=\"download-text\">Download Tree</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"button-container\">\r\n        <button className=\"visualize-button\" onClick={handleVisualize}>\r\n          Visualize Tree\r\n        </button>\r\n        <button className=\"bfs-button\" onClick={handleBFSVisualize}>\r\n          BFS\r\n        </button>\r\n        <button className=\"dfs-button\" onClick={handleDFSVisualize}>\r\n          DFS\r\n        </button>\r\n        <button\r\n          className=\"dfs-button\"\r\n          onClick={() => inorderTraversal(treeData)}\r\n        >\r\n          Inorder\r\n        </button>\r\n        <button\r\n          className=\"dfs-button\"\r\n          onClick={() => preorderTraversal(treeData)}\r\n        >\r\n          Preorder\r\n        </button>\r\n        <button\r\n          className=\"dfs-button\"\r\n          onClick={() => postorderTraversal(treeData)}\r\n        >\r\n          Postorder\r\n        </button>\r\n      </div>\r\n\r\n      {isBfsRunning && (\r\n        <div className=\"queue-container\">\r\n          <h3 className=\"queue-title\">\r\n            BFS Queue:{\" \"}\r\n            {bfsQueue.map((value, index) => (\r\n              <span\r\n                key={index}\r\n                className={`queue-inline-item ${\r\n                  highlightedNodes.includes(value) ? \"red-queue-item\" : \"\"\r\n                }`}\r\n              >\r\n                {value}\r\n              </span>\r\n            ))}\r\n          </h3>\r\n        </div>\r\n      )}\r\n\r\n<div className=\"canvas-container\">\r\n  <svg\r\n    id=\"treeCanvas\"\r\n    className=\"tree-canvas\"\r\n    viewBox={`0 0 1000 ${Math.max(100, 100 + calculateTreeDepth(treeData) * 100)}`}\r\n  >\r\n    {treeData && renderTree(treeData, 500, calculateTreeDepth(treeData) <= 3 ? 150 : 120, 0)}\r\n  </svg>\r\n</div>\r\n\r\n      {isTraversalRunning && (\r\n        <div className=\"traversal-result-container\">\r\n          {inorderResult.length > 0 && (\r\n            <h3 className=\"queue-title\">Inorder Traversal: {inorderResult.join(\", \")}</h3>\r\n          )}\r\n          {preorderResult.length > 0 && (\r\n            <h3 className=\"queue-title\">Preorder Traversal: {preorderResult.join(\", \")}</h3>\r\n          )}\r\n          {postorderResult.length > 0 && (\r\n            <h3 className=\"queue-title\">Postorder Traversal: {postorderResult.join(\", \")}</h3>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}