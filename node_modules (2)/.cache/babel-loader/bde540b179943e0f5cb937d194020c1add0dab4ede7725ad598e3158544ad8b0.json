{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\new\\\\algo\\\\src\\\\GraphVisualization.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport { toPng } from \"html-to-image\";\nimport \"./GraphVisualization.css\";\nimport db from \"./assets/down-arrow_752650.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphVisualization = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [isDirected, setIsDirected] = useState(true);\n  const [queueState, setQueueState] = useState([]); // Queue state for BFS\n  const [visitedNodes, setVisitedNodes] = useState([]); // Visited nodes in BFS\n\n  const svgRef = useRef();\n  const graphContainerRef = useRef();\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInput(value);\n    validateInput(value);\n  };\n  const validateInput = input => {\n    try {\n      const lines = input.trim().split(\"\\n\");\n      const newNodes = [];\n      const newEdges = [];\n      lines.forEach(line => {\n        const parts = line.trim().split(\" \");\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\n        }\n        const [from, to, weight] = parts;\n        if (!newNodes.some(node => node.id === from)) newNodes.push({\n          id: from\n        });\n        if (!newNodes.some(node => node.id === to)) newNodes.push({\n          id: to\n        });\n        const edgeWeight = weight ? parseInt(weight) : null;\n        newEdges.push({\n          source: from,\n          target: to,\n          weight: edgeWeight\n        });\n        if (!isDirected) {\n          newEdges.push({\n            source: to,\n            target: from,\n            weight: edgeWeight\n          });\n        }\n      });\n      setNodes(newNodes);\n      setEdges(newEdges);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const performBFS = startNode => {\n    if (!startNode || !nodes.some(node => node.id === startNode)) {\n      setError(\"Start node does not exist!\");\n      return;\n    }\n    const queue = [startNode];\n    const visited = new Set();\n    setQueueState([...queue]); // Initialize queue display\n    setVisitedNodes([]); // Clear visited nodes\n\n    const interval = setInterval(() => {\n      if (queue.length === 0) {\n        clearInterval(interval);\n        return;\n      }\n      const currentNode = queue.shift();\n      if (!visited.has(currentNode)) {\n        visited.add(currentNode);\n        const neighbors = edges.filter(edge => edge.source === currentNode).map(edge => edge.target);\n        neighbors.forEach(neighbor => {\n          if (!visited.has(neighbor)) queue.push(neighbor);\n        });\n        setQueueState([...queue]); // Update queue state for display\n        setVisitedNodes(prev => [...prev, currentNode]); // Append visited node\n      }\n    }, 500);\n  };\n  useEffect(() => {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll(\"*\").remove();\n    if (nodes.length === 0 || edges.length === 0) return;\n    const width = 700;\n    const height = 350;\n    const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(edges).id(d => d.id).distance(140)).force(\"charge\", d3.forceManyBody().strength(-300)).force(\"center\", d3.forceCenter(width / 2, height / 2)).on(\"tick\", ticked);\n    const link = svg.append(\"g\").selectAll(\"line\").data(edges).enter().append(\"line\").attr(\"stroke\", \"#333\").attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\n    const node = svg.append(\"g\").selectAll(\"circle\").data(nodes).enter().append(\"circle\").attr(\"r\", 20).attr(\"fill\", d => visitedNodes.includes(d.id) ? \"orange\" : \"#4CAF50\").call(d3.drag().on(\"start\", dragStarted).on(\"drag\", dragged).on(\"end\", dragEnded));\n    const label = svg.append(\"g\").selectAll(\"text\").data(nodes).enter().append(\"text\").text(d => d.id).attr(\"font-size\", \"12px\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \".35em\").attr(\"fill\", \"white\");\n    function ticked() {\n      link.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n      node.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n      label.attr(\"x\", d => d.x).attr(\"y\", d => d.y);\n    }\n    function dragStarted(event, d) {\n      if (!event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    function dragged(event, d) {\n      d.fx = event.x;\n      d.fy = event.y;\n    }\n    function dragEnded(event, d) {\n      if (!event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n    return () => simulation.stop();\n  }, [nodes, edges, isDirected, visitedNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-visualization-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [isDirected ? \"Directed\" : \"Undirected\", \" Graph Visualization\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: `Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`,\n      onChange: handleInputChange,\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        var _nodes$;\n        return performBFS((_nodes$ = nodes[0]) === null || _nodes$ === void 0 ? void 0 : _nodes$.id);\n      },\n      children: \"Perform BFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Queue State: \", queueState.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Visited Nodes: \", visitedNodes.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"700\",\n      height: \"350\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphVisualization, \"SqB6WYl97RBKfCSEUmKrXyqHzyU=\");\n_c = GraphVisualization;\nexport default GraphVisualization;\nvar _c;\n$RefreshReg$(_c, \"GraphVisualization\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","toPng","db","jsxDEV","_jsxDEV","GraphVisualization","_s","nodes","setNodes","edges","setEdges","input","setInput","error","setError","isDirected","setIsDirected","queueState","setQueueState","visitedNodes","setVisitedNodes","svgRef","graphContainerRef","handleInputChange","e","value","target","validateInput","lines","trim","split","newNodes","newEdges","forEach","line","parts","length","isNaN","Error","from","to","weight","some","node","id","push","edgeWeight","parseInt","source","message","performBFS","startNode","queue","visited","Set","interval","setInterval","clearInterval","currentNode","shift","has","add","neighbors","filter","edge","map","neighbor","prev","svg","select","current","selectAll","remove","width","height","simulation","forceSimulation","force","forceLink","d","distance","forceManyBody","strength","forceCenter","on","ticked","link","append","data","enter","attr","includes","call","drag","dragStarted","dragged","dragEnded","label","text","x","y","event","active","alphaTarget","restart","fx","fy","stop","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","onClick","_nodes$","join","ref","_c","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/new/algo/src/GraphVisualization.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { toPng } from \"html-to-image\";\r\nimport \"./GraphVisualization.css\";\r\nimport db from \"./assets/down-arrow_752650.png\";\r\n\r\nconst GraphVisualization = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [isDirected, setIsDirected] = useState(true);\r\n  const [queueState, setQueueState] = useState([]); // Queue state for BFS\r\n  const [visitedNodes, setVisitedNodes] = useState([]); // Visited nodes in BFS\r\n\r\n  const svgRef = useRef();\r\n  const graphContainerRef = useRef();\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    validateInput(value);\r\n  };\r\n\r\n  const validateInput = (input) => {\r\n    try {\r\n      const lines = input.trim().split(\"\\n\");\r\n      const newNodes = [];\r\n      const newEdges = [];\r\n\r\n      lines.forEach((line) => {\r\n        const parts = line.trim().split(\" \");\r\n        if (parts.length < 2 || isNaN(parts[0]) || isNaN(parts[1])) {\r\n          throw new Error(\"Invalid input format! Each line must have two integers, and optionally a weight.\");\r\n        }\r\n\r\n        const [from, to, weight] = parts;\r\n        if (!newNodes.some((node) => node.id === from)) newNodes.push({ id: from });\r\n        if (!newNodes.some((node) => node.id === to)) newNodes.push({ id: to });\r\n\r\n        const edgeWeight = weight ? parseInt(weight) : null;\r\n        newEdges.push({ source: from, target: to, weight: edgeWeight });\r\n\r\n        if (!isDirected) {\r\n          newEdges.push({ source: to, target: from, weight: edgeWeight });\r\n        }\r\n      });\r\n\r\n      setNodes(newNodes);\r\n      setEdges(newEdges);\r\n      setError(\"\");\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const performBFS = (startNode) => {\r\n    if (!startNode || !nodes.some((node) => node.id === startNode)) {\r\n      setError(\"Start node does not exist!\");\r\n      return;\r\n    }\r\n\r\n    const queue = [startNode];\r\n    const visited = new Set();\r\n\r\n    setQueueState([...queue]); // Initialize queue display\r\n    setVisitedNodes([]); // Clear visited nodes\r\n\r\n    const interval = setInterval(() => {\r\n      if (queue.length === 0) {\r\n        clearInterval(interval);\r\n        return;\r\n      }\r\n\r\n      const currentNode = queue.shift();\r\n      if (!visited.has(currentNode)) {\r\n        visited.add(currentNode);\r\n\r\n        const neighbors = edges\r\n          .filter((edge) => edge.source === currentNode)\r\n          .map((edge) => edge.target);\r\n\r\n        neighbors.forEach((neighbor) => {\r\n          if (!visited.has(neighbor)) queue.push(neighbor);\r\n        });\r\n\r\n        setQueueState([...queue]); // Update queue state for display\r\n        setVisitedNodes((prev) => [...prev, currentNode]); // Append visited node\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const svg = d3.select(svgRef.current);\r\n    svg.selectAll(\"*\").remove();\r\n\r\n    if (nodes.length === 0 || edges.length === 0) return;\r\n\r\n    const width = 700;\r\n    const height = 350;\r\n\r\n    const simulation = d3\r\n      .forceSimulation(nodes)\r\n      .force(\"link\", d3.forceLink(edges).id((d) => d.id).distance(140))\r\n      .force(\"charge\", d3.forceManyBody().strength(-300))\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .on(\"tick\", ticked);\r\n\r\n    const link = svg\r\n      .append(\"g\")\r\n      .selectAll(\"line\")\r\n      .data(edges)\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"stroke\", \"#333\")\r\n      .attr(\"marker-end\", isDirected ? \"url(#arrowhead)\" : null);\r\n\r\n    const node = svg\r\n      .append(\"g\")\r\n      .selectAll(\"circle\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"circle\")\r\n      .attr(\"r\", 20)\r\n      .attr(\"fill\", (d) =>\r\n        visitedNodes.includes(d.id) ? \"orange\" : \"#4CAF50\"\r\n      )\r\n      .call(\r\n        d3\r\n          .drag()\r\n          .on(\"start\", dragStarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragEnded)\r\n      );\r\n\r\n    const label = svg\r\n      .append(\"g\")\r\n      .selectAll(\"text\")\r\n      .data(nodes)\r\n      .enter()\r\n      .append(\"text\")\r\n      .text((d) => d.id)\r\n      .attr(\"font-size\", \"12px\")\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .attr(\"dy\", \".35em\")\r\n      .attr(\"fill\", \"white\");\r\n\r\n    function ticked() {\r\n      link\r\n        .attr(\"x1\", (d) => d.source.x)\r\n        .attr(\"y1\", (d) => d.source.y)\r\n        .attr(\"x2\", (d) => d.target.x)\r\n        .attr(\"y2\", (d) => d.target.y);\r\n\r\n      node.attr(\"cx\", (d) => d.x).attr(\"cy\", (d) => d.y);\r\n\r\n      label.attr(\"x\", (d) => d.x).attr(\"y\", (d) => d.y);\r\n    }\r\n\r\n    function dragStarted(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    }\r\n\r\n    function dragged(event, d) {\r\n      d.fx = event.x;\r\n      d.fy = event.y;\r\n    }\r\n\r\n    function dragEnded(event, d) {\r\n      if (!event.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    }\r\n\r\n    return () => simulation.stop();\r\n  }, [nodes, edges, isDirected, visitedNodes]);\r\n\r\n  return (\r\n    <div className=\"graph-visualization-container\">\r\n      <h1>{isDirected ? \"Directed\" : \"Undirected\"} Graph Visualization</h1>\r\n      <textarea\r\n        placeholder={`Enter edges (e.g., \"1 2 3\" for edge with weight 3) one per line`}\r\n        onChange={handleInputChange}\r\n        value={input}\r\n      ></textarea>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      <button onClick={() => performBFS(nodes[0]?.id)}>Perform BFS</button>\r\n      <div>\r\n        <h3>Queue State: {queueState.join(\", \")}</h3>\r\n        <h3>Visited Nodes: {visitedNodes.join(\", \")}</h3>\r\n      </div>\r\n      <svg ref={svgRef} width=\"700\" height=\"350\"></svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}